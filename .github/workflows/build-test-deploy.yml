name: 'build/test/deploy'

env:
  DOTNET_SOLUTION: './src/Sokol.sln'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CORE_SDK_VERSION: 3.1.100
  MYGET_ACCESS_TOKEN: ${{ secrets.MYGET_ACCESS_TOKEN }}
  MYGET_SOURCE_URL: 'https://www.myget.org/F/lithiumtoast/api/v3/index.json'

on:
  pull_request:
    branches:
      - master
      - develop

jobs:

  sokol-gfx-build-windows-job:
    name: 'Build sokol_gfx for Windows'
    runs-on: windows-latest
    steps:
    
    - name: 'Checkout repository'
      uses: actions/checkout@master

    - name: 'Prepare'
      uses: actions/checkout@master
      with:
        repository: lithiumtoast/fips-sokol_gfx
        submodules: true
        path: 'workspace/fips-sokol_gfx'

    - name: 'win64-dummy-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-dummy-debug
        
    - name: 'win64-dummy-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-dummy-release
    
    - name: 'win64-opengl-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-opengl-debug
        
    - name: 'win64-opengl-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-opengl-release
        
    - name: 'win64-d3d11-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-d3d11-debug
        
    - name: 'win64-d3d11-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build win64-d3d11-release
        
  sokol-gfx-build-macos-job:
    name: 'Build sokol_gfx for macOS'
    runs-on: macos-latest
    steps:
    
    - name: 'Checkout repository'
      uses: actions/checkout@master

    - name: 'Prepare'
      uses: actions/checkout@master
      with:
        repository: lithiumtoast/fips-sokol_gfx
        submodules: true
        path: 'workspace/fips-sokol_gfx'

    - name: 'macos-dummy-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-dummy-debug
        
    - name: 'macos-dummy-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-dummy-release
    
    - name: 'macos-opengl-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-opengl-debug
        
    - name: 'macos-opengl-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-opengl-release
        
    - name: 'macos-metal-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-d3d11-debug
        
    - name: 'macos-metal-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build macos-d3d11-release
        
  sokol-gfx-build-linux-job:
    name: 'Build sokol_gfx for Linux'
    runs-on: ubuntu-latest
    steps:
    
    - name: 'Checkout repository'
      uses: actions/checkout@master

    - name: 'Prepare'
      uses: actions/checkout@master
      with:
        repository: lithiumtoast/fips-sokol_gfx
        submodules: true
        path: 'workspace/fips-sokol_gfx'

    - name: 'linux-dummy-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-dummy-debug
        
    - name: 'linux-dummy-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-dummy-release
    
    - name: 'linux-opengl-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-opengl-debug
        
    - name: 'linux-opengl-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-opengl-release
        
    - name: 'linux-metal-debug'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-d3d11-debug
        
    - name: 'linux-metal-release'
      run: |
        cd workspace/fips-sokol_gfx
        python fips build linux-d3d11-release

  dotnet-build-test-job:
    name: 'Build & Test .NET'
    needs: [sokol-gfx-build-windows-job, sokol-gfx-build-macos-job, sokol-gfx-build-linux-job]
    runs-on: ubuntu-latest
    steps:

    - name: 'Checkout repository'
      uses: actions/checkout@master
      with:
        submodules: true

    - name: 'Fetch all history for all tags and branches'
      run: git fetch --prune --unshallow

    - name: 'Setup GitVersion'
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.2.x'

    - name: 'Use GitVersion'
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.2

    - name: 'Echo GitVersion'
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    - name: 'Setup .NET Core CLI'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_CORE_SDK_VERSION }}'

    - name: 'Restore Solution'
      run: dotnet restore $DOTNET_SOLUTION --verbosity quiet

    - name: 'Build Solution'
      run: dotnet build $DOTNET_SOLUTION --verbosity minimal --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.nuGetVersion }}

    - name: 'Test Solution'
      run: dotnet test $DOTNET_SOLUTION --verbosity normal --configuration Release --no-build

    - name: 'Pack Solution'
      run: dotnet pack $DOTNET_SOLUTION --output './nuget-packages' --verbosity minimal --configuration Release --no-build -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }}

    - name: 'Upload Packed Artifacts'
      uses: actions/upload-artifact@v2-preview
      with:
        name: nuget-packages
        path: './nuget-packages/*/**'

  deploy-job:
    name: 'Deploy .NET'
    needs: [dotnet-build-test-job]
    runs-on: ubuntu-latest
    steps:

    - name: 'Setup .NET Core CLI'
      uses: actions/setup-dotnet@v1

    - name: 'Download NuGet Packages'
      uses: actions/download-artifact@v1
      with:
        name: nuget-packages

    - name: 'Echo Packages'
      run: find ./nuget-packages/ -not -type d -exec basename {} \;
      
    - name: 'Add Packages Source: MyGet'
      run: dotnet nuget add source $MYGET_SOURCE_URL --name 'MyGet'
 
    - name: 'Upload Packages: MyGet'
      run: dotnet nuget push './**/*.nupkg' --source 'MyGet' --skip-duplicate --api-key $MYGET_ACCESS_TOKEN
  
