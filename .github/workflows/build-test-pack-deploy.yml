name: "Build test pack deploy"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SDK_VERSION: 5.0.301
  SOLUTION_PATH: './Sokol.sln'
  MYGET_ACCESS_TOKEN: ${{ secrets.MYGET_ACCESS_TOKEN }}
  MYGET_SOURCE_URL: 'https://www.myget.org/F/lithiumtoast/api/v3/index.json'

on:
  repository_dispatch:
    types: [build-test-pack-deploy]

jobs:

  version-job:
    name: "Get repository version"
    runs-on: ubuntu-latest

    steps:
    - name: "Clone Git repository"
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: "Git fetch all history for all tags and branches"
      run: git fetch --prune --unshallow

    - name: "Install GitVersion"
      uses: gittools/actions/gitversion/setup@v0.9.6
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # workaround for https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ until the execute action is updated
      with:
        versionSpec: '5.x'
          
    - name: "Use GitVersion"
      uses: gittools/actions/gitversion/execute@v0.9.6

    - name: "Write version to disk"
      run: echo "$(date +%Y).$(date +%m).$(date +%d)-$GITVERSION_NUGETPRERELEASETAGV2" >> version.txt

    - name: "Upload version artifact"
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt
  
  native-build-library:
    name: "Native: build Sokol library"
    needs: [version-job]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
      
    - name: "Clone Git repository"
      uses: actions/checkout@master
      with:
        submodules: true

    - name: "Setup Linux dependencies"
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install \
          libxcursor-dev
          libxi-dev

    - name: "Build Sokol (Unix)"
      if: matrix.os != 'windows-latest'
      shell: bash
      run: ./library.sh

    - name: "Build Sokol (Windows)"
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: .\library.cmd

    - name: "Upload native libraries"
      uses: actions/upload-artifact@v2
      with:
        name: native-libraries-${{ matrix.os }}
        path: ${{ github.workspace }}/lib/

  dotnet-build-test-pack-job:
    name: ".NET: build, test, & pack"
    needs: [native-build-library]
    runs-on: ubuntu-latest

    steps:

    - name: "Download repository version artifact"
      uses: actions/download-artifact@v2
      with:
        name: version

    - name: "Read version artifact"
      shell: bash
      run: |
        echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

    - name: "Print version artifact"
      shell: bash
      run: |
        echo $VERSION

    - name: "Clone Git repository"
      uses: actions/checkout@master
      with:
        submodules: true

    - name: "Install .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_SDK_VERSION }}'

    - name: "Clean solution"
      run: dotnet clean '${{ env.SOLUTION_PATH }}' --configuration Release && dotnet nuget locals all --clear

    - name: "Download native libraries (Windows)"
      uses: actions/download-artifact@v2
      with:
        name: native-libraries-windows-latest
        path: ${{ github.workspace }}/lib

    - name: "Download native libraries (macOS)"
      uses: actions/download-artifact@v2
      with:
        name: native-libraries-macos-latest
        path: ${{ github.workspace }}/lib

    - name: "Download native libraries (Linux)"
      uses: actions/download-artifact@v2
      with:
        name: native-libraries-ubuntu-latest
        path: ${{ github.workspace }}/lib

    - name: "Print native libraries"
      shell: bash
      run: |
        ls -a ${{ github.workspace }}/lib

    - name: "Build .NET solution"
      run: dotnet build '${{ env.SOLUTION_PATH }}' --nologo --verbosity minimal --configuration Release /p:Version='${{ env.VERSION }}'

    - name: "Test .NET solution"
      run: dotnet test '${{ env.SOLUTION_PATH }}' --nologo --verbosity normal --configuration Release --no-build

    - name: "Pack .NET solution"
      run: dotnet pack '${{ env.SOLUTION_PATH }}' --nologo --output "./nuget-packages-packed" --verbosity minimal --configuration Release --no-build -p:PackageVersion='${{ env.VERSION }}'

    - name: "Upload .NET built packages"
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages-packed
        path: './nuget-packages-packed/*/**'

  deploy-job:
    name: "Deploy"
    needs: [dotnet-build-test-pack-job]
    runs-on: ubuntu-latest
    steps:

    - name: "Install .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_SDK_VERSION }}'

    - name: "Download NuGet Packages"
      uses: actions/download-artifact@v1
      with:
        name: nuget-packages-packed
        path: './nuget-packages-packed'

    - name: "Upload Packages: MyGet"
      run: dotnet nuget push "./**/*.nupkg" --source ${{ env.MYGET_SOURCE_URL }} --skip-duplicate --api-key ${{ env.MYGET_ACCESS_TOKEN }} 
