name: "Build test pack deploy"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SDK_VERSION: 5.0.301

on:
  push:
    branches: [develop]
    paths-ignore: ['**/*.md']
  pull_request_target:
    branches: [develop]

jobs:

  bindgen-job:
    name: "Bindgen"
    runs-on: ubuntu-latest
    steps:

    - name: "Clone Git repository"
      uses: actions/checkout@master
      with:
        submodules: true

    - name: "Bindgen"
      shell: bash
      run: ./bindgen.sh

    - name: "Add + commit + push (if necessary)"
      uses: EndBug/add-and-commit@v7
      with:
        default_author: user_info

  version-job:
    name: "Version"
    needs: [bindgen-job]
    runs-on: ubuntu-latest

    steps:
    - name: "Clone Git repository"
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true

    - name: "Git fetch all history for all tags and branches"
      run: git fetch --prune --unshallow

    - name: "Install GitVersion"
      uses: gittools/actions/gitversion/setup@v0.9.6
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # workaround for https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ until the execute action is updated
      with:
        versionSpec: '5.x'
          
    - name: "Use GitVersion"
      uses: gittools/actions/gitversion/execute@v0.9.6

    - name: "Write version to disk"
      run: echo "$(git --git-dir "./ext/sokol/.git" log -1 --format="%at" | xargs -I{} date -d @{} +%Y.%m.%d)-$GITVERSION_COMMITSSINCEVERSIONSOURCE" >> version.txt

    - name: "Upload version artifact"
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt
  
  native-library-job:
    name: "${{ matrix.platform.rid }}"
    needs: [version-job]
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
        - { name: Windows (x64), os: windows-latest, rid: win-x64 }
        - { name: Linux (x64), os: ubuntu-latest, rid: linux-x64 }
        - { name: macOS (x64), os: macos-latest, rid: osx-x64 }
    steps:
      
    - name: "Clone"
      uses: actions/checkout@master
      with:
        submodules: true

    - name: "Linux dependencies"
      if: ${{ startsWith(matrix.platform.rid, 'linux') }}
      run: |
        sudo apt-get update
        sudo apt-get install \
          libasound2-dev \
          libegl1-mesa-dev \
          libxcursor-dev \
          libxi-dev

    - name: "Unix"
      if: ${{ !startsWith(matrix.platform.rid, 'win') }}
      shell: bash
      run: ./library.sh

    - name: "Windows"
      if: ${{ startsWith(matrix.platform.rid, 'win') }}
      shell: pwsh
      run: .\library.cmd