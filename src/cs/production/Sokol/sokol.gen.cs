// <auto-generated>
//  This code was generated by the following tool on 2023-05-09 01:02:41 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v5.1.5.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.sokol.Runtime;
[assembly: DefaultDllImportSearchPathsAttribute(DllImportSearchPath.SafeDirectories)]


namespace bottlenoselabs
{
    public static unsafe partial class sokol
    {
        private const string LibraryName = "sokol";

        #region API

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_android_get_native_activity();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_cancel_quit();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_color_format();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_consume_event();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_d3d11_get_depth_stencil_view();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_d3d11_get_device();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_d3d11_get_device_context();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_d3d11_get_render_target_view();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_d3d11_get_swap_chain();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_depth_format();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float sapp_dpi_scale();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_egl_get_context();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_egl_get_display();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong sapp_frame_count();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sapp_frame_duration();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sapp_get_clipboard_string();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sapp_get_dropped_file_path(int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sapp_mouse_cursor sapp_get_mouse_cursor();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_get_num_dropped_files();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_height();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float sapp_heightf();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_high_dpi();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_html5_ask_leave_site(CBool ask);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_html5_fetch_dropped_file(sapp_html5_fetch_request* request);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint sapp_html5_get_dropped_file_size(int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_ios_get_window();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_is_fullscreen();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_isvalid();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_keyboard_shown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_lock_mouse(CBool @lock);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_macos_get_window();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_metal_get_device();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_metal_get_drawable();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_metal_get_renderpass_descriptor();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_mouse_locked();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sapp_mouse_shown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sapp_desc sapp_query_desc();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_quit();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_request_quit();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_run(sapp_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_sample_count();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_set_clipboard_string(CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_set_icon(sapp_icon_desc* icon_desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_set_mouse_cursor(sapp_mouse_cursor cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_set_window_title(CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_context_desc sapp_sgcontext();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_show_keyboard(CBool show);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_show_mouse(CBool show);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sapp_toggle_fullscreen();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_userdata();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_wgpu_get_depth_stencil_view();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_wgpu_get_device();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_wgpu_get_render_view();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_wgpu_get_resolve_view();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sapp_width();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float sapp_widthf();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sapp_win32_get_hwnd();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sargs_boolean(CString key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sargs_equals(CString key, CString val);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sargs_exists(CString key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sargs_find(CString key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sargs_isvalid();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sargs_key_at(int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sargs_num_args();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sargs_setup(sargs_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sargs_shutdown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sargs_value(CString key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sargs_value_at(int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString sargs_value_def(CString key, CString def);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int saudio_buffer_frames();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int saudio_channels();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int saudio_expect();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool saudio_isvalid();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int saudio_push(float* frames, int num_frames);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern saudio_desc saudio_query_desc();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int saudio_sample_rate();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void saudio_setup(saudio_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void saudio_shutdown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool saudio_suspended();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* saudio_userdata();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_bind_buffer(sfetch_handle_t h, sfetch_range_t buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_cancel(sfetch_handle_t h);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_continue(sfetch_handle_t h);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sfetch_desc_t sfetch_desc();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_dowork();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sfetch_handle_valid(sfetch_handle_t h);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sfetch_max_path();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sfetch_max_userdata_bytes();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_pause(sfetch_handle_t h);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sfetch_handle_t sfetch_send(sfetch_request_t* request);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_setup(sfetch_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sfetch_shutdown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sfetch_unbind_buffer(sfetch_handle_t h);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sfetch_valid();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_activate_context(sg_context ctx_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sg_add_commit_listener(sg_commit_listener listener);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_buffer sg_alloc_buffer();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_image sg_alloc_image();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pass sg_alloc_pass();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pipeline sg_alloc_pipeline();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_shader sg_alloc_shader();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sg_append_buffer(sg_buffer buf, sg_range* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_bindings(sg_bindings* bindings);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_pipeline(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_scissor_rect(int x, int y, int width, int height, CBool origin_top_left);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_scissor_rectf(float x, float y, float width, float height, CBool origin_top_left);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_uniforms(sg_shader_stage stage, int ub_index, sg_range* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_viewport(int x, int y, int width, int height, CBool origin_top_left);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_apply_viewportf(float x, float y, float width, float height, CBool origin_top_left);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_begin_default_pass(sg_pass_action* pass_action, int width, int height);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_begin_default_passf(sg_pass_action* pass_action, float width, float height);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_begin_pass(sg_pass pass, sg_pass_action* pass_action);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_commit();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sg_d3d11_device();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_dealloc_buffer(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_dealloc_image(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_dealloc_pass(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_dealloc_pipeline(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_dealloc_shader(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_destroy_buffer(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_destroy_image(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_destroy_pass(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_destroy_pipeline(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_destroy_shader(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_discard_context(sg_context ctx_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_draw(int base_element, int num_elements, int num_instances);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_end_pass();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_fail_buffer(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_fail_image(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_fail_pass(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_fail_pipeline(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_fail_shader(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_init_buffer(sg_buffer buf, sg_buffer_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_init_image(sg_image img, sg_image_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_init_pass(sg_pass pass, sg_pass_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_init_pipeline(sg_pipeline pip, sg_pipeline_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_init_shader(sg_shader shd, sg_shader_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_trace_hooks sg_install_trace_hooks(sg_trace_hooks* trace_hooks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sg_isvalid();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_buffer sg_make_buffer(sg_buffer_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_image sg_make_image(sg_image_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pass sg_make_pass(sg_pass_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pipeline sg_make_pipeline(sg_pipeline_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_shader sg_make_shader(sg_shader_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sg_mtl_device();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* sg_mtl_render_command_encoder();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_pop_debug_group();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_push_debug_group(CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_backend sg_query_backend();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_buffer_desc sg_query_buffer_defaults(sg_buffer_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_buffer_desc sg_query_buffer_desc(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_buffer_info sg_query_buffer_info(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sg_query_buffer_overflow(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_resource_state sg_query_buffer_state(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sg_query_buffer_will_overflow(sg_buffer buf, ulong size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_desc sg_query_desc();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_features sg_query_features();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_image_desc sg_query_image_defaults(sg_image_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_image_desc sg_query_image_desc(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_image_info sg_query_image_info(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_resource_state sg_query_image_state(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_limits sg_query_limits();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pass_desc sg_query_pass_defaults(sg_pass_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pass_desc sg_query_pass_desc(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pass_info sg_query_pass_info(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_resource_state sg_query_pass_state(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pipeline_desc sg_query_pipeline_defaults(sg_pipeline_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pipeline_desc sg_query_pipeline_desc(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pipeline_info sg_query_pipeline_info(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_resource_state sg_query_pipeline_state(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_pixelformat_info sg_query_pixelformat(sg_pixel_format fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_shader_desc sg_query_shader_defaults(sg_shader_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_shader_desc sg_query_shader_desc(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_shader_info sg_query_shader_info(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_resource_state sg_query_shader_state(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool sg_remove_commit_listener(sg_commit_listener listener);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_reset_state_cache();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_setup(sg_desc* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sg_context sg_setup_context();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_shutdown();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_uninit_buffer(sg_buffer buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_uninit_image(sg_image img);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_uninit_pass(sg_pass pass);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_uninit_pipeline(sg_pipeline pip);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_uninit_shader(sg_shader shd);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_update_buffer(sg_buffer buf, sg_range* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sg_update_image(sg_image img, sg_image_data* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern sapp_desc sokol_main(int argc, CString* argv);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong stm_diff(ulong new_ticks, ulong old_ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong stm_laptime(ulong* last_time);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double stm_ms(ulong ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong stm_now();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double stm_ns(ulong ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong stm_round_to_common_refresh_rate(ulong frame_ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double stm_sec(ulong ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void stm_setup();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong stm_since(ulong start_ticks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double stm_us(ulong ticks);

        #endregion

        #region Types

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void
        {
            public delegate* unmanaged<CString, uint, uint, CString, uint, CString, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_CString_VoidPtr_Void
        {
            public delegate* unmanaged<CString, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_FloatPtr_Int_Int_Void
        {
            public delegate* unmanaged<float*, int, int, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_FloatPtr_Int_Int_VoidPtr_Void
        {
            public delegate* unmanaged<float*, int, int, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void
        {
            public delegate* unmanaged<int, int, int, int, CBool, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Int_Int_Int_VoidPtr_Void
        {
            public delegate* unmanaged<int, int, int, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sapp_eventPtr_Void
        {
            public delegate* unmanaged<sapp_event*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sapp_eventPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sapp_event*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sapp_html5_fetch_responsePtr_Void
        {
            public delegate* unmanaged<sapp_html5_fetch_response*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sfetch_response_tPtr_Void
        {
            public delegate* unmanaged<sfetch_response_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_bindingsPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_bindings*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_buffer_Sg_buffer_descPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_buffer, sg_buffer_desc*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_buffer_Sg_rangePtr_Int_VoidPtr_Void
        {
            public delegate* unmanaged<sg_buffer, sg_range*, int, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_buffer_Sg_rangePtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_buffer, sg_range*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_buffer_VoidPtr_Void
        {
            public delegate* unmanaged<sg_buffer, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_buffer_descPtr_Sg_buffer_VoidPtr_Void
        {
            public delegate* unmanaged<sg_buffer_desc*, sg_buffer, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_image_Sg_image_dataPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_image, sg_image_data*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_image_Sg_image_descPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_image, sg_image_desc*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_image_VoidPtr_Void
        {
            public delegate* unmanaged<sg_image, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_image_descPtr_Sg_image_VoidPtr_Void
        {
            public delegate* unmanaged<sg_image_desc*, sg_image, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pass_Sg_pass_actionPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pass, sg_pass_action*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pass_Sg_pass_descPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pass, sg_pass_desc*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pass_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pass, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pass_actionPtr_Int_Int_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pass_action*, int, int, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pass_descPtr_Sg_pass_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pass_desc*, sg_pass, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pipeline_Sg_pipeline_descPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pipeline, sg_pipeline_desc*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pipeline_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_pipeline_descPtr_Sg_pipeline_VoidPtr_Void
        {
            public delegate* unmanaged<sg_pipeline_desc*, sg_pipeline, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_shader_Sg_shader_descPtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_shader, sg_shader_desc*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_shader_VoidPtr_Void
        {
            public delegate* unmanaged<sg_shader, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_shader_descPtr_Sg_shader_VoidPtr_Void
        {
            public delegate* unmanaged<sg_shader_desc*, sg_shader, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Sg_shader_stage_Int_Sg_rangePtr_VoidPtr_Void
        {
            public delegate* unmanaged<sg_shader_stage, int, sg_range*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ulong_VoidPtr_VoidPtr
        {
            public delegate* unmanaged<ulong, void*, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Void
        {
            public delegate* unmanaged<void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr
        {
            public delegate* unmanaged<void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Void
        {
            public delegate* unmanaged<void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr
        {
            public delegate* unmanaged<void*, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Void
        {
            public delegate* unmanaged<void*, void*, void> Pointer;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sapp_allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void free;

            [FieldOffset(16)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 400, Pack = 8)]
        public struct sapp_desc
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Void init_cb;

            [FieldOffset(8)] // size = 8
            public FnPtr_Void frame_cb;

            [FieldOffset(16)] // size = 8
            public FnPtr_Void cleanup_cb;

            [FieldOffset(24)] // size = 8
            public FnPtr_Sapp_eventPtr_Void event_cb;

            [FieldOffset(32)] // size = 8
            public void* user_data;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_Void init_userdata_cb;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_Void frame_userdata_cb;

            [FieldOffset(56)] // size = 8
            public FnPtr_VoidPtr_Void cleanup_userdata_cb;

            [FieldOffset(64)] // size = 8
            public FnPtr_Sapp_eventPtr_VoidPtr_Void event_userdata_cb;

            [FieldOffset(72)] // size = 4
            public int width;

            [FieldOffset(76)] // size = 4
            public int height;

            [FieldOffset(80)] // size = 4
            public int sample_count;

            [FieldOffset(84)] // size = 4
            public int swap_interval;

            [FieldOffset(88)] // size = 1
            public CBool high_dpi;

            [FieldOffset(89)] // size = 1
            public CBool fullscreen;

            [FieldOffset(90)] // size = 1
            public CBool alpha;

            [FieldOffset(96)] // size = 8
            public CString window_title;

            [FieldOffset(104)] // size = 1
            public CBool enable_clipboard;

            [FieldOffset(108)] // size = 4
            public int clipboard_size;

            [FieldOffset(112)] // size = 1
            public CBool enable_dragndrop;

            [FieldOffset(116)] // size = 4
            public int max_dropped_files;

            [FieldOffset(120)] // size = 4
            public int max_dropped_file_path_length;

            [FieldOffset(128)] // size = 200
            public sapp_icon_desc icon;

            [FieldOffset(328)] // size = 24
            public sapp_allocator allocator;

            [FieldOffset(352)] // size = 16
            public sapp_logger logger;

            [FieldOffset(368)] // size = 4
            public int gl_major_version;

            [FieldOffset(372)] // size = 4
            public int gl_minor_version;

            [FieldOffset(376)] // size = 1
            public CBool win32_console_utf8;

            [FieldOffset(377)] // size = 1
            public CBool win32_console_create;

            [FieldOffset(378)] // size = 1
            public CBool win32_console_attach;

            [FieldOffset(384)] // size = 8
            public CString html5_canvas_name;

            [FieldOffset(392)] // size = 1
            public CBool html5_canvas_resize;

            [FieldOffset(393)] // size = 1
            public CBool html5_preserve_drawing_buffer;

            [FieldOffset(394)] // size = 1
            public CBool html5_premultiplied_alpha;

            [FieldOffset(395)] // size = 1
            public CBool html5_ask_leave_site;

            [FieldOffset(396)] // size = 1
            public CBool ios_keyboard_resizes_canvas;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct sapp_event
        {
            [FieldOffset(0)] // size = 8
            public ulong frame_count;

            [FieldOffset(8)] // size = 4
            public sapp_event_type type;

            [FieldOffset(12)] // size = 4
            public sapp_keycode key_code;

            [FieldOffset(16)] // size = 4
            public uint char_code;

            [FieldOffset(20)] // size = 1
            public CBool key_repeat;

            [FieldOffset(24)] // size = 4
            public uint modifiers;

            [FieldOffset(28)] // size = 4
            public sapp_mousebutton mouse_button;

            [FieldOffset(32)] // size = 4
            public float mouse_x;

            [FieldOffset(36)] // size = 4
            public float mouse_y;

            [FieldOffset(40)] // size = 4
            public float mouse_dx;

            [FieldOffset(44)] // size = 4
            public float mouse_dy;

            [FieldOffset(48)] // size = 4
            public float scroll_x;

            [FieldOffset(52)] // size = 4
            public float scroll_y;

            [FieldOffset(56)] // size = 4
            public int num_touches;

            [FieldOffset(64)] // size = 192
            public fixed byte _touches[192]; // sapp_touchpoint[8]

            public Span<sapp_touchpoint> touches
            {
                get
                {
                    fixed (sapp_event* @this = &this)
                    {
                        var pointer = &@this->_touches[0];
                        var span = new Span<sapp_touchpoint>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(256)] // size = 4
            public int window_width;

            [FieldOffset(260)] // size = 4
            public int window_height;

            [FieldOffset(264)] // size = 4
            public int framebuffer_width;

            [FieldOffset(268)] // size = 4
            public int framebuffer_height;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct sapp_html5_fetch_request
        {
            [FieldOffset(0)] // size = 4
            public int dropped_file_index;

            [FieldOffset(8)] // size = 8
            public FnPtr_Sapp_html5_fetch_responsePtr_Void callback;

            [FieldOffset(16)] // size = 16
            public sapp_range buffer;

            [FieldOffset(32)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct sapp_html5_fetch_response
        {
            [FieldOffset(0)] // size = 1
            public CBool succeeded;

            [FieldOffset(4)] // size = 4
            public sapp_html5_fetch_error error_code;

            [FieldOffset(8)] // size = 4
            public int file_index;

            [FieldOffset(16)] // size = 16
            public sapp_range data;

            [FieldOffset(32)] // size = 16
            public sapp_range buffer;

            [FieldOffset(48)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
        public struct sapp_icon_desc
        {
            [FieldOffset(0)] // size = 1
            public CBool sokol_default;

            [FieldOffset(8)] // size = 192
            public fixed byte _images[192]; // sapp_image_desc[8]

            public Span<sapp_image_desc> images
            {
                get
                {
                    fixed (sapp_icon_desc* @this = &this)
                    {
                        var pointer = &@this->_images[0];
                        var span = new Span<sapp_image_desc>(pointer, 8);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sapp_image_desc
        {
            [FieldOffset(0)] // size = 4
            public int width;

            [FieldOffset(4)] // size = 4
            public int height;

            [FieldOffset(8)] // size = 16
            public sapp_range pixels;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sapp_logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void func;

            [FieldOffset(8)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sapp_range
        {
            [FieldOffset(0)] // size = 8
            public void* ptr;

            [FieldOffset(8)] // size = 8
            public ulong size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sapp_touchpoint
        {
            [FieldOffset(0)] // size = 8
            public UIntPtr identifier;

            [FieldOffset(8)] // size = 4
            public float pos_x;

            [FieldOffset(12)] // size = 4
            public float pos_y;

            [FieldOffset(16)] // size = 4
            public sapp_android_tooltype android_tooltype;

            [FieldOffset(20)] // size = 1
            public CBool changed;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sargs_allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void free;

            [FieldOffset(16)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct sargs_desc
        {
            [FieldOffset(0)] // size = 4
            public int argc;

            [FieldOffset(8)] // size = 8
            public CString* argv;

            [FieldOffset(16)] // size = 4
            public int max_args;

            [FieldOffset(20)] // size = 4
            public int buf_size;

            [FieldOffset(24)] // size = 24
            public sargs_allocator allocator;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct saudio_allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void free;

            [FieldOffset(16)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct saudio_desc
        {
            [FieldOffset(0)] // size = 4
            public int sample_rate;

            [FieldOffset(4)] // size = 4
            public int num_channels;

            [FieldOffset(8)] // size = 4
            public int buffer_frames;

            [FieldOffset(12)] // size = 4
            public int packet_frames;

            [FieldOffset(16)] // size = 4
            public int num_packets;

            [FieldOffset(24)] // size = 8
            public FnPtr_FloatPtr_Int_Int_Void stream_cb;

            [FieldOffset(32)] // size = 8
            public FnPtr_FloatPtr_Int_Int_VoidPtr_Void stream_userdata_cb;

            [FieldOffset(40)] // size = 8
            public void* user_data;

            [FieldOffset(48)] // size = 24
            public saudio_allocator allocator;

            [FieldOffset(72)] // size = 16
            public saudio_logger logger;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct saudio_logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void func;

            [FieldOffset(8)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sfetch_allocator_t
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void free;

            [FieldOffset(16)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct sfetch_desc_t
        {
            [FieldOffset(0)] // size = 4
            public uint max_requests;

            [FieldOffset(4)] // size = 4
            public uint num_channels;

            [FieldOffset(8)] // size = 4
            public uint num_lanes;

            [FieldOffset(16)] // size = 24
            public sfetch_allocator_t allocator;

            [FieldOffset(40)] // size = 16
            public sfetch_logger_t logger;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sfetch_handle_t
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sfetch_logger_t
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void func;

            [FieldOffset(8)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sfetch_range_t
        {
            [FieldOffset(0)] // size = 8
            public void* ptr;

            [FieldOffset(8)] // size = 8
            public ulong size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct sfetch_request_t
        {
            [FieldOffset(0)] // size = 4
            public uint channel;

            [FieldOffset(8)] // size = 8
            public CString path;

            [FieldOffset(16)] // size = 8
            public sfetch_callback_t callback;

            [FieldOffset(24)] // size = 4
            public uint chunk_size;

            [FieldOffset(32)] // size = 16
            public sfetch_range_t buffer;

            [FieldOffset(48)] // size = 16
            public sfetch_range_t user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct sfetch_response_t
        {
            [FieldOffset(0)] // size = 4
            public sfetch_handle_t handle;

            [FieldOffset(4)] // size = 1
            public CBool dispatched;

            [FieldOffset(5)] // size = 1
            public CBool fetched;

            [FieldOffset(6)] // size = 1
            public CBool paused;

            [FieldOffset(7)] // size = 1
            public CBool finished;

            [FieldOffset(8)] // size = 1
            public CBool failed;

            [FieldOffset(9)] // size = 1
            public CBool cancelled;

            [FieldOffset(12)] // size = 4
            public sfetch_error_t error_code;

            [FieldOffset(16)] // size = 4
            public uint channel;

            [FieldOffset(20)] // size = 4
            public uint lane;

            [FieldOffset(24)] // size = 8
            public CString path;

            [FieldOffset(32)] // size = 8
            public void* user_data;

            [FieldOffset(40)] // size = 4
            public uint data_offset;

            [FieldOffset(48)] // size = 16
            public sfetch_range_t data;

            [FieldOffset(64)] // size = 16
            public sfetch_range_t buffer;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sg_allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void free;

            [FieldOffset(16)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 176, Pack = 4)]
        public struct sg_bindings
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 32
            public fixed byte _vertex_buffers[32]; // sg_buffer[8]

            public Span<sg_buffer> vertex_buffers
            {
                get
                {
                    fixed (sg_bindings* @this = &this)
                    {
                        var pointer = &@this->_vertex_buffers[0];
                        var span = new Span<sg_buffer>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(36)] // size = 32
            public fixed byte _vertex_buffer_offsets[32]; // int[8]

            public Span<int> vertex_buffer_offsets
            {
                get
                {
                    fixed (sg_bindings* @this = &this)
                    {
                        var pointer = &@this->_vertex_buffer_offsets[0];
                        var span = new Span<int>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(68)] // size = 4
            public sg_buffer index_buffer;

            [FieldOffset(72)] // size = 4
            public int index_buffer_offset;

            [FieldOffset(76)] // size = 48
            public fixed byte _vs_images[48]; // sg_image[12]

            public Span<sg_image> vs_images
            {
                get
                {
                    fixed (sg_bindings* @this = &this)
                    {
                        var pointer = &@this->_vs_images[0];
                        var span = new Span<sg_image>(pointer, 12);
                        return span;
                    }
                }
            }

            [FieldOffset(124)] // size = 48
            public fixed byte _fs_images[48]; // sg_image[12]

            public Span<sg_image> fs_images
            {
                get
                {
                    fixed (sg_bindings* @this = &this)
                    {
                        var pointer = &@this->_fs_images[0];
                        var span = new Span<sg_image>(pointer, 12);
                        return span;
                    }
                }
            }

            [FieldOffset(172)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct sg_blend_state
        {
            [FieldOffset(0)] // size = 1
            public CBool enabled;

            [FieldOffset(4)] // size = 4
            public sg_blend_factor src_factor_rgb;

            [FieldOffset(8)] // size = 4
            public sg_blend_factor dst_factor_rgb;

            [FieldOffset(12)] // size = 4
            public sg_blend_op op_rgb;

            [FieldOffset(16)] // size = 4
            public sg_blend_factor src_factor_alpha;

            [FieldOffset(20)] // size = 4
            public sg_blend_factor dst_factor_alpha;

            [FieldOffset(24)] // size = 4
            public sg_blend_op op_alpha;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_buffer
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
        public struct sg_buffer_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(8)] // size = 8
            public ulong size;

            [FieldOffset(16)] // size = 4
            public sg_buffer_type type;

            [FieldOffset(20)] // size = 4
            public sg_usage usage;

            [FieldOffset(24)] // size = 16
            public sg_range data;

            [FieldOffset(40)] // size = 8
            public CString label;

            [FieldOffset(48)] // size = 8
            public fixed byte _gl_buffers[8]; // uint32_t[2]

            public Span<uint> gl_buffers
            {
                get
                {
                    fixed (sg_buffer_desc* @this = &this)
                    {
                        var pointer = &@this->_gl_buffers[0];
                        var span = new Span<uint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(56)] // size = 16
            public fixed byte _mtl_buffers[16]; // const void*[2]

            public Span<nint> mtl_buffers
            {
                get
                {
                    fixed (sg_buffer_desc* @this = &this)
                    {
                        var pointer = &@this->_mtl_buffers[0];
                        var span = new Span<nint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(72)] // size = 8
            public void* d3d11_buffer;

            [FieldOffset(80)] // size = 8
            public void* wgpu_buffer;

            [FieldOffset(88)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct sg_buffer_info
        {
            [FieldOffset(0)] // size = 12
            public sg_slot_info slot;

            [FieldOffset(12)] // size = 4
            public uint update_frame_index;

            [FieldOffset(16)] // size = 4
            public uint append_frame_index;

            [FieldOffset(20)] // size = 4
            public int append_pos;

            [FieldOffset(24)] // size = 1
            public CBool append_overflow;

            [FieldOffset(28)] // size = 4
            public int num_slots;

            [FieldOffset(32)] // size = 4
            public int active_slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_buffer_layout_desc
        {
            [FieldOffset(0)] // size = 4
            public int stride;

            [FieldOffset(4)] // size = 4
            public sg_vertex_step step_func;

            [FieldOffset(8)] // size = 4
            public int step_rate;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct sg_color
        {
            [FieldOffset(0)] // size = 4
            public float r;

            [FieldOffset(4)] // size = 4
            public float g;

            [FieldOffset(8)] // size = 4
            public float b;

            [FieldOffset(12)] // size = 4
            public float a;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct sg_color_attachment_action
        {
            [FieldOffset(0)] // size = 4
            public sg_action action;

            [FieldOffset(4)] // size = 16
            public Rgba32F value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct sg_color_state
        {
            [FieldOffset(0)] // size = 4
            public sg_pixel_format pixel_format;

            [FieldOffset(4)] // size = 4
            public sg_color_mask write_mask;

            [FieldOffset(8)] // size = 28
            public sg_blend_state blend;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sg_commit_listener
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_VoidPtr_Void func;

            [FieldOffset(8)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_context
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 184, Pack = 8)]
        public struct sg_context_desc
        {
            [FieldOffset(0)] // size = 4
            public sg_pixel_format color_format;

            [FieldOffset(4)] // size = 4
            public sg_pixel_format depth_format;

            [FieldOffset(8)] // size = 4
            public int sample_count;

            [FieldOffset(16)] // size = 48
            public sg_metal_context_desc metal;

            [FieldOffset(64)] // size = 56
            public sg_d3d11_context_desc d3d11;

            [FieldOffset(120)] // size = 64
            public sg_wgpu_context_desc wgpu;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct sg_d3d11_context_desc
        {
            [FieldOffset(0)] // size = 8
            public void* device;

            [FieldOffset(8)] // size = 8
            public void* device_context;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr render_target_view_cb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr_VoidPtr render_target_view_userdata_cb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr depth_stencil_view_cb;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_VoidPtr depth_stencil_view_userdata_cb;

            [FieldOffset(48)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct sg_depth_attachment_action
        {
            [FieldOffset(0)] // size = 4
            public sg_action action;

            [FieldOffset(4)] // size = 4
            public float value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct sg_depth_state
        {
            [FieldOffset(0)] // size = 4
            public sg_pixel_format pixel_format;

            [FieldOffset(4)] // size = 4
            public sg_compare_func compare;

            [FieldOffset(8)] // size = 1
            public CBool write_enabled;

            [FieldOffset(12)] // size = 4
            public float bias;

            [FieldOffset(16)] // size = 4
            public float bias_slope_scale;

            [FieldOffset(20)] // size = 4
            public float bias_clamp;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 280, Pack = 8)]
        public struct sg_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 4
            public int buffer_pool_size;

            [FieldOffset(8)] // size = 4
            public int image_pool_size;

            [FieldOffset(12)] // size = 4
            public int shader_pool_size;

            [FieldOffset(16)] // size = 4
            public int pipeline_pool_size;

            [FieldOffset(20)] // size = 4
            public int pass_pool_size;

            [FieldOffset(24)] // size = 4
            public int context_pool_size;

            [FieldOffset(28)] // size = 4
            public int uniform_buffer_size;

            [FieldOffset(32)] // size = 4
            public int staging_buffer_size;

            [FieldOffset(36)] // size = 4
            public int sampler_cache_size;

            [FieldOffset(40)] // size = 4
            public int max_commit_listeners;

            [FieldOffset(44)] // size = 1
            public CBool disable_validation;

            [FieldOffset(48)] // size = 24
            public sg_allocator allocator;

            [FieldOffset(72)] // size = 16
            public sg_logger logger;

            [FieldOffset(88)] // size = 184
            public sg_context_desc context;

            [FieldOffset(272)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
        public struct sg_features
        {
            [FieldOffset(0)] // size = 1
            public CBool origin_top_left;

            [FieldOffset(1)] // size = 1
            public CBool image_clamp_to_border;

            [FieldOffset(2)] // size = 1
            public CBool mrt_independent_blend_state;

            [FieldOffset(3)] // size = 1
            public CBool mrt_independent_write_mask;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_image
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1536, Pack = 8)]
        public struct sg_image_data
        {
            [FieldOffset(0)] // size = 1536
            public fixed byte _subimage[1536]; // sg_range[6]

            public Span<sg_range> subimage
            {
                get
                {
                    fixed (sg_image_data* @this = &this)
                    {
                        var pointer = &@this->_subimage[0];
                        var span = new Span<sg_range>(pointer, 6);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1688, Pack = 8)]
        public struct sg_image_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 4
            public sg_image_type type;

            [FieldOffset(8)] // size = 1
            public CBool render_target;

            [FieldOffset(12)] // size = 4
            public int width;

            [FieldOffset(16)] // size = 4
            public int height;

            [FieldOffset(20)] // size = 4
            public int num_slices;

            [FieldOffset(24)] // size = 4
            public int num_mipmaps;

            [FieldOffset(28)] // size = 4
            public sg_usage usage;

            [FieldOffset(32)] // size = 4
            public sg_pixel_format pixel_format;

            [FieldOffset(36)] // size = 4
            public int sample_count;

            [FieldOffset(40)] // size = 4
            public sg_filter min_filter;

            [FieldOffset(44)] // size = 4
            public sg_filter mag_filter;

            [FieldOffset(48)] // size = 4
            public sg_wrap wrap_u;

            [FieldOffset(52)] // size = 4
            public sg_wrap wrap_v;

            [FieldOffset(56)] // size = 4
            public sg_wrap wrap_w;

            [FieldOffset(60)] // size = 4
            public sg_border_color border_color;

            [FieldOffset(64)] // size = 4
            public uint max_anisotropy;

            [FieldOffset(68)] // size = 4
            public float min_lod;

            [FieldOffset(72)] // size = 4
            public float max_lod;

            [FieldOffset(80)] // size = 1536
            public sg_image_data data;

            [FieldOffset(1616)] // size = 8
            public CString label;

            [FieldOffset(1624)] // size = 8
            public fixed byte _gl_textures[8]; // uint32_t[2]

            public Span<uint> gl_textures
            {
                get
                {
                    fixed (sg_image_desc* @this = &this)
                    {
                        var pointer = &@this->_gl_textures[0];
                        var span = new Span<uint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(1632)] // size = 4
            public uint gl_texture_target;

            [FieldOffset(1640)] // size = 16
            public fixed byte _mtl_textures[16]; // const void*[2]

            public Span<nint> mtl_textures
            {
                get
                {
                    fixed (sg_image_desc* @this = &this)
                    {
                        var pointer = &@this->_mtl_textures[0];
                        var span = new Span<nint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(1656)] // size = 8
            public void* d3d11_texture;

            [FieldOffset(1664)] // size = 8
            public void* d3d11_shader_resource_view;

            [FieldOffset(1672)] // size = 8
            public void* wgpu_texture;

            [FieldOffset(1680)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct sg_image_info
        {
            [FieldOffset(0)] // size = 12
            public sg_slot_info slot;

            [FieldOffset(12)] // size = 4
            public uint upd_frame_index;

            [FieldOffset(16)] // size = 4
            public int num_slots;

            [FieldOffset(20)] // size = 4
            public int active_slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 4)]
        public struct sg_layout_desc
        {
            [FieldOffset(0)] // size = 96
            public fixed byte _buffers[96]; // sg_buffer_layout_desc[8]

            public Span<sg_buffer_layout_desc> buffers
            {
                get
                {
                    fixed (sg_layout_desc* @this = &this)
                    {
                        var pointer = &@this->_buffers[0];
                        var span = new Span<sg_buffer_layout_desc>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(96)] // size = 192
            public fixed byte _attrs[192]; // sg_vertex_attr_desc[16]

            public Span<sg_vertex_attr_desc> attrs
            {
                get
                {
                    fixed (sg_layout_desc* @this = &this)
                    {
                        var pointer = &@this->_attrs[0];
                        var span = new Span<sg_vertex_attr_desc>(pointer, 16);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
        public struct sg_limits
        {
            [FieldOffset(0)] // size = 4
            public int max_image_size_2d;

            [FieldOffset(4)] // size = 4
            public int max_image_size_cube;

            [FieldOffset(8)] // size = 4
            public int max_image_size_3d;

            [FieldOffset(12)] // size = 4
            public int max_image_size_array;

            [FieldOffset(16)] // size = 4
            public int max_image_array_layers;

            [FieldOffset(20)] // size = 4
            public int max_vertex_attrs;

            [FieldOffset(24)] // size = 4
            public int gl_max_vertex_uniform_vectors;

            [FieldOffset(28)] // size = 4
            public int gl_max_combined_texture_image_units;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sg_logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void func;

            [FieldOffset(8)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct sg_metal_context_desc
        {
            [FieldOffset(0)] // size = 8
            public void* device;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr renderpass_descriptor_cb;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr_VoidPtr renderpass_descriptor_userdata_cb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr drawable_cb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr_VoidPtr drawable_userdata_cb;

            [FieldOffset(40)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_pass
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 4)]
        public struct sg_pass_action
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 80
            public fixed byte _colors[80]; // sg_color_attachment_action[4]

            public Span<sg_color_attachment_action> colors
            {
                get
                {
                    fixed (sg_pass_action* @this = &this)
                    {
                        var pointer = &@this->_colors[0];
                        var span = new Span<sg_color_attachment_action>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(84)] // size = 8
            public sg_depth_attachment_action depth;

            [FieldOffset(92)] // size = 8
            public sg_stencil_attachment_action stencil;

            [FieldOffset(100)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_pass_attachment_desc
        {
            [FieldOffset(0)] // size = 4
            public sg_image image;

            [FieldOffset(4)] // size = 4
            public int mip_level;

            [FieldOffset(8)] // size = 4
            public int slice;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct sg_pass_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 48
            public fixed byte _color_attachments[48]; // sg_pass_attachment_desc[4]

            public Span<sg_pass_attachment_desc> color_attachments
            {
                get
                {
                    fixed (sg_pass_desc* @this = &this)
                    {
                        var pointer = &@this->_color_attachments[0];
                        var span = new Span<sg_pass_attachment_desc>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(52)] // size = 12
            public sg_pass_attachment_desc depth_stencil_attachment;

            [FieldOffset(64)] // size = 8
            public CString label;

            [FieldOffset(72)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_pass_info
        {
            [FieldOffset(0)] // size = 12
            public sg_slot_info slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_pipeline
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 568, Pack = 8)]
        public struct sg_pipeline_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(4)] // size = 4
            public sg_shader shader;

            [FieldOffset(8)] // size = 288
            public sg_layout_desc layout;

            [FieldOffset(296)] // size = 24
            public sg_depth_state depth;

            [FieldOffset(320)] // size = 40
            public sg_stencil_state stencil;

            [FieldOffset(360)] // size = 4
            public int color_count;

            [FieldOffset(364)] // size = 144
            public fixed byte _colors[144]; // sg_color_state[4]

            public Span<sg_color_state> colors
            {
                get
                {
                    fixed (sg_pipeline_desc* @this = &this)
                    {
                        var pointer = &@this->_colors[0];
                        var span = new Span<sg_color_state>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(508)] // size = 4
            public sg_primitive_type primitive_type;

            [FieldOffset(512)] // size = 4
            public sg_index_type index_type;

            [FieldOffset(516)] // size = 4
            public sg_cull_mode cull_mode;

            [FieldOffset(520)] // size = 4
            public sg_face_winding face_winding;

            [FieldOffset(524)] // size = 4
            public int sample_count;

            [FieldOffset(528)] // size = 16
            public Rgba32F blend_color;

            [FieldOffset(544)] // size = 1
            public CBool alpha_to_coverage_enabled;

            [FieldOffset(552)] // size = 8
            public CString label;

            [FieldOffset(560)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_pipeline_info
        {
            [FieldOffset(0)] // size = 12
            public sg_slot_info slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 6, Pack = 1)]
        public struct sg_pixelformat_info
        {
            [FieldOffset(0)] // size = 1
            public CBool sample;

            [FieldOffset(1)] // size = 1
            public CBool filter;

            [FieldOffset(2)] // size = 1
            public CBool render;

            [FieldOffset(3)] // size = 1
            public CBool blend;

            [FieldOffset(4)] // size = 1
            public CBool msaa;

            [FieldOffset(5)] // size = 1
            public CBool depth;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sg_range
        {
            [FieldOffset(0)] // size = 8
            public void* ptr;

            [FieldOffset(8)] // size = 8
            public ulong size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct sg_shader
        {
            [FieldOffset(0)] // size = 4
            public uint id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct sg_shader_attr_desc
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 8
            public CString sem_name;

            [FieldOffset(16)] // size = 4
            public int sem_index;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 3048, Pack = 8)]
        public struct sg_shader_desc
        {
            [FieldOffset(0)] // size = 4
            public uint _start_canary;

            [FieldOffset(8)] // size = 384
            public fixed byte _attrs[384]; // sg_shader_attr_desc[16]

            public Span<sg_shader_attr_desc> attrs
            {
                get
                {
                    fixed (sg_shader_desc* @this = &this)
                    {
                        var pointer = &@this->_attrs[0];
                        var span = new Span<sg_shader_attr_desc>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(392)] // size = 1320
            public sg_shader_stage_desc vs;

            [FieldOffset(1712)] // size = 1320
            public sg_shader_stage_desc fs;

            [FieldOffset(3032)] // size = 8
            public CString label;

            [FieldOffset(3040)] // size = 4
            public uint _end_canary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sg_shader_image_desc
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 4
            public sg_image_type image_type;

            [FieldOffset(12)] // size = 4
            public sg_sampler_type sampler_type;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_shader_info
        {
            [FieldOffset(0)] // size = 12
            public sg_slot_info slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1320, Pack = 8)]
        public struct sg_shader_stage_desc
        {
            [FieldOffset(0)] // size = 8
            public CString source;

            [FieldOffset(8)] // size = 16
            public sg_range bytecode;

            [FieldOffset(24)] // size = 8
            public CString entry;

            [FieldOffset(32)] // size = 8
            public CString d3d11_target;

            [FieldOffset(40)] // size = 1088
            public fixed byte _uniform_blocks[1088]; // sg_shader_uniform_block_desc[4]

            public Span<sg_shader_uniform_block_desc> uniform_blocks
            {
                get
                {
                    fixed (sg_shader_stage_desc* @this = &this)
                    {
                        var pointer = &@this->_uniform_blocks[0];
                        var span = new Span<sg_shader_uniform_block_desc>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(1128)] // size = 192
            public fixed byte _images[192]; // sg_shader_image_desc[12]

            public Span<sg_shader_image_desc> images
            {
                get
                {
                    fixed (sg_shader_stage_desc* @this = &this)
                    {
                        var pointer = &@this->_images[0];
                        var span = new Span<sg_shader_image_desc>(pointer, 12);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct sg_shader_uniform_block_desc
        {
            [FieldOffset(0)] // size = 8
            public ulong size;

            [FieldOffset(8)] // size = 4
            public sg_uniform_layout layout;

            [FieldOffset(16)] // size = 256
            public fixed byte _uniforms[256]; // sg_shader_uniform_desc[16]

            public Span<sg_shader_uniform_desc> uniforms
            {
                get
                {
                    fixed (sg_shader_uniform_block_desc* @this = &this)
                    {
                        var pointer = &@this->_uniforms[0];
                        var span = new Span<sg_shader_uniform_desc>(pointer, 16);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct sg_shader_uniform_desc
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 4
            public sg_uniform_type type;

            [FieldOffset(12)] // size = 4
            public int array_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_slot_info
        {
            [FieldOffset(0)] // size = 4
            public sg_resource_state state;

            [FieldOffset(4)] // size = 4
            public uint res_id;

            [FieldOffset(8)] // size = 4
            public uint ctx_id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct sg_stencil_attachment_action
        {
            [FieldOffset(0)] // size = 4
            public sg_action action;

            [FieldOffset(4)] // size = 1
            public byte value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct sg_stencil_face_state
        {
            [FieldOffset(0)] // size = 4
            public sg_compare_func compare;

            [FieldOffset(4)] // size = 4
            public sg_stencil_op fail_op;

            [FieldOffset(8)] // size = 4
            public sg_stencil_op depth_fail_op;

            [FieldOffset(12)] // size = 4
            public sg_stencil_op pass_op;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
        public struct sg_stencil_state
        {
            [FieldOffset(0)] // size = 1
            public CBool enabled;

            [FieldOffset(4)] // size = 16
            public sg_stencil_face_state front;

            [FieldOffset(20)] // size = 16
            public sg_stencil_face_state back;

            [FieldOffset(36)] // size = 1
            public byte read_mask;

            [FieldOffset(37)] // size = 1
            public byte write_mask;

            [FieldOffset(38)] // size = 1
            public byte @ref;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 488, Pack = 8)]
        public struct sg_trace_hooks
        {
            [FieldOffset(0)] // size = 8
            public void* user_data;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_Void reset_state_cache;

            [FieldOffset(16)] // size = 8
            public FnPtr_Sg_buffer_descPtr_Sg_buffer_VoidPtr_Void make_buffer;

            [FieldOffset(24)] // size = 8
            public FnPtr_Sg_image_descPtr_Sg_image_VoidPtr_Void make_image;

            [FieldOffset(32)] // size = 8
            public FnPtr_Sg_shader_descPtr_Sg_shader_VoidPtr_Void make_shader;

            [FieldOffset(40)] // size = 8
            public FnPtr_Sg_pipeline_descPtr_Sg_pipeline_VoidPtr_Void make_pipeline;

            [FieldOffset(48)] // size = 8
            public FnPtr_Sg_pass_descPtr_Sg_pass_VoidPtr_Void make_pass;

            [FieldOffset(56)] // size = 8
            public FnPtr_Sg_buffer_VoidPtr_Void destroy_buffer;

            [FieldOffset(64)] // size = 8
            public FnPtr_Sg_image_VoidPtr_Void destroy_image;

            [FieldOffset(72)] // size = 8
            public FnPtr_Sg_shader_VoidPtr_Void destroy_shader;

            [FieldOffset(80)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void destroy_pipeline;

            [FieldOffset(88)] // size = 8
            public FnPtr_Sg_pass_VoidPtr_Void destroy_pass;

            [FieldOffset(96)] // size = 8
            public FnPtr_Sg_buffer_Sg_rangePtr_VoidPtr_Void update_buffer;

            [FieldOffset(104)] // size = 8
            public FnPtr_Sg_image_Sg_image_dataPtr_VoidPtr_Void update_image;

            [FieldOffset(112)] // size = 8
            public FnPtr_Sg_buffer_Sg_rangePtr_Int_VoidPtr_Void append_buffer;

            [FieldOffset(120)] // size = 8
            public FnPtr_Sg_pass_actionPtr_Int_Int_VoidPtr_Void begin_default_pass;

            [FieldOffset(128)] // size = 8
            public FnPtr_Sg_pass_Sg_pass_actionPtr_VoidPtr_Void begin_pass;

            [FieldOffset(136)] // size = 8
            public FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void apply_viewport;

            [FieldOffset(144)] // size = 8
            public FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void apply_scissor_rect;

            [FieldOffset(152)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void apply_pipeline;

            [FieldOffset(160)] // size = 8
            public FnPtr_Sg_bindingsPtr_VoidPtr_Void apply_bindings;

            [FieldOffset(168)] // size = 8
            public FnPtr_Sg_shader_stage_Int_Sg_rangePtr_VoidPtr_Void apply_uniforms;

            [FieldOffset(176)] // size = 8
            public FnPtr_Int_Int_Int_VoidPtr_Void draw;

            [FieldOffset(184)] // size = 8
            public FnPtr_VoidPtr_Void end_pass;

            [FieldOffset(192)] // size = 8
            public FnPtr_VoidPtr_Void commit;

            [FieldOffset(200)] // size = 8
            public FnPtr_Sg_buffer_VoidPtr_Void alloc_buffer;

            [FieldOffset(208)] // size = 8
            public FnPtr_Sg_image_VoidPtr_Void alloc_image;

            [FieldOffset(216)] // size = 8
            public FnPtr_Sg_shader_VoidPtr_Void alloc_shader;

            [FieldOffset(224)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void alloc_pipeline;

            [FieldOffset(232)] // size = 8
            public FnPtr_Sg_pass_VoidPtr_Void alloc_pass;

            [FieldOffset(240)] // size = 8
            public FnPtr_Sg_buffer_VoidPtr_Void dealloc_buffer;

            [FieldOffset(248)] // size = 8
            public FnPtr_Sg_image_VoidPtr_Void dealloc_image;

            [FieldOffset(256)] // size = 8
            public FnPtr_Sg_shader_VoidPtr_Void dealloc_shader;

            [FieldOffset(264)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void dealloc_pipeline;

            [FieldOffset(272)] // size = 8
            public FnPtr_Sg_pass_VoidPtr_Void dealloc_pass;

            [FieldOffset(280)] // size = 8
            public FnPtr_Sg_buffer_Sg_buffer_descPtr_VoidPtr_Void init_buffer;

            [FieldOffset(288)] // size = 8
            public FnPtr_Sg_image_Sg_image_descPtr_VoidPtr_Void init_image;

            [FieldOffset(296)] // size = 8
            public FnPtr_Sg_shader_Sg_shader_descPtr_VoidPtr_Void init_shader;

            [FieldOffset(304)] // size = 8
            public FnPtr_Sg_pipeline_Sg_pipeline_descPtr_VoidPtr_Void init_pipeline;

            [FieldOffset(312)] // size = 8
            public FnPtr_Sg_pass_Sg_pass_descPtr_VoidPtr_Void init_pass;

            [FieldOffset(320)] // size = 8
            public FnPtr_Sg_buffer_VoidPtr_Void uninit_buffer;

            [FieldOffset(328)] // size = 8
            public FnPtr_Sg_image_VoidPtr_Void uninit_image;

            [FieldOffset(336)] // size = 8
            public FnPtr_Sg_shader_VoidPtr_Void uninit_shader;

            [FieldOffset(344)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void uninit_pipeline;

            [FieldOffset(352)] // size = 8
            public FnPtr_Sg_pass_VoidPtr_Void uninit_pass;

            [FieldOffset(360)] // size = 8
            public FnPtr_Sg_buffer_VoidPtr_Void fail_buffer;

            [FieldOffset(368)] // size = 8
            public FnPtr_Sg_image_VoidPtr_Void fail_image;

            [FieldOffset(376)] // size = 8
            public FnPtr_Sg_shader_VoidPtr_Void fail_shader;

            [FieldOffset(384)] // size = 8
            public FnPtr_Sg_pipeline_VoidPtr_Void fail_pipeline;

            [FieldOffset(392)] // size = 8
            public FnPtr_Sg_pass_VoidPtr_Void fail_pass;

            [FieldOffset(400)] // size = 8
            public FnPtr_CString_VoidPtr_Void push_debug_group;

            [FieldOffset(408)] // size = 8
            public FnPtr_VoidPtr_Void pop_debug_group;

            [FieldOffset(416)] // size = 8
            public FnPtr_VoidPtr_Void err_buffer_pool_exhausted;

            [FieldOffset(424)] // size = 8
            public FnPtr_VoidPtr_Void err_image_pool_exhausted;

            [FieldOffset(432)] // size = 8
            public FnPtr_VoidPtr_Void err_shader_pool_exhausted;

            [FieldOffset(440)] // size = 8
            public FnPtr_VoidPtr_Void err_pipeline_pool_exhausted;

            [FieldOffset(448)] // size = 8
            public FnPtr_VoidPtr_Void err_pass_pool_exhausted;

            [FieldOffset(456)] // size = 8
            public FnPtr_VoidPtr_Void err_context_mismatch;

            [FieldOffset(464)] // size = 8
            public FnPtr_VoidPtr_Void err_pass_invalid;

            [FieldOffset(472)] // size = 8
            public FnPtr_VoidPtr_Void err_draw_invalid;

            [FieldOffset(480)] // size = 8
            public FnPtr_VoidPtr_Void err_bindings_invalid;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct sg_vertex_attr_desc
        {
            [FieldOffset(0)] // size = 4
            public int buffer_index;

            [FieldOffset(4)] // size = 4
            public int offset;

            [FieldOffset(8)] // size = 4
            public sg_vertex_format format;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct sg_wgpu_context_desc
        {
            [FieldOffset(0)] // size = 8
            public void* device;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr render_view_cb;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr_VoidPtr render_view_userdata_cb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr resolve_view_cb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr_VoidPtr resolve_view_userdata_cb;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr depth_stencil_view_cb;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_VoidPtr depth_stencil_view_userdata_cb;

            [FieldOffset(56)] // size = 8
            public void* user_data;
        }

        [CNode(Kind = "Enum")]
        public enum sapp_android_tooltype : int
        {
            SAPP_ANDROIDTOOLTYPE_UNKNOWN = 0,
            SAPP_ANDROIDTOOLTYPE_FINGER = 1,
            SAPP_ANDROIDTOOLTYPE_STYLUS = 2,
            SAPP_ANDROIDTOOLTYPE_MOUSE = 3
        }

        [CNode(Kind = "Enum")]
        public enum sapp_event_type : int
        {
            SAPP_EVENTTYPE_INVALID = 0,
            SAPP_EVENTTYPE_KEY_DOWN = 1,
            SAPP_EVENTTYPE_KEY_UP = 2,
            SAPP_EVENTTYPE_CHAR = 3,
            SAPP_EVENTTYPE_MOUSE_DOWN = 4,
            SAPP_EVENTTYPE_MOUSE_UP = 5,
            SAPP_EVENTTYPE_MOUSE_SCROLL = 6,
            SAPP_EVENTTYPE_MOUSE_MOVE = 7,
            SAPP_EVENTTYPE_MOUSE_ENTER = 8,
            SAPP_EVENTTYPE_MOUSE_LEAVE = 9,
            SAPP_EVENTTYPE_TOUCHES_BEGAN = 10,
            SAPP_EVENTTYPE_TOUCHES_MOVED = 11,
            SAPP_EVENTTYPE_TOUCHES_ENDED = 12,
            SAPP_EVENTTYPE_TOUCHES_CANCELLED = 13,
            SAPP_EVENTTYPE_RESIZED = 14,
            SAPP_EVENTTYPE_ICONIFIED = 15,
            SAPP_EVENTTYPE_RESTORED = 16,
            SAPP_EVENTTYPE_FOCUSED = 17,
            SAPP_EVENTTYPE_UNFOCUSED = 18,
            SAPP_EVENTTYPE_SUSPENDED = 19,
            SAPP_EVENTTYPE_RESUMED = 20,
            SAPP_EVENTTYPE_QUIT_REQUESTED = 21,
            SAPP_EVENTTYPE_CLIPBOARD_PASTED = 22,
            SAPP_EVENTTYPE_FILES_DROPPED = 23,
            _SAPP_EVENTTYPE_NUM = 24,
            _SAPP_EVENTTYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sapp_html5_fetch_error : int
        {
            SAPP_HTML5_FETCH_ERROR_NO_ERROR = 0,
            SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL = 1,
            SAPP_HTML5_FETCH_ERROR_OTHER = 2
        }

        [CNode(Kind = "Enum")]
        public enum sapp_keycode : int
        {
            SAPP_KEYCODE_INVALID = 0,
            SAPP_KEYCODE_SPACE = 32,
            SAPP_KEYCODE_APOSTROPHE = 39,
            SAPP_KEYCODE_COMMA = 44,
            SAPP_KEYCODE_MINUS = 45,
            SAPP_KEYCODE_PERIOD = 46,
            SAPP_KEYCODE_SLASH = 47,
            SAPP_KEYCODE_0 = 48,
            SAPP_KEYCODE_1 = 49,
            SAPP_KEYCODE_2 = 50,
            SAPP_KEYCODE_3 = 51,
            SAPP_KEYCODE_4 = 52,
            SAPP_KEYCODE_5 = 53,
            SAPP_KEYCODE_6 = 54,
            SAPP_KEYCODE_7 = 55,
            SAPP_KEYCODE_8 = 56,
            SAPP_KEYCODE_9 = 57,
            SAPP_KEYCODE_SEMICOLON = 59,
            SAPP_KEYCODE_EQUAL = 61,
            SAPP_KEYCODE_A = 65,
            SAPP_KEYCODE_B = 66,
            SAPP_KEYCODE_C = 67,
            SAPP_KEYCODE_D = 68,
            SAPP_KEYCODE_E = 69,
            SAPP_KEYCODE_F = 70,
            SAPP_KEYCODE_G = 71,
            SAPP_KEYCODE_H = 72,
            SAPP_KEYCODE_I = 73,
            SAPP_KEYCODE_J = 74,
            SAPP_KEYCODE_K = 75,
            SAPP_KEYCODE_L = 76,
            SAPP_KEYCODE_M = 77,
            SAPP_KEYCODE_N = 78,
            SAPP_KEYCODE_O = 79,
            SAPP_KEYCODE_P = 80,
            SAPP_KEYCODE_Q = 81,
            SAPP_KEYCODE_R = 82,
            SAPP_KEYCODE_S = 83,
            SAPP_KEYCODE_T = 84,
            SAPP_KEYCODE_U = 85,
            SAPP_KEYCODE_V = 86,
            SAPP_KEYCODE_W = 87,
            SAPP_KEYCODE_X = 88,
            SAPP_KEYCODE_Y = 89,
            SAPP_KEYCODE_Z = 90,
            SAPP_KEYCODE_LEFT_BRACKET = 91,
            SAPP_KEYCODE_BACKSLASH = 92,
            SAPP_KEYCODE_RIGHT_BRACKET = 93,
            SAPP_KEYCODE_GRAVE_ACCENT = 96,
            SAPP_KEYCODE_WORLD_1 = 161,
            SAPP_KEYCODE_WORLD_2 = 162,
            SAPP_KEYCODE_ESCAPE = 256,
            SAPP_KEYCODE_ENTER = 257,
            SAPP_KEYCODE_TAB = 258,
            SAPP_KEYCODE_BACKSPACE = 259,
            SAPP_KEYCODE_INSERT = 260,
            SAPP_KEYCODE_DELETE = 261,
            SAPP_KEYCODE_RIGHT = 262,
            SAPP_KEYCODE_LEFT = 263,
            SAPP_KEYCODE_DOWN = 264,
            SAPP_KEYCODE_UP = 265,
            SAPP_KEYCODE_PAGE_UP = 266,
            SAPP_KEYCODE_PAGE_DOWN = 267,
            SAPP_KEYCODE_HOME = 268,
            SAPP_KEYCODE_END = 269,
            SAPP_KEYCODE_CAPS_LOCK = 280,
            SAPP_KEYCODE_SCROLL_LOCK = 281,
            SAPP_KEYCODE_NUM_LOCK = 282,
            SAPP_KEYCODE_PRINT_SCREEN = 283,
            SAPP_KEYCODE_PAUSE = 284,
            SAPP_KEYCODE_F1 = 290,
            SAPP_KEYCODE_F2 = 291,
            SAPP_KEYCODE_F3 = 292,
            SAPP_KEYCODE_F4 = 293,
            SAPP_KEYCODE_F5 = 294,
            SAPP_KEYCODE_F6 = 295,
            SAPP_KEYCODE_F7 = 296,
            SAPP_KEYCODE_F8 = 297,
            SAPP_KEYCODE_F9 = 298,
            SAPP_KEYCODE_F10 = 299,
            SAPP_KEYCODE_F11 = 300,
            SAPP_KEYCODE_F12 = 301,
            SAPP_KEYCODE_F13 = 302,
            SAPP_KEYCODE_F14 = 303,
            SAPP_KEYCODE_F15 = 304,
            SAPP_KEYCODE_F16 = 305,
            SAPP_KEYCODE_F17 = 306,
            SAPP_KEYCODE_F18 = 307,
            SAPP_KEYCODE_F19 = 308,
            SAPP_KEYCODE_F20 = 309,
            SAPP_KEYCODE_F21 = 310,
            SAPP_KEYCODE_F22 = 311,
            SAPP_KEYCODE_F23 = 312,
            SAPP_KEYCODE_F24 = 313,
            SAPP_KEYCODE_F25 = 314,
            SAPP_KEYCODE_KP_0 = 320,
            SAPP_KEYCODE_KP_1 = 321,
            SAPP_KEYCODE_KP_2 = 322,
            SAPP_KEYCODE_KP_3 = 323,
            SAPP_KEYCODE_KP_4 = 324,
            SAPP_KEYCODE_KP_5 = 325,
            SAPP_KEYCODE_KP_6 = 326,
            SAPP_KEYCODE_KP_7 = 327,
            SAPP_KEYCODE_KP_8 = 328,
            SAPP_KEYCODE_KP_9 = 329,
            SAPP_KEYCODE_KP_DECIMAL = 330,
            SAPP_KEYCODE_KP_DIVIDE = 331,
            SAPP_KEYCODE_KP_MULTIPLY = 332,
            SAPP_KEYCODE_KP_SUBTRACT = 333,
            SAPP_KEYCODE_KP_ADD = 334,
            SAPP_KEYCODE_KP_ENTER = 335,
            SAPP_KEYCODE_KP_EQUAL = 336,
            SAPP_KEYCODE_LEFT_SHIFT = 340,
            SAPP_KEYCODE_LEFT_CONTROL = 341,
            SAPP_KEYCODE_LEFT_ALT = 342,
            SAPP_KEYCODE_LEFT_SUPER = 343,
            SAPP_KEYCODE_RIGHT_SHIFT = 344,
            SAPP_KEYCODE_RIGHT_CONTROL = 345,
            SAPP_KEYCODE_RIGHT_ALT = 346,
            SAPP_KEYCODE_RIGHT_SUPER = 347,
            SAPP_KEYCODE_MENU = 348
        }

        [CNode(Kind = "Enum")]
        public enum sapp_log_item : int
        {
            SAPP_LOGITEM_OK = 0,
            SAPP_LOGITEM_MALLOC_FAILED = 1,
            SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE = 2,
            SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED = 3,
            SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED = 4,
            SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED = 5,
            SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED = 6,
            SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED = 7,
            SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED = 8,
            SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED = 9,
            SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED = 10,
            SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED = 11,
            SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED = 12,
            SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED = 13,
            SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED = 14,
            SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED = 15,
            SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED = 16,
            SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT = 17,
            SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER = 18,
            SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED = 19,
            SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED = 20,
            SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED = 21,
            SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED = 22,
            SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK = 23,
            SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK = 24,
            SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED = 25,
            SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED = 26,
            SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED = 27,
            SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND = 28,
            SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED = 29,
            SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW = 30,
            SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS = 31,
            SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG = 32,
            SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED = 33,
            SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING = 34,
            SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED = 35,
            SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED = 36,
            SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED = 37,
            SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED = 38,
            SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED = 39,
            SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED = 40,
            SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED = 41,
            SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS = 42,
            SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL = 43,
            SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED = 44,
            SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED = 45,
            SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED = 46,
            SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED = 47,
            SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED = 48,
            SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED = 49,
            SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME = 50,
            SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB = 51,
            SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB = 52,
            SAPP_LOGITEM_ANDROID_READ_MSG_FAILED = 53,
            SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED = 54,
            SAPP_LOGITEM_ANDROID_MSG_CREATE = 55,
            SAPP_LOGITEM_ANDROID_MSG_RESUME = 56,
            SAPP_LOGITEM_ANDROID_MSG_PAUSE = 57,
            SAPP_LOGITEM_ANDROID_MSG_FOCUS = 58,
            SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS = 59,
            SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW = 60,
            SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE = 61,
            SAPP_LOGITEM_ANDROID_MSG_DESTROY = 62,
            SAPP_LOGITEM_ANDROID_UNKNOWN_MSG = 63,
            SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED = 64,
            SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE = 65,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART = 66,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME = 67,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE = 68,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED = 69,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE = 70,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP = 71,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED = 72,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED = 73,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED = 74,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED = 75,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED = 76,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY = 77,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY = 78,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE = 79,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE = 80,
            SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED = 81,
            SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS = 82,
            SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH = 83,
            SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG = 84,
            SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG = 85
        }

        [CNode(Kind = "Enum")]
        public enum sapp_mouse_cursor : int
        {
            SAPP_MOUSECURSOR_DEFAULT = 0,
            SAPP_MOUSECURSOR_ARROW = 1,
            SAPP_MOUSECURSOR_IBEAM = 2,
            SAPP_MOUSECURSOR_CROSSHAIR = 3,
            SAPP_MOUSECURSOR_POINTING_HAND = 4,
            SAPP_MOUSECURSOR_RESIZE_EW = 5,
            SAPP_MOUSECURSOR_RESIZE_NS = 6,
            SAPP_MOUSECURSOR_RESIZE_NWSE = 7,
            SAPP_MOUSECURSOR_RESIZE_NESW = 8,
            SAPP_MOUSECURSOR_RESIZE_ALL = 9,
            SAPP_MOUSECURSOR_NOT_ALLOWED = 10,
            _SAPP_MOUSECURSOR_NUM = 11
        }

        [CNode(Kind = "Enum")]
        public enum sapp_mousebutton : int
        {
            SAPP_MOUSEBUTTON_LEFT = 0,
            SAPP_MOUSEBUTTON_RIGHT = 1,
            SAPP_MOUSEBUTTON_MIDDLE = 2,
            SAPP_MOUSEBUTTON_INVALID = 256
        }

        [CNode(Kind = "Enum")]
        public enum saudio_log_item : int
        {
            SAUDIO_LOGITEM_OK = 0,
            SAUDIO_LOGITEM_MALLOC_FAILED = 1,
            SAUDIO_LOGITEM_ALSA_SND_PCM_OPEN_FAILED = 2,
            SAUDIO_LOGITEM_ALSA_FLOAT_SAMPLES_NOT_SUPPORTED = 3,
            SAUDIO_LOGITEM_ALSA_REQUESTED_BUFFER_SIZE_NOT_SUPPORTED = 4,
            SAUDIO_LOGITEM_ALSA_REQUESTED_CHANNEL_COUNT_NOT_SUPPORTED = 5,
            SAUDIO_LOGITEM_ALSA_SND_PCM_HW_PARAMS_SET_RATE_NEAR_FAILED = 6,
            SAUDIO_LOGITEM_ALSA_SND_PCM_HW_PARAMS_FAILED = 7,
            SAUDIO_LOGITEM_ALSA_PTHREAD_CREATE_FAILED = 8,
            SAUDIO_LOGITEM_WASAPI_CREATE_EVENT_FAILED = 9,
            SAUDIO_LOGITEM_WASAPI_CREATE_DEVICE_ENUMERATOR_FAILED = 10,
            SAUDIO_LOGITEM_WASAPI_GET_DEFAULT_AUDIO_ENDPOINT_FAILED = 11,
            SAUDIO_LOGITEM_WASAPI_DEVICE_ACTIVATE_FAILED = 12,
            SAUDIO_LOGITEM_WASAPI_AUDIO_CLIENT_INITIALIZE_FAILED = 13,
            SAUDIO_LOGITEM_WASAPI_AUDIO_CLIENT_GET_BUFFER_SIZE_FAILED = 14,
            SAUDIO_LOGITEM_WASAPI_AUDIO_CLIENT_GET_SERVICE_FAILED = 15,
            SAUDIO_LOGITEM_WASAPI_AUDIO_CLIENT_SET_EVENT_HANDLE_FAILED = 16,
            SAUDIO_LOGITEM_WASAPI_CREATE_THREAD_FAILED = 17,
            SAUDIO_LOGITEM_AAUDIO_STREAMBUILDER_OPEN_STREAM_FAILED = 18,
            SAUDIO_LOGITEM_AAUDIO_PTHREAD_CREATE_FAILED = 19,
            SAUDIO_LOGITEM_AAUDIO_RESTARTING_STREAM_AFTER_ERROR = 20,
            SAUDIO_LOGITEM_USING_AAUDIO_BACKEND = 21,
            SAUDIO_LOGITEM_AAUDIO_CREATE_STREAMBUILDER_FAILED = 22,
            SAUDIO_LOGITEM_USING_SLES_BACKEND = 23,
            SAUDIO_LOGITEM_SLES_CREATE_ENGINE_FAILED = 24,
            SAUDIO_LOGITEM_SLES_ENGINE_GET_ENGINE_INTERFACE_FAILED = 25,
            SAUDIO_LOGITEM_SLES_CREATE_OUTPUT_MIX_FAILED = 26,
            SAUDIO_LOGITEM_SLES_MIXER_GET_VOLUME_INTERFACE_FAILED = 27,
            SAUDIO_LOGITEM_SLES_ENGINE_CREATE_AUDIO_PLAYER_FAILED = 28,
            SAUDIO_LOGITEM_SLES_PLAYER_GET_PLAY_INTERFACE_FAILED = 29,
            SAUDIO_LOGITEM_SLES_PLAYER_GET_VOLUME_INTERFACE_FAILED = 30,
            SAUDIO_LOGITEM_SLES_PLAYER_GET_BUFFERQUEUE_INTERFACE_FAILED = 31,
            SAUDIO_LOGITEM_COREAUDIO_NEW_OUTPUT_FAILED = 32,
            SAUDIO_LOGITEM_COREAUDIO_ALLOCATE_BUFFER_FAILED = 33,
            SAUDIO_LOGITEM_COREAUDIO_START_FAILED = 34,
            SAUDIO_LOGITEM_BACKEND_BUFFER_SIZE_ISNT_MULTIPLE_OF_PACKET_SIZE = 35
        }

        [CNode(Kind = "Enum")]
        public enum sfetch_error_t : int
        {
            SFETCH_ERROR_NO_ERROR = 0,
            SFETCH_ERROR_FILE_NOT_FOUND = 1,
            SFETCH_ERROR_NO_BUFFER = 2,
            SFETCH_ERROR_BUFFER_TOO_SMALL = 3,
            SFETCH_ERROR_UNEXPECTED_EOF = 4,
            SFETCH_ERROR_INVALID_HTTP_STATUS = 5,
            SFETCH_ERROR_CANCELLED = 6
        }

        [CNode(Kind = "Enum")]
        public enum sfetch_log_item_t : int
        {
            SFETCH_LOGITEM_OK = 0,
            SFETCH_LOGITEM_MALLOC_FAILED = 1,
            SFETCH_LOGITEM_FILE_PATH_UTF8_DECODING_FAILED = 2,
            SFETCH_LOGITEM_SEND_QUEUE_FULL = 3,
            SFETCH_LOGITEM_REQUEST_CHANNEL_INDEX_TOO_BIG = 4,
            SFETCH_LOGITEM_REQUEST_PATH_IS_NULL = 5,
            SFETCH_LOGITEM_REQUEST_PATH_TOO_LONG = 6,
            SFETCH_LOGITEM_REQUEST_CALLBACK_MISSING = 7,
            SFETCH_LOGITEM_REQUEST_CHUNK_SIZE_GREATER_BUFFER_SIZE = 8,
            SFETCH_LOGITEM_REQUEST_USERDATA_PTR_IS_SET_BUT_USERDATA_SIZE_IS_NULL = 9,
            SFETCH_LOGITEM_REQUEST_USERDATA_PTR_IS_NULL_BUT_USERDATA_SIZE_IS_NOT = 10,
            SFETCH_LOGITEM_REQUEST_USERDATA_SIZE_TOO_BIG = 11,
            SFETCH_LOGITEM_CLAMPING_NUM_CHANNELS_TO_MAX_CHANNELS = 12,
            SFETCH_LOGITEM_REQUEST_POOL_EXHAUSTED = 13
        }

        [CNode(Kind = "Enum")]
        public enum sg_action : int
        {
            _SG_ACTION_DEFAULT = 0,
            SG_ACTION_CLEAR = 1,
            SG_ACTION_LOAD = 2,
            SG_ACTION_DONTCARE = 3,
            _SG_ACTION_NUM = 4,
            _SG_ACTION_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_backend : int
        {
            SG_BACKEND_GLCORE33 = 0,
            SG_BACKEND_GLES3 = 1,
            SG_BACKEND_D3D11 = 2,
            SG_BACKEND_METAL_IOS = 3,
            SG_BACKEND_METAL_MACOS = 4,
            SG_BACKEND_METAL_SIMULATOR = 5,
            SG_BACKEND_WGPU = 6,
            SG_BACKEND_DUMMY = 7
        }

        [CNode(Kind = "Enum")]
        public enum sg_blend_factor : int
        {
            _SG_BLENDFACTOR_DEFAULT = 0,
            SG_BLENDFACTOR_ZERO = 1,
            SG_BLENDFACTOR_ONE = 2,
            SG_BLENDFACTOR_SRC_COLOR = 3,
            SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
            SG_BLENDFACTOR_SRC_ALPHA = 5,
            SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
            SG_BLENDFACTOR_DST_COLOR = 7,
            SG_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
            SG_BLENDFACTOR_DST_ALPHA = 9,
            SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
            SG_BLENDFACTOR_SRC_ALPHA_SATURATED = 11,
            SG_BLENDFACTOR_BLEND_COLOR = 12,
            SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR = 13,
            SG_BLENDFACTOR_BLEND_ALPHA = 14,
            SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA = 15,
            _SG_BLENDFACTOR_NUM = 16,
            _SG_BLENDFACTOR_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_blend_op : int
        {
            _SG_BLENDOP_DEFAULT = 0,
            SG_BLENDOP_ADD = 1,
            SG_BLENDOP_SUBTRACT = 2,
            SG_BLENDOP_REVERSE_SUBTRACT = 3,
            _SG_BLENDOP_NUM = 4,
            _SG_BLENDOP_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_border_color : int
        {
            _SG_BORDERCOLOR_DEFAULT = 0,
            SG_BORDERCOLOR_TRANSPARENT_BLACK = 1,
            SG_BORDERCOLOR_OPAQUE_BLACK = 2,
            SG_BORDERCOLOR_OPAQUE_WHITE = 3,
            _SG_BORDERCOLOR_NUM = 4,
            _SG_BORDERCOLOR_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_buffer_type : int
        {
            _SG_BUFFERTYPE_DEFAULT = 0,
            SG_BUFFERTYPE_VERTEXBUFFER = 1,
            SG_BUFFERTYPE_INDEXBUFFER = 2,
            _SG_BUFFERTYPE_NUM = 3,
            _SG_BUFFERTYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_color_mask : int
        {
            _SG_COLORMASK_DEFAULT = 0,
            SG_COLORMASK_NONE = 16,
            SG_COLORMASK_R = 1,
            SG_COLORMASK_G = 2,
            SG_COLORMASK_RG = 3,
            SG_COLORMASK_B = 4,
            SG_COLORMASK_RB = 5,
            SG_COLORMASK_GB = 6,
            SG_COLORMASK_RGB = 7,
            SG_COLORMASK_A = 8,
            SG_COLORMASK_RA = 9,
            SG_COLORMASK_GA = 10,
            SG_COLORMASK_RGA = 11,
            SG_COLORMASK_BA = 12,
            SG_COLORMASK_RBA = 13,
            SG_COLORMASK_GBA = 14,
            SG_COLORMASK_RGBA = 15,
            _SG_COLORMASK_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_compare_func : int
        {
            _SG_COMPAREFUNC_DEFAULT = 0,
            SG_COMPAREFUNC_NEVER = 1,
            SG_COMPAREFUNC_LESS = 2,
            SG_COMPAREFUNC_EQUAL = 3,
            SG_COMPAREFUNC_LESS_EQUAL = 4,
            SG_COMPAREFUNC_GREATER = 5,
            SG_COMPAREFUNC_NOT_EQUAL = 6,
            SG_COMPAREFUNC_GREATER_EQUAL = 7,
            SG_COMPAREFUNC_ALWAYS = 8,
            _SG_COMPAREFUNC_NUM = 9,
            _SG_COMPAREFUNC_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_cube_face : int
        {
            SG_CUBEFACE_POS_X = 0,
            SG_CUBEFACE_NEG_X = 1,
            SG_CUBEFACE_POS_Y = 2,
            SG_CUBEFACE_NEG_Y = 3,
            SG_CUBEFACE_POS_Z = 4,
            SG_CUBEFACE_NEG_Z = 5,
            SG_CUBEFACE_NUM = 6,
            _SG_CUBEFACE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_cull_mode : int
        {
            _SG_CULLMODE_DEFAULT = 0,
            SG_CULLMODE_NONE = 1,
            SG_CULLMODE_FRONT = 2,
            SG_CULLMODE_BACK = 3,
            _SG_CULLMODE_NUM = 4,
            _SG_CULLMODE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_face_winding : int
        {
            _SG_FACEWINDING_DEFAULT = 0,
            SG_FACEWINDING_CCW = 1,
            SG_FACEWINDING_CW = 2,
            _SG_FACEWINDING_NUM = 3,
            _SG_FACEWINDING_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_filter : int
        {
            _SG_FILTER_DEFAULT = 0,
            SG_FILTER_NEAREST = 1,
            SG_FILTER_LINEAR = 2,
            SG_FILTER_NEAREST_MIPMAP_NEAREST = 3,
            SG_FILTER_NEAREST_MIPMAP_LINEAR = 4,
            SG_FILTER_LINEAR_MIPMAP_NEAREST = 5,
            SG_FILTER_LINEAR_MIPMAP_LINEAR = 6,
            _SG_FILTER_NUM = 7,
            _SG_FILTER_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_image_type : int
        {
            _SG_IMAGETYPE_DEFAULT = 0,
            SG_IMAGETYPE_2D = 1,
            SG_IMAGETYPE_CUBE = 2,
            SG_IMAGETYPE_3D = 3,
            SG_IMAGETYPE_ARRAY = 4,
            _SG_IMAGETYPE_NUM = 5,
            _SG_IMAGETYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_index_type : int
        {
            _SG_INDEXTYPE_DEFAULT = 0,
            SG_INDEXTYPE_NONE = 1,
            SG_INDEXTYPE_UINT16 = 2,
            SG_INDEXTYPE_UINT32 = 3,
            _SG_INDEXTYPE_NUM = 4,
            _SG_INDEXTYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_log_item : int
        {
            SG_LOGITEM_OK = 0,
            SG_LOGITEM_MALLOC_FAILED = 1,
            SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED = 2,
            SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED = 3,
            SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED = 4,
            SG_LOGITEM_GL_SHADER_COMPILATION_FAILED = 5,
            SG_LOGITEM_GL_SHADER_LINKING_FAILED = 6,
            SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER = 7,
            SG_LOGITEM_GL_FRAMEBUFFER_INCOMPLETE = 8,
            SG_LOGITEM_GL_MSAA_FRAMEBUFFER_INCOMPLETE = 9,
            SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED = 10,
            SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 11,
            SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED = 12,
            SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 13,
            SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED = 14,
            SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED = 15,
            SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 16,
            SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED = 17,
            SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED = 18,
            SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED = 19,
            SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED = 20,
            SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED = 21,
            SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED = 22,
            SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT = 23,
            SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED = 24,
            SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED = 25,
            SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED = 26,
            SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED = 27,
            SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED = 28,
            SG_LOGITEM_D3D11_CREATE_RTV_FAILED = 29,
            SG_LOGITEM_D3D11_CREATE_DSV_FAILED = 30,
            SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED = 31,
            SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED = 32,
            SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED = 33,
            SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED = 34,
            SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED = 35,
            SG_LOGITEM_METAL_SHADER_CREATION_FAILED = 36,
            SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT = 37,
            SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND = 38,
            SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND = 39,
            SG_LOGITEM_METAL_CREATE_RPS_FAILED = 40,
            SG_LOGITEM_METAL_CREATE_RPS_OUTPUT = 41,
            SG_LOGITEM_WGPU_MAP_UNIFORM_BUFFER_FAILED = 42,
            SG_LOGITEM_WGPU_STAGING_BUFFER_FULL_COPY_TO_BUFFER = 43,
            SG_LOGITEM_WGPU_STAGING_BUFFER_FULL_COPY_TO_TEXTURE = 44,
            SG_LOGITEM_WGPU_RESET_STATE_CACHE_FIXME = 45,
            SG_LOGITEM_WGPU_ACTIVATE_CONTEXT_FIXME = 46,
            SG_LOGITEM_UNINIT_BUFFER_ACTIVE_CONTEXT_MISMATCH = 47,
            SG_LOGITEM_UNINIT_IMAGE_ACTIVE_CONTEXT_MISMATCH = 48,
            SG_LOGITEM_UNINIT_SHADER_ACTIVE_CONTEXT_MISMATCH = 49,
            SG_LOGITEM_UNINIT_PIPELINE_ACTIVE_CONTEXT_MISMATCH = 50,
            SG_LOGITEM_UNINIT_PASS_ACTIVE_CONTEXT_MISMATCH = 51,
            SG_LOGITEM_IDENTICAL_COMMIT_LISTENER = 52,
            SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL = 53,
            SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED = 54,
            SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE = 55,
            SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE = 56,
            SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE = 57,
            SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE = 58,
            SG_LOGITEM_DEALLOC_PASS_INVALID_STATE = 59,
            SG_LOGITEM_INIT_BUFFER_INVALID_STATE = 60,
            SG_LOGITEM_INIT_IMAGE_INVALID_STATE = 61,
            SG_LOGITEM_INIT_SHADER_INVALID_STATE = 62,
            SG_LOGITEM_INIT_PIPELINE_INVALID_STATE = 63,
            SG_LOGITEM_INIT_PASS_INVALID_STATE = 64,
            SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE = 65,
            SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE = 66,
            SG_LOGITEM_UNINIT_SHADER_INVALID_STATE = 67,
            SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE = 68,
            SG_LOGITEM_UNINIT_PASS_INVALID_STATE = 69,
            SG_LOGITEM_FAIL_BUFFER_INVALID_STATE = 70,
            SG_LOGITEM_FAIL_IMAGE_INVALID_STATE = 71,
            SG_LOGITEM_FAIL_SHADER_INVALID_STATE = 72,
            SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE = 73,
            SG_LOGITEM_FAIL_PASS_INVALID_STATE = 74,
            SG_LOGITEM_BUFFER_POOL_EXHAUSTED = 75,
            SG_LOGITEM_IMAGE_POOL_EXHAUSTED = 76,
            SG_LOGITEM_SHADER_POOL_EXHAUSTED = 77,
            SG_LOGITEM_PIPELINE_POOL_EXHAUSTED = 78,
            SG_LOGITEM_PASS_POOL_EXHAUSTED = 79,
            SG_LOGITEM_DRAW_WITHOUT_BINDINGS = 80,
            SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY = 81,
            SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE = 82,
            SG_LOGITEM_VALIDATE_BUFFERDESC_DATA = 83,
            SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE = 84,
            SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA = 85,
            SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA = 86,
            SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE = 87,
            SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY = 88,
            SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH = 89,
            SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT = 90,
            SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT = 91,
            SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT = 92,
            SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT = 93,
            SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT = 94,
            SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE = 95,
            SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA = 96,
            SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA = 97,
            SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA = 98,
            SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE = 99,
            SG_LOGITEM_VALIDATE_SHADERDESC_CANARY = 100,
            SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE = 101,
            SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE = 102,
            SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE = 103,
            SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE = 104,
            SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS = 105,
            SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS = 106,
            SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS = 107,
            SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME = 108,
            SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH = 109,
            SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT = 110,
            SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE = 111,
            SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMGS = 112,
            SG_LOGITEM_VALIDATE_SHADERDESC_IMG_NAME = 113,
            SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS = 114,
            SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG = 115,
            SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY = 116,
            SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER = 117,
            SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS = 118,
            SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4 = 119,
            SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS = 120,
            SG_LOGITEM_VALIDATE_PASSDESC_CANARY = 121,
            SG_LOGITEM_VALIDATE_PASSDESC_NO_COLOR_ATTS = 122,
            SG_LOGITEM_VALIDATE_PASSDESC_NO_CONT_COLOR_ATTS = 123,
            SG_LOGITEM_VALIDATE_PASSDESC_IMAGE = 124,
            SG_LOGITEM_VALIDATE_PASSDESC_MIPLEVEL = 125,
            SG_LOGITEM_VALIDATE_PASSDESC_FACE = 126,
            SG_LOGITEM_VALIDATE_PASSDESC_LAYER = 127,
            SG_LOGITEM_VALIDATE_PASSDESC_SLICE = 128,
            SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_NO_RT = 129,
            SG_LOGITEM_VALIDATE_PASSDESC_COLOR_INV_PIXELFORMAT = 130,
            SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_INV_PIXELFORMAT = 131,
            SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SIZES = 132,
            SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SAMPLE_COUNTS = 133,
            SG_LOGITEM_VALIDATE_BEGINPASS_PASS = 134,
            SG_LOGITEM_VALIDATE_BEGINPASS_IMAGE = 135,
            SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID = 136,
            SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS = 137,
            SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID = 138,
            SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS = 139,
            SG_LOGITEM_VALIDATE_APIP_SHADER_VALID = 140,
            SG_LOGITEM_VALIDATE_APIP_ATT_COUNT = 141,
            SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT = 142,
            SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT = 143,
            SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT = 144,
            SG_LOGITEM_VALIDATE_ABND_PIPELINE = 145,
            SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS = 146,
            SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID = 147,
            SG_LOGITEM_VALIDATE_ABND_VBS = 148,
            SG_LOGITEM_VALIDATE_ABND_VB_EXISTS = 149,
            SG_LOGITEM_VALIDATE_ABND_VB_TYPE = 150,
            SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW = 151,
            SG_LOGITEM_VALIDATE_ABND_NO_IB = 152,
            SG_LOGITEM_VALIDATE_ABND_IB = 153,
            SG_LOGITEM_VALIDATE_ABND_IB_EXISTS = 154,
            SG_LOGITEM_VALIDATE_ABND_IB_TYPE = 155,
            SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW = 156,
            SG_LOGITEM_VALIDATE_ABND_VS_IMGS = 157,
            SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS = 158,
            SG_LOGITEM_VALIDATE_ABND_VS_IMG_TYPES = 159,
            SG_LOGITEM_VALIDATE_ABND_FS_IMGS = 160,
            SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS = 161,
            SG_LOGITEM_VALIDATE_ABND_FS_IMG_TYPES = 162,
            SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE = 163,
            SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT = 164,
            SG_LOGITEM_VALIDATE_AUB_SIZE = 165,
            SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE = 166,
            SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE = 167,
            SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE = 168,
            SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND = 169,
            SG_LOGITEM_VALIDATE_APPENDBUF_USAGE = 170,
            SG_LOGITEM_VALIDATE_APPENDBUF_SIZE = 171,
            SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE = 172,
            SG_LOGITEM_VALIDATE_UPDIMG_USAGE = 173,
            SG_LOGITEM_VALIDATE_UPDIMG_ONCE = 174,
            SG_LOGITEM_VALIDATION_FAILED = 175
        }

        [CNode(Kind = "Enum")]
        public enum sg_pixel_format : int
        {
            _SG_PIXELFORMAT_DEFAULT = 0,
            SG_PIXELFORMAT_NONE = 1,
            SG_PIXELFORMAT_R8 = 2,
            SG_PIXELFORMAT_R8SN = 3,
            SG_PIXELFORMAT_R8UI = 4,
            SG_PIXELFORMAT_R8SI = 5,
            SG_PIXELFORMAT_R16 = 6,
            SG_PIXELFORMAT_R16SN = 7,
            SG_PIXELFORMAT_R16UI = 8,
            SG_PIXELFORMAT_R16SI = 9,
            SG_PIXELFORMAT_R16F = 10,
            SG_PIXELFORMAT_RG8 = 11,
            SG_PIXELFORMAT_RG8SN = 12,
            SG_PIXELFORMAT_RG8UI = 13,
            SG_PIXELFORMAT_RG8SI = 14,
            SG_PIXELFORMAT_R32UI = 15,
            SG_PIXELFORMAT_R32SI = 16,
            SG_PIXELFORMAT_R32F = 17,
            SG_PIXELFORMAT_RG16 = 18,
            SG_PIXELFORMAT_RG16SN = 19,
            SG_PIXELFORMAT_RG16UI = 20,
            SG_PIXELFORMAT_RG16SI = 21,
            SG_PIXELFORMAT_RG16F = 22,
            SG_PIXELFORMAT_RGBA8 = 23,
            SG_PIXELFORMAT_SRGB8A8 = 24,
            SG_PIXELFORMAT_RGBA8SN = 25,
            SG_PIXELFORMAT_RGBA8UI = 26,
            SG_PIXELFORMAT_RGBA8SI = 27,
            SG_PIXELFORMAT_BGRA8 = 28,
            SG_PIXELFORMAT_RGB10A2 = 29,
            SG_PIXELFORMAT_RG11B10F = 30,
            SG_PIXELFORMAT_RG32UI = 31,
            SG_PIXELFORMAT_RG32SI = 32,
            SG_PIXELFORMAT_RG32F = 33,
            SG_PIXELFORMAT_RGBA16 = 34,
            SG_PIXELFORMAT_RGBA16SN = 35,
            SG_PIXELFORMAT_RGBA16UI = 36,
            SG_PIXELFORMAT_RGBA16SI = 37,
            SG_PIXELFORMAT_RGBA16F = 38,
            SG_PIXELFORMAT_RGBA32UI = 39,
            SG_PIXELFORMAT_RGBA32SI = 40,
            SG_PIXELFORMAT_RGBA32F = 41,
            SG_PIXELFORMAT_DEPTH = 42,
            SG_PIXELFORMAT_DEPTH_STENCIL = 43,
            SG_PIXELFORMAT_BC1_RGBA = 44,
            SG_PIXELFORMAT_BC2_RGBA = 45,
            SG_PIXELFORMAT_BC3_RGBA = 46,
            SG_PIXELFORMAT_BC4_R = 47,
            SG_PIXELFORMAT_BC4_RSN = 48,
            SG_PIXELFORMAT_BC5_RG = 49,
            SG_PIXELFORMAT_BC5_RGSN = 50,
            SG_PIXELFORMAT_BC6H_RGBF = 51,
            SG_PIXELFORMAT_BC6H_RGBUF = 52,
            SG_PIXELFORMAT_BC7_RGBA = 53,
            SG_PIXELFORMAT_PVRTC_RGB_2BPP = 54,
            SG_PIXELFORMAT_PVRTC_RGB_4BPP = 55,
            SG_PIXELFORMAT_PVRTC_RGBA_2BPP = 56,
            SG_PIXELFORMAT_PVRTC_RGBA_4BPP = 57,
            SG_PIXELFORMAT_ETC2_RGB8 = 58,
            SG_PIXELFORMAT_ETC2_RGB8A1 = 59,
            SG_PIXELFORMAT_ETC2_RGBA8 = 60,
            SG_PIXELFORMAT_ETC2_RG11 = 61,
            SG_PIXELFORMAT_ETC2_RG11SN = 62,
            SG_PIXELFORMAT_RGB9E5 = 63,
            _SG_PIXELFORMAT_NUM = 64,
            _SG_PIXELFORMAT_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_primitive_type : int
        {
            _SG_PRIMITIVETYPE_DEFAULT = 0,
            SG_PRIMITIVETYPE_POINTS = 1,
            SG_PRIMITIVETYPE_LINES = 2,
            SG_PRIMITIVETYPE_LINE_STRIP = 3,
            SG_PRIMITIVETYPE_TRIANGLES = 4,
            SG_PRIMITIVETYPE_TRIANGLE_STRIP = 5,
            _SG_PRIMITIVETYPE_NUM = 6,
            _SG_PRIMITIVETYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_resource_state : int
        {
            SG_RESOURCESTATE_INITIAL = 0,
            SG_RESOURCESTATE_ALLOC = 1,
            SG_RESOURCESTATE_VALID = 2,
            SG_RESOURCESTATE_FAILED = 3,
            SG_RESOURCESTATE_INVALID = 4,
            _SG_RESOURCESTATE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_sampler_type : int
        {
            _SG_SAMPLERTYPE_DEFAULT = 0,
            SG_SAMPLERTYPE_FLOAT = 1,
            SG_SAMPLERTYPE_SINT = 2,
            SG_SAMPLERTYPE_UINT = 3
        }

        [CNode(Kind = "Enum")]
        public enum sg_shader_stage : int
        {
            SG_SHADERSTAGE_VS = 0,
            SG_SHADERSTAGE_FS = 1,
            _SG_SHADERSTAGE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_stencil_op : int
        {
            _SG_STENCILOP_DEFAULT = 0,
            SG_STENCILOP_KEEP = 1,
            SG_STENCILOP_ZERO = 2,
            SG_STENCILOP_REPLACE = 3,
            SG_STENCILOP_INCR_CLAMP = 4,
            SG_STENCILOP_DECR_CLAMP = 5,
            SG_STENCILOP_INVERT = 6,
            SG_STENCILOP_INCR_WRAP = 7,
            SG_STENCILOP_DECR_WRAP = 8,
            _SG_STENCILOP_NUM = 9,
            _SG_STENCILOP_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_uniform_layout : int
        {
            _SG_UNIFORMLAYOUT_DEFAULT = 0,
            SG_UNIFORMLAYOUT_NATIVE = 1,
            SG_UNIFORMLAYOUT_STD140 = 2,
            _SG_UNIFORMLAYOUT_NUM = 3,
            _SG_UNIFORMLAYOUT_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_uniform_type : int
        {
            SG_UNIFORMTYPE_INVALID = 0,
            SG_UNIFORMTYPE_FLOAT = 1,
            SG_UNIFORMTYPE_FLOAT2 = 2,
            SG_UNIFORMTYPE_FLOAT3 = 3,
            SG_UNIFORMTYPE_FLOAT4 = 4,
            SG_UNIFORMTYPE_INT = 5,
            SG_UNIFORMTYPE_INT2 = 6,
            SG_UNIFORMTYPE_INT3 = 7,
            SG_UNIFORMTYPE_INT4 = 8,
            SG_UNIFORMTYPE_MAT4 = 9,
            _SG_UNIFORMTYPE_NUM = 10,
            _SG_UNIFORMTYPE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_usage : int
        {
            _SG_USAGE_DEFAULT = 0,
            SG_USAGE_IMMUTABLE = 1,
            SG_USAGE_DYNAMIC = 2,
            SG_USAGE_STREAM = 3,
            _SG_USAGE_NUM = 4,
            _SG_USAGE_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_vertex_format : int
        {
            SG_VERTEXFORMAT_INVALID = 0,
            SG_VERTEXFORMAT_FLOAT = 1,
            SG_VERTEXFORMAT_FLOAT2 = 2,
            SG_VERTEXFORMAT_FLOAT3 = 3,
            SG_VERTEXFORMAT_FLOAT4 = 4,
            SG_VERTEXFORMAT_BYTE4 = 5,
            SG_VERTEXFORMAT_BYTE4N = 6,
            SG_VERTEXFORMAT_UBYTE4 = 7,
            SG_VERTEXFORMAT_UBYTE4N = 8,
            SG_VERTEXFORMAT_SHORT2 = 9,
            SG_VERTEXFORMAT_SHORT2N = 10,
            SG_VERTEXFORMAT_USHORT2N = 11,
            SG_VERTEXFORMAT_SHORT4 = 12,
            SG_VERTEXFORMAT_SHORT4N = 13,
            SG_VERTEXFORMAT_USHORT4N = 14,
            SG_VERTEXFORMAT_UINT10_N2 = 15,
            SG_VERTEXFORMAT_HALF2 = 16,
            SG_VERTEXFORMAT_HALF4 = 17,
            _SG_VERTEXFORMAT_NUM = 18,
            _SG_VERTEXFORMAT_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_vertex_step : int
        {
            _SG_VERTEXSTEP_DEFAULT = 0,
            SG_VERTEXSTEP_PER_VERTEX = 1,
            SG_VERTEXSTEP_PER_INSTANCE = 2,
            _SG_VERTEXSTEP_NUM = 3,
            _SG_VERTEXSTEP_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum sg_wrap : int
        {
            _SG_WRAP_DEFAULT = 0,
            SG_WRAP_REPEAT = 1,
            SG_WRAP_CLAMP_TO_EDGE = 2,
            SG_WRAP_CLAMP_TO_BORDER = 3,
            SG_WRAP_MIRRORED_REPEAT = 4,
            _SG_WRAP_NUM = 5,
            _SG_WRAP_FORCE_U32 = 2147483647
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct sfetch_callback_t
        {
            [FieldOffset(0)]
            public FnPtr_Sfetch_response_tPtr_Void Data;

            public static implicit operator FnPtr_Sfetch_response_tPtr_Void(sfetch_callback_t data) => data.Data;
            public static implicit operator sfetch_callback_t(FnPtr_Sfetch_response_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_APP_INCLUDED = 1;

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_ARGS_INCLUDED = 1;

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_AUDIO_INCLUDED = 1;

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_FETCH_INCLUDED = 1;

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_GFX_INCLUDED = 1;

        [CNode(Kind = "MacroObject")]
        public const int SOKOL_TIME_INCLUDED = 1;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MAX_ICONIMAGES = 8;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MAX_KEYCODES = 512;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MAX_MOUSEBUTTONS = 3;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MAX_TOUCHPOINTS = 8;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_ALT = 4;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_CTRL = 2;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_LMB = 256;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_MMB = 1024;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_RMB = 512;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_SHIFT = 1;

        [CNode(Kind = "EnumConstant")]
        public const int SAPP_MODIFIER_SUPER = 8;

        [CNode(Kind = "EnumConstant")]
        public const int SG_INVALID_ID = 0;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_COLOR_ATTACHMENTS = 4;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_MIPMAPS = 16;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_SHADERSTAGE_BUFFERS = 8;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_SHADERSTAGE_IMAGES = 12;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_SHADERSTAGE_UBS = 4;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_TEXTUREARRAY_LAYERS = 128;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_UB_MEMBERS = 16;

        [CNode(Kind = "EnumConstant")]
        public const int SG_MAX_VERTEX_ATTRIBUTES = 16;

        [CNode(Kind = "EnumConstant")]
        public const int SG_NUM_INFLIGHT_FRAMES = 2;

        [CNode(Kind = "EnumConstant")]
        public const int SG_NUM_SHADER_STAGES = 2;

        #endregion

        #region Setup & Teardown

        public static void Setup()
        {
            PreCompile();
        }

        private static void PreCompile()
        {
            var methods = typeof(sokol).GetMethods(
                System.Reflection.BindingFlags.DeclaredOnly |
                System.Reflection.BindingFlags.NonPublic |
                System.Reflection.BindingFlags.Public |
                System.Reflection.BindingFlags.Instance |
                System.Reflection.BindingFlags.Static);

            foreach (var method in methods)
            {
                if (method.GetMethodBody() == null)
                {
                    RuntimeHelpers.PrepareMethod(method.MethodHandle);
                }
            }
        }

        public static void Teardown()
        {
        }

        #endregion

        #region Runtime

        public static class Runtime
        {
            [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.ReturnValue)]
            public sealed class CConstAttribute : Attribute
            {
                // marker
            }

            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Enum | AttributeTargets.Field)]
            public sealed class CNodeAttribute : Attribute
            {
                public string Kind { get; set; } = string.Empty;
            }

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

#pragma warning disable CS1591

            /// <summary>
            ///     Utility methods for dealing with native C libraries.
            /// </summary>
            public static class CLibrary
            {
                private static bool IsWindows
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsWindows();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
#else
                        false;
#endif
                }

                private static bool IsDarwin
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsMacOS() ||
            OperatingSystem.IsMacCatalyst() ||
            OperatingSystem.IsIOS() ||
            OperatingSystem.IsTvOS() ||
            OperatingSystem.IsWatchOS();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
#else
                        false;
#endif
                }

                private static bool IsLinux
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsLinux() ||
            OperatingSystem.IsFreeBSD() ||
            OperatingSystem.IsAndroid();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
#else
                        false;
#endif
                }

                /// <summary>
                ///     Loads a C shared library (`.dll`/`.dylib`/`.so`) into the application's memory space given the C
                ///     library's file name, partially qualified file path, or a fully qualified file path.
                /// </summary>
                /// <param name="name">The C library's file name, partially qualified file path, or a fully qualified file path.</param>
                /// <returns>A <see cref="IntPtr" /> handle if the C library was loaded; otherwise, a <see cref="IntPtr.Zero" /> handle.</returns>
                /// <remarks>
                ///     <para>
                ///         If the library was already loaded, calling <see cref="Load" /> returns the handle of the previous loaded
                ///         library and the reference count for the handle is incremented.
                ///     </para>
                ///     <para>You must call <see cref="Free" /> when finished using a handle of a dynamically loaded library.</para>
                /// </remarks>
                public static IntPtr Load(string name)
                {
                    if (IsLinux)
                    {
                        return libdl.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    if (IsWindows)
                    {
                        return Kernel32.LoadLibrary(name);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    return IntPtr.Zero;
                }

                /// <summary>
                ///     Unloads a C shared library from the application's memory space given the library's handle.
                /// </summary>
                /// <param name="handle">The library's handle previously created by calling <see cref="Load" />.</param>
                /// <remarks>
                ///     <para>
                ///         If the library was loaded multiple times, the reference count for the handle is decremented upon calling
                ///         <see cref="Free" /> and the library is not yet unloaded from memory.
                ///     </para>
                /// </remarks>
                public static void Free(IntPtr handle)
                {
                    if (IsLinux)
                    {
                        libdl.dlclose(handle);
                    }

                    if (IsWindows)
                    {
                        Kernel32.FreeLibrary(handle);
                    }

                    if (IsDarwin)
                    {
                        libSystem.dlclose(handle);
                    }
                }

                public static IntPtr GetExport(IntPtr handle, string symbolName)
                {
                    if (IsLinux)
                    {
                        return libdl.dlsym(handle, symbolName);
                    }

                    if (IsWindows)
                    {
                        return Kernel32.GetProcAddress(handle, symbolName);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlsym(handle, symbolName);
                    }

                    return IntPtr.Zero;
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
#pragma warning disable CS8981
                private static class libdl
#pragma warning restore CS8981
                {
                    private const string LibraryName = "libdl";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libSystem
                {
                    private const string LibraryName = "libSystem";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class Kernel32
                {
                    private const string LibraryName = "kernel32";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern IntPtr LoadLibrary(string fileName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern IntPtr GetProcAddress(IntPtr module, string procName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern int FreeLibrary(IntPtr module);
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = FromString(s)._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static explicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string ToString(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    var result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    return result;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString FromString(string str)
                {
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    return new CString(pointer);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToString(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }
            }

            /// <summary>
            ///     Utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString.FromString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide.FromString(@string);
                        result[i] = cString;
                    }

                    return result;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = FromString(s)._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static explicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string ToString(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    var result = Marshal.PtrToStringUni(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    return result;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide FromString(string str)
                {
                    var pointer = Marshal.StringToHGlobalUni(str);
                    return new CStringWide(pointer);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToString(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}