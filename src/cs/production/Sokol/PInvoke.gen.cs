// <auto-generated>
//  This code was generated by the following tool on 2023-05-13 02:06:39 GMT-04:00:
//      https://github.com/bottlenoselabs/c2cs (v1.0.0.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.Sokol.PInvoke.Runtime;

#if NET7_0_OR_GREATER
[assembly: DisableRuntimeMarshalling]
#endif

[assembly: DefaultDllImportSearchPathsAttribute(DllImportSearchPath.SafeDirectories)]

namespace bottlenoselabs.Sokol;

public static unsafe partial class PInvoke
{
    private const string LibraryName = "sokol";

    #region Types

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_AppEventPtr_Void
    {
        public delegate* unmanaged<App.Event*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_AppEventPtr_VoidPtr_Void
    {
        public delegate* unmanaged<App.Event*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_AppHtml5FetchResponsePtr_Void
    {
        public delegate* unmanaged<App.Html5FetchResponse*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void
    {
        public delegate* unmanaged<CString, uint, uint, CString, uint, CString, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_CString_VoidPtr_Void
    {
        public delegate* unmanaged<CString, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_FetchResponseTPtr_Void
    {
        public delegate* unmanaged<Fetch.ResponseT*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_FloatPtr_Int_Int_Void
    {
        public delegate* unmanaged<float*, int, int, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_FloatPtr_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<float*, int, int, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBindingsPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Bindings*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBufferDescPtr_GraphicsBuffer_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.BufferDesc*, Graphics.Buffer, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBuffer_GraphicsBufferDescPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Buffer, Graphics.BufferDesc*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBuffer_GraphicsRangePtr_Int_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Buffer, Graphics.Range*, int, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBuffer_GraphicsRangePtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Buffer, Graphics.Range*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsBuffer_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Buffer, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsImageDescPtr_GraphicsImage_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.ImageDesc*, Graphics.Image, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsImage_GraphicsImageDataPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Image, Graphics.ImageData*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsImage_GraphicsImageDescPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Image, Graphics.ImageDesc*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsImage_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Image, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPassActionPtr_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.PassAction*, int, int, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPassDescPtr_GraphicsPass_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.PassDesc*, Graphics.Pass, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPass_GraphicsPassActionPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Pass, Graphics.PassAction*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPass_GraphicsPassDescPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Pass, Graphics.PassDesc*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPass_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Pass, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPipelineDescPtr_GraphicsPipeline_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.PipelineDesc*, Graphics.Pipeline, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPipeline_GraphicsPipelineDescPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Pipeline, Graphics.PipelineDesc*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsPipeline_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Pipeline, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsShaderDescPtr_GraphicsShader_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.ShaderDesc*, Graphics.Shader, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsShaderStage_Int_GraphicsRangePtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.ShaderStage, int, Graphics.Range*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsShader_GraphicsShaderDescPtr_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Shader, Graphics.ShaderDesc*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_GraphicsShader_VoidPtr_Void
    {
        public delegate* unmanaged<Graphics.Shader, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void
    {
        public delegate* unmanaged<int, int, int, int, CBool, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Int_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<int, int, int, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Ulong_VoidPtr_VoidPtr
    {
        public delegate* unmanaged<ulong, void*, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Void
    {
        public delegate* unmanaged<void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr
    {
        public delegate* unmanaged<void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr
    {
        public delegate* unmanaged<void*, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void*, void> Pointer;
    }

    #endregion

    public static unsafe partial class App
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_android_get_native_activity")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* AndroidGetNativeActivity();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_cancel_quit")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void CancelQuit();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_color_format")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int ColorFormat();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_consume_event")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ConsumeEvent();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_d3d11_get_depth_stencil_view")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11GetDepthStencilView();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_d3d11_get_device")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11GetDevice();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_d3d11_get_device_context")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11GetDeviceContext();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_d3d11_get_render_target_view")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11GetRenderTargetView();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_d3d11_get_swap_chain")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11GetSwapChain();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_depth_format")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int DepthFormat();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_dpi_scale")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial float DpiScale();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_egl_get_context")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* EglGetContext();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_egl_get_display")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* EglGetDisplay();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_frame_count")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong FrameCount();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_frame_duration")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Double FrameDuration();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_get_clipboard_string")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString GetClipboardString();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_get_dropped_file_path")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString GetDroppedFilePath(int index);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_get_mouse_cursor")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial App.MouseCursor GetMouseCursor();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_get_num_dropped_files")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int GetNumDroppedFiles();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_height")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Height();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_heightf")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial float Heightf();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_high_dpi")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool HighDpi();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_html5_ask_leave_site")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Html5AskLeaveSite(CBool ask);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_html5_fetch_dropped_file")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Html5FetchDroppedFile(App.Html5FetchRequest* request);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_html5_get_dropped_file_size")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial uint Html5GetDroppedFileSize(int index);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_ios_get_window")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* IosGetWindow();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_is_fullscreen")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool IsFullscreen();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_isvalid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Isvalid();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_keyboard_shown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool KeyboardShown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_lock_mouse")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void LockMouse(CBool @lock);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_macos_get_window")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MacosGetWindow();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_metal_get_device")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MetalGetDevice();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_metal_get_drawable")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MetalGetDrawable();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_metal_get_renderpass_descriptor")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MetalGetRenderpassDescriptor();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_mouse_locked")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool MouseLocked();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_mouse_shown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool MouseShown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_query_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial App.Desc QueryDesc();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_quit")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Quit();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_request_quit")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void RequestQuit();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_run")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Run(App.Desc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_sample_count")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int SampleCount();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_set_clipboard_string")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void SetClipboardString(CString str);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_set_icon")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void SetIcon(App.IconDesc* iconDesc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_set_mouse_cursor")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void SetMouseCursor(App.MouseCursor cursor);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_set_window_title")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void SetWindowTitle(CString str);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_sgcontext")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ContextDesc Sgcontext();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_show_keyboard")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ShowKeyboard(CBool show);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_show_mouse")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ShowMouse(CBool show);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_toggle_fullscreen")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ToggleFullscreen();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_userdata")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* Userdata();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_wgpu_get_depth_stencil_view")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* WgpuGetDepthStencilView();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_wgpu_get_device")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* WgpuGetDevice();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_wgpu_get_render_view")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* WgpuGetRenderView();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_wgpu_get_resolve_view")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* WgpuGetResolveView();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_width")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Width();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_widthf")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial float Widthf();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sapp_win32_get_hwnd")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* Win32GetHwnd();

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct Allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr Alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void Free;

            [FieldOffset(16)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 400, Pack = 8)]
        public struct Desc
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Void InitCb;

            [FieldOffset(8)] // size = 8
            public FnPtr_Void FrameCb;

            [FieldOffset(16)] // size = 8
            public FnPtr_Void CleanupCb;

            [FieldOffset(24)] // size = 8
            public FnPtr_AppEventPtr_Void EventCb;

            [FieldOffset(32)] // size = 8
            public void* UserData;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_Void InitUserdataCb;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_Void FrameUserdataCb;

            [FieldOffset(56)] // size = 8
            public FnPtr_VoidPtr_Void CleanupUserdataCb;

            [FieldOffset(64)] // size = 8
            public FnPtr_AppEventPtr_VoidPtr_Void EventUserdataCb;

            [FieldOffset(72)] // size = 4
            public int Width;

            [FieldOffset(76)] // size = 4
            public int Height;

            [FieldOffset(80)] // size = 4
            public int SampleCount;

            [FieldOffset(84)] // size = 4
            public int SwapInterval;

            [FieldOffset(88)] // size = 1
            public CBool HighDpi;

            [FieldOffset(89)] // size = 1
            public CBool Fullscreen;

            [FieldOffset(90)] // size = 1
            public CBool Alpha;

            [FieldOffset(96)] // size = 8
            public CString _WindowTitle;

            public string WindowTitle
            {
                get
                {
                    return Runtime.CString.ToString(_WindowTitle);
                }
                set
                {
                    _WindowTitle = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(104)] // size = 1
            public CBool EnableClipboard;

            [FieldOffset(108)] // size = 4
            public int ClipboardSize;

            [FieldOffset(112)] // size = 1
            public CBool EnableDragndrop;

            [FieldOffset(116)] // size = 4
            public int MaxDroppedFiles;

            [FieldOffset(120)] // size = 4
            public int MaxDroppedFilePathLength;

            [FieldOffset(128)] // size = 200
            public App.IconDesc Icon;

            [FieldOffset(328)] // size = 24
            public App.Allocator Allocator;

            [FieldOffset(352)] // size = 16
            public App.Logger Logger;

            [FieldOffset(368)] // size = 4
            public int GlMajorVersion;

            [FieldOffset(372)] // size = 4
            public int GlMinorVersion;

            [FieldOffset(376)] // size = 1
            public CBool Win32ConsoleUtf8;

            [FieldOffset(377)] // size = 1
            public CBool Win32ConsoleCreate;

            [FieldOffset(378)] // size = 1
            public CBool Win32ConsoleAttach;

            [FieldOffset(384)] // size = 8
            public CString _Html5CanvasName;

            public string Html5CanvasName
            {
                get
                {
                    return Runtime.CString.ToString(_Html5CanvasName);
                }
                set
                {
                    _Html5CanvasName = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(392)] // size = 1
            public CBool Html5CanvasResize;

            [FieldOffset(393)] // size = 1
            public CBool Html5PreserveDrawingBuffer;

            [FieldOffset(394)] // size = 1
            public CBool Html5PremultipliedAlpha;

            [FieldOffset(395)] // size = 1
            public CBool Html5AskLeaveSite;

            [FieldOffset(396)] // size = 1
            public CBool IosKeyboardResizesCanvas;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct Event
        {
            [FieldOffset(0)] // size = 8
            public ulong FrameCount;

            [FieldOffset(8)] // size = 4
            public App.EventType Type;

            [FieldOffset(12)] // size = 4
            public App.Keycode KeyCode;

            [FieldOffset(16)] // size = 4
            public uint CharCode;

            [FieldOffset(20)] // size = 1
            public CBool KeyRepeat;

            [FieldOffset(24)] // size = 4
            public uint Modifiers;

            [FieldOffset(28)] // size = 4
            public App.Mousebutton MouseButton;

            [FieldOffset(32)] // size = 4
            public float MouseX;

            [FieldOffset(36)] // size = 4
            public float MouseY;

            [FieldOffset(40)] // size = 4
            public float MouseDx;

            [FieldOffset(44)] // size = 4
            public float MouseDy;

            [FieldOffset(48)] // size = 4
            public float ScrollX;

            [FieldOffset(52)] // size = 4
            public float ScrollY;

            [FieldOffset(56)] // size = 4
            public int NumTouches;

            [FieldOffset(64)] // size = 192
            public fixed byte _Touches[192]; // sapp_touchpoint[8]

            public readonly Span<Touchpoint> Touches
            {
                get
                {
                    fixed (Event* @this = &this)
                    {
                        var pointer = &@this->_Touches[0];
                        var span = new Span<Touchpoint>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(256)] // size = 4
            public int WindowWidth;

            [FieldOffset(260)] // size = 4
            public int WindowHeight;

            [FieldOffset(264)] // size = 4
            public int FramebufferWidth;

            [FieldOffset(268)] // size = 4
            public int FramebufferHeight;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct Html5FetchRequest
        {
            [FieldOffset(0)] // size = 4
            public int DroppedFileIndex;

            [FieldOffset(8)] // size = 8
            public FnPtr_AppHtml5FetchResponsePtr_Void Callback;

            [FieldOffset(16)] // size = 16
            public App.Range Buffer;

            [FieldOffset(32)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct Html5FetchResponse
        {
            [FieldOffset(0)] // size = 1
            public CBool Succeeded;

            [FieldOffset(4)] // size = 4
            public App.Html5FetchError ErrorCode;

            [FieldOffset(8)] // size = 4
            public int FileIndex;

            [FieldOffset(16)] // size = 16
            public App.Range Data;

            [FieldOffset(32)] // size = 16
            public App.Range Buffer;

            [FieldOffset(48)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
        public struct IconDesc
        {
            [FieldOffset(0)] // size = 1
            public CBool SokolDefault;

            [FieldOffset(8)] // size = 192
            public fixed byte _Images[192]; // sapp_image_desc[8]

            public readonly Span<ImageDesc> Images
            {
                get
                {
                    fixed (IconDesc* @this = &this)
                    {
                        var pointer = &@this->_Images[0];
                        var span = new Span<ImageDesc>(pointer, 8);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ImageDesc
        {
            [FieldOffset(0)] // size = 4
            public int Width;

            [FieldOffset(4)] // size = 4
            public int Height;

            [FieldOffset(8)] // size = 16
            public App.Range Pixels;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct Logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void Func;

            [FieldOffset(8)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct Range
        {
            [FieldOffset(0)] // size = 8
            public void* Ptr;

            [FieldOffset(8)] // size = 8
            public ulong Size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct Touchpoint
        {
            [FieldOffset(0)] // size = 8
            public UIntPtr Identifier;

            [FieldOffset(8)] // size = 4
            public float PosX;

            [FieldOffset(12)] // size = 4
            public float PosY;

            [FieldOffset(16)] // size = 4
            public App.AndroidTooltype AndroidTooltype;

            [FieldOffset(20)] // size = 1
            public CBool Changed;
        }

        [CNode(Kind = "Enum")]
        public enum AndroidTooltype : int
        {
            Unknown = 0,
            Finger = 1,
            Stylus = 2,
            Mouse = 3
        }

        [CNode(Kind = "Enum")]
        public enum EventType : int
        {
            Invalid = 0,
            KeyDown = 1,
            KeyUp = 2,
            Char = 3,
            MouseDown = 4,
            MouseUp = 5,
            MouseScroll = 6,
            MouseMove = 7,
            MouseEnter = 8,
            MouseLeave = 9,
            TouchesBegan = 10,
            TouchesMoved = 11,
            TouchesEnded = 12,
            TouchesCancelled = 13,
            Resized = 14,
            Iconified = 15,
            Restored = 16,
            Focused = 17,
            Unfocused = 18,
            Suspended = 19,
            Resumed = 20,
            QuitRequested = 21,
            ClipboardPasted = 22,
            FilesDropped = 23,
            Num = 24,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum Html5FetchError : int
        {
            HTML5FETCHERRORNOERROR = 0,
            HTML5FETCHERRORBUFFERTOOSMALL = 1,
            HTML5FETCHERROROTHER = 2
        }

        [CNode(Kind = "Enum")]
        public enum Keycode : int
        {
            Invalid = 0,
            Space = 32,
            Apostrophe = 39,
            Comma = 44,
            Minus = 45,
            Period = 46,
            Slash = 47,
            _0 = 48,
            _1 = 49,
            _2 = 50,
            _3 = 51,
            _4 = 52,
            _5 = 53,
            _6 = 54,
            _7 = 55,
            _8 = 56,
            _9 = 57,
            Semicolon = 59,
            Equal = 61,
            A = 65,
            B = 66,
            C = 67,
            D = 68,
            E = 69,
            F = 70,
            G = 71,
            H = 72,
            I = 73,
            J = 74,
            K = 75,
            L = 76,
            M = 77,
            N = 78,
            O = 79,
            P = 80,
            Q = 81,
            R = 82,
            S = 83,
            T = 84,
            U = 85,
            V = 86,
            W = 87,
            X = 88,
            Y = 89,
            Z = 90,
            LeftBracket = 91,
            Backslash = 92,
            RightBracket = 93,
            GraveAccent = 96,
            World1 = 161,
            World2 = 162,
            Escape = 256,
            Enter = 257,
            Tab = 258,
            Backspace = 259,
            Insert = 260,
            Delete = 261,
            Right = 262,
            Left = 263,
            Down = 264,
            Up = 265,
            PageUp = 266,
            PageDown = 267,
            Home = 268,
            End = 269,
            CapsLock = 280,
            ScrollLock = 281,
            NumLock = 282,
            PrintScreen = 283,
            Pause = 284,
            F1 = 290,
            F2 = 291,
            F3 = 292,
            F4 = 293,
            F5 = 294,
            F6 = 295,
            F7 = 296,
            F8 = 297,
            F9 = 298,
            F10 = 299,
            F11 = 300,
            F12 = 301,
            F13 = 302,
            F14 = 303,
            F15 = 304,
            F16 = 305,
            F17 = 306,
            F18 = 307,
            F19 = 308,
            F20 = 309,
            F21 = 310,
            F22 = 311,
            F23 = 312,
            F24 = 313,
            F25 = 314,
            Kp0 = 320,
            Kp1 = 321,
            Kp2 = 322,
            Kp3 = 323,
            Kp4 = 324,
            Kp5 = 325,
            Kp6 = 326,
            Kp7 = 327,
            Kp8 = 328,
            Kp9 = 329,
            KpDecimal = 330,
            KpDivide = 331,
            KpMultiply = 332,
            KpSubtract = 333,
            KpAdd = 334,
            KpEnter = 335,
            KpEqual = 336,
            LeftShift = 340,
            LeftControl = 341,
            LeftAlt = 342,
            LeftSuper = 343,
            RightShift = 344,
            RightControl = 345,
            RightAlt = 346,
            RightSuper = 347,
            Menu = 348
        }

        [CNode(Kind = "Enum")]
        public enum LogItem : int
        {
            Ok = 0,
            MallocFailed = 1,
            MacosInvalidNsopenglProfile = 2,
            Win32LoadOpengl32DllFailed = 3,
            Win32CreateHelperWindowFailed = 4,
            Win32HelperWindowGetdcFailed = 5,
            Win32DummyContextSetPixelformatFailed = 6,
            Win32CreateDummyContextFailed = 7,
            Win32DummyContextMakeCurrentFailed = 8,
            Win32GetPixelformatAttribFailed = 9,
            Win32WglFindPixelformatFailed = 10,
            Win32WglDescribePixelformatFailed = 11,
            Win32WglSetPixelformatFailed = 12,
            Win32WglArbCreateContextRequired = 13,
            Win32WglArbCreateContextProfileRequired = 14,
            Win32WglOpengl32NotSupported = 15,
            Win32WglOpenglProfileNotSupported = 16,
            Win32WglIncompatibleDeviceContext = 17,
            Win32WglCreateContextAttribsFailedOther = 18,
            Win32D3d11CreateDeviceAndSwapchainWithDebugFailed = 19,
            Win32D3d11GetIdxgifactoryFailed = 20,
            Win32D3d11GetIdxgiadapterFailed = 21,
            Win32D3d11QueryInterfaceIdxgidevice1Failed = 22,
            Win32RegisterRawInputDevicesFailedMouseLock = 23,
            Win32RegisterRawInputDevicesFailedMouseUnlock = 24,
            Win32GetRawInputDataFailed = 25,
            LinuxGlxLoadLibglFailed = 26,
            LinuxGlxLoadEntryPointsFailed = 27,
            LinuxGlxExtensionNotFound = 28,
            LinuxGlxQueryVersionFailed = 29,
            LinuxGlxVersionTooLow = 30,
            LinuxGlxNoGlxfbconfigs = 31,
            LinuxGlxNoSuitableGlxfbconfig = 32,
            LinuxGlxGetVisualFromFbconfigFailed = 33,
            LinuxGlxRequiredExtensionsMissing = 34,
            LinuxGlxCreateContextFailed = 35,
            LinuxGlxCreateWindowFailed = 36,
            LinuxX11CreateWindowFailed = 37,
            LinuxEglBindOpenglApiFailed = 38,
            LinuxEglBindOpenglEsApiFailed = 39,
            LinuxEglGetDisplayFailed = 40,
            LinuxEglInitializeFailed = 41,
            LinuxEglNoConfigs = 42,
            LinuxEglNoNativeVisual = 43,
            LinuxEglGetVisualInfoFailed = 44,
            LinuxEglCreateWindowSurfaceFailed = 45,
            LinuxEglCreateContextFailed = 46,
            LinuxEglMakeCurrentFailed = 47,
            LinuxX11OpenDisplayFailed = 48,
            LinuxX11QuerySystemDpiFailed = 49,
            LinuxX11DroppedFileUriWrongScheme = 50,
            AndroidUnsupportedInputEventInputCb = 51,
            AndroidUnsupportedInputEventMainCb = 52,
            AndroidReadMsgFailed = 53,
            AndroidWriteMsgFailed = 54,
            AndroidMsgCreate = 55,
            AndroidMsgResume = 56,
            AndroidMsgPause = 57,
            AndroidMsgFocus = 58,
            AndroidMsgNoFocus = 59,
            AndroidMsgSetNativeWindow = 60,
            AndroidMsgSetInputQueue = 61,
            AndroidMsgDestroy = 62,
            AndroidUnknownMsg = 63,
            AndroidLoopThreadStarted = 64,
            AndroidLoopThreadDone = 65,
            AndroidNativeActivityOnstart = 66,
            AndroidNativeActivityOnresume = 67,
            AndroidNativeActivityOnsaveinstancestate = 68,
            AndroidNativeActivityOnwindowfocuschanged = 69,
            AndroidNativeActivityOnpause = 70,
            AndroidNativeActivityOnstop = 71,
            AndroidNativeActivityOnnativewindowcreated = 72,
            AndroidNativeActivityOnnativewindowdestroyed = 73,
            AndroidNativeActivityOninputqueuecreated = 74,
            AndroidNativeActivityOninputqueuedestroyed = 75,
            AndroidNativeActivityOnconfigurationchanged = 76,
            AndroidNativeActivityOnlowmemory = 77,
            AndroidNativeActivityOndestroy = 78,
            AndroidNativeActivityDone = 79,
            AndroidNativeActivityOncreate = 80,
            AndroidCreateThreadPipeFailed = 81,
            AndroidNativeActivityCreateSuccess = 82,
            ImageDataSizeMismatch = 83,
            DroppedFilePathTooLong = 84,
            ClipboardStringTooBig = 85
        }

        [CNode(Kind = "Enum")]
        public enum MouseCursor : int
        {
            Default = 0,
            Arrow = 1,
            Ibeam = 2,
            Crosshair = 3,
            PointingHand = 4,
            ResizeEw = 5,
            ResizeNs = 6,
            ResizeNwse = 7,
            ResizeNesw = 8,
            ResizeAll = 9,
            NotAllowed = 10,
            Num = 11
        }

        [CNode(Kind = "Enum")]
        public enum Mousebutton : int
        {
            Left = 0,
            Right = 1,
            Middle = 2,
            Invalid = 256
        }

        [CNode(Kind = "EnumConstant")]
        public const uint MAXICONIMAGES = 8;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXKEYCODES = 512;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXMOUSEBUTTONS = 3;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXTOUCHPOINTS = 8;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERALT = 4;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERCTRL = 2;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERLMB = 256;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERMMB = 1024;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERRMB = 512;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERSHIFT = 1;

        [CNode(Kind = "EnumConstant")]
        public const uint MODIFIERSUPER = 8;

        #endregion
    }

    public static unsafe partial class Args
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_boolean")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Boolean(CString key);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_equals")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Equals(CString key, CString val);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_exists")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Exists(CString key);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_find")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Find(CString key);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_isvalid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Isvalid();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_key_at")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString KeyAt(int index);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_num_args")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int NumArgs();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_setup")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Setup(Args.Desc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_shutdown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Shutdown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_value")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString Value(CString key);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_value_at")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString ValueAt(int index);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sargs_value_def")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CString ValueDef(CString key, CString def);

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct Allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr Alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void Free;

            [FieldOffset(16)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct Desc
        {
            [FieldOffset(0)] // size = 4
            public int Argc;

            [FieldOffset(8)] // size = 8
            public CString* Argv;

            [FieldOffset(16)] // size = 4
            public int MaxArgs;

            [FieldOffset(20)] // size = 4
            public int BufSize;

            [FieldOffset(24)] // size = 24
            public Args.Allocator Allocator;
        }

        #endregion
    }

    public static unsafe partial class Audio
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_buffer_frames")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int BufferFrames();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_channels")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Channels();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_expect")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Expect();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_isvalid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Isvalid();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_push")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int Push(float* frames, int numFrames);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_query_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Audio.Desc QueryDesc();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_sample_rate")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int SampleRate();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_setup")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Setup(Audio.Desc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_shutdown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Shutdown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_suspended")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Suspended();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "saudio_userdata")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* Userdata();

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct Allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr Alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void Free;

            [FieldOffset(16)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct Desc
        {
            [FieldOffset(0)] // size = 4
            public int SampleRate;

            [FieldOffset(4)] // size = 4
            public int NumChannels;

            [FieldOffset(8)] // size = 4
            public int BufferFrames;

            [FieldOffset(12)] // size = 4
            public int PacketFrames;

            [FieldOffset(16)] // size = 4
            public int NumPackets;

            [FieldOffset(24)] // size = 8
            public FnPtr_FloatPtr_Int_Int_Void StreamCb;

            [FieldOffset(32)] // size = 8
            public FnPtr_FloatPtr_Int_Int_VoidPtr_Void StreamUserdataCb;

            [FieldOffset(40)] // size = 8
            public void* UserData;

            [FieldOffset(48)] // size = 24
            public Audio.Allocator Allocator;

            [FieldOffset(72)] // size = 16
            public Audio.Logger Logger;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct Logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void Func;

            [FieldOffset(8)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Enum")]
        public enum LogItem : int
        {
            Ok = 0,
            MallocFailed = 1,
            AlsaSndPcmOpenFailed = 2,
            AlsaFloatSamplesNotSupported = 3,
            AlsaRequestedBufferSizeNotSupported = 4,
            AlsaRequestedChannelCountNotSupported = 5,
            AlsaSndPcmHwParamsSetRateNearFailed = 6,
            AlsaSndPcmHwParamsFailed = 7,
            AlsaPthreadCreateFailed = 8,
            WasapiCreateEventFailed = 9,
            WasapiCreateDeviceEnumeratorFailed = 10,
            WasapiGetDefaultAudioEndpointFailed = 11,
            WasapiDeviceActivateFailed = 12,
            WasapiAudioClientInitializeFailed = 13,
            WasapiAudioClientGetBufferSizeFailed = 14,
            WasapiAudioClientGetServiceFailed = 15,
            WasapiAudioClientSetEventHandleFailed = 16,
            WasapiCreateThreadFailed = 17,
            AaudioStreambuilderOpenStreamFailed = 18,
            AaudioPthreadCreateFailed = 19,
            AaudioRestartingStreamAfterError = 20,
            UsingAaudioBackend = 21,
            AaudioCreateStreambuilderFailed = 22,
            UsingSlesBackend = 23,
            SlesCreateEngineFailed = 24,
            SlesEngineGetEngineInterfaceFailed = 25,
            SlesCreateOutputMixFailed = 26,
            SlesMixerGetVolumeInterfaceFailed = 27,
            SlesEngineCreateAudioPlayerFailed = 28,
            SlesPlayerGetPlayInterfaceFailed = 29,
            SlesPlayerGetVolumeInterfaceFailed = 30,
            SlesPlayerGetBufferqueueInterfaceFailed = 31,
            CoreaudioNewOutputFailed = 32,
            CoreaudioAllocateBufferFailed = 33,
            CoreaudioStartFailed = 34,
            BackendBufferSizeIsntMultipleOfPacketSize = 35
        }

        #endregion
    }

    public static unsafe partial class Fetch
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_bind_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void BindBuffer(Fetch.HandleT h, Fetch.RangeT buffer);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_cancel")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Cancel(Fetch.HandleT h);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_continue")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Continue(Fetch.HandleT h);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Fetch.DescT Desc();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_dowork")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Dowork();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_handle_valid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool HandleValid(Fetch.HandleT h);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_max_path")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int MaxPath();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_max_userdata_bytes")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int MaxUserdataBytes();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_pause")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Pause(Fetch.HandleT h);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_send")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Fetch.HandleT Send(Fetch.RequestT* request);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_setup")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Setup(Fetch.DescT* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_shutdown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Shutdown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_unbind_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* UnbindBuffer(Fetch.HandleT h);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sfetch_valid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Valid();

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct AllocatorT
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr Alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void Free;

            [FieldOffset(16)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct DescT
        {
            [FieldOffset(0)] // size = 4
            public uint MaxRequests;

            [FieldOffset(4)] // size = 4
            public uint NumChannels;

            [FieldOffset(8)] // size = 4
            public uint NumLanes;

            [FieldOffset(16)] // size = 24
            public Fetch.AllocatorT Allocator;

            [FieldOffset(40)] // size = 16
            public Fetch.LoggerT Logger;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct HandleT
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct LoggerT
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void Func;

            [FieldOffset(8)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct RangeT
        {
            [FieldOffset(0)] // size = 8
            public void* Ptr;

            [FieldOffset(8)] // size = 8
            public ulong Size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct RequestT
        {
            [FieldOffset(0)] // size = 4
            public uint Channel;

            [FieldOffset(8)] // size = 8
            public CString _Path;

            public string Path
            {
                get
                {
                    return Runtime.CString.ToString(_Path);
                }
                set
                {
                    _Path = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(16)] // size = 8
            public Fetch.CallbackT Callback;

            [FieldOffset(24)] // size = 4
            public uint ChunkSize;

            [FieldOffset(32)] // size = 16
            public Fetch.RangeT Buffer;

            [FieldOffset(48)] // size = 16
            public Fetch.RangeT UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct ResponseT
        {
            [FieldOffset(0)] // size = 4
            public Fetch.HandleT Handle;

            [FieldOffset(4)] // size = 1
            public CBool Dispatched;

            [FieldOffset(5)] // size = 1
            public CBool Fetched;

            [FieldOffset(6)] // size = 1
            public CBool Paused;

            [FieldOffset(7)] // size = 1
            public CBool Finished;

            [FieldOffset(8)] // size = 1
            public CBool Failed;

            [FieldOffset(9)] // size = 1
            public CBool Cancelled;

            [FieldOffset(12)] // size = 4
            public Fetch.ErrorT ErrorCode;

            [FieldOffset(16)] // size = 4
            public uint Channel;

            [FieldOffset(20)] // size = 4
            public uint Lane;

            [FieldOffset(24)] // size = 8
            public CString _Path;

            public string Path
            {
                get
                {
                    return Runtime.CString.ToString(_Path);
                }
                set
                {
                    _Path = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(32)] // size = 8
            public void* UserData;

            [FieldOffset(40)] // size = 4
            public uint DataOffset;

            [FieldOffset(48)] // size = 16
            public Fetch.RangeT Data;

            [FieldOffset(64)] // size = 16
            public Fetch.RangeT Buffer;
        }

        [CNode(Kind = "Enum")]
        public enum ErrorT : int
        {
            ERRORNOERROR = 0,
            ERRORFILENOTFOUND = 1,
            ERRORNOBUFFER = 2,
            ERRORBUFFERTOOSMALL = 3,
            ERRORUNEXPECTEDEOF = 4,
            ERRORINVALIDHTTPSTATUS = 5,
            ERRORCANCELLED = 6
        }

        [CNode(Kind = "Enum")]
        public enum LogItemT : int
        {
            LOGITEMOK = 0,
            LOGITEMMALLOCFAILED = 1,
            LOGITEMFILEPATHUTF8DECODINGFAILED = 2,
            LOGITEMSENDQUEUEFULL = 3,
            LOGITEMREQUESTCHANNELINDEXTOOBIG = 4,
            LOGITEMREQUESTPATHISNULL = 5,
            LOGITEMREQUESTPATHTOOLONG = 6,
            LOGITEMREQUESTCALLBACKMISSING = 7,
            LOGITEMREQUESTCHUNKSIZEGREATERBUFFERSIZE = 8,
            LOGITEMREQUESTUSERDATAPTRISSETBUTUSERDATASIZEISNULL = 9,
            LOGITEMREQUESTUSERDATAPTRISNULLBUTUSERDATASIZEISNOT = 10,
            LOGITEMREQUESTUSERDATASIZETOOBIG = 11,
            LOGITEMCLAMPINGNUMCHANNELSTOMAXCHANNELS = 12,
            LOGITEMREQUESTPOOLEXHAUSTED = 13
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CallbackT
        {
            [FieldOffset(0)]
            public FnPtr_FetchResponseTPtr_Void Data;

            public static implicit operator FnPtr_FetchResponseTPtr_Void(CallbackT data) => data.Data;
            public static implicit operator CallbackT(FnPtr_FetchResponseTPtr_Void data) => new() { Data = data };
        }

        #endregion
    }

    public static unsafe partial class Graphics
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_activate_context")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ActivateContext(Graphics.Context ctxId);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_add_commit_listener")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool AddCommitListener(Graphics.CommitListener listener);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_alloc_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Buffer AllocBuffer();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_alloc_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Image AllocImage();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_alloc_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Pass AllocPass();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_alloc_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Pipeline AllocPipeline();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_alloc_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Shader AllocShader();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_append_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial int AppendBuffer(Graphics.Buffer buf, Graphics.Range* data);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_bindings")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyBindings(Graphics.Bindings* bindings);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyPipeline(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_scissor_rect")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyScissorRect(int x, int y, int width, int height, CBool originTopLeft);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_scissor_rectf")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyScissorRectf(float x, float y, float width, float height, CBool originTopLeft);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_uniforms")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyUniforms(Graphics.ShaderStage stage, int ubIndex, Graphics.Range* data);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_viewport")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyViewport(int x, int y, int width, int height, CBool originTopLeft);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_apply_viewportf")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ApplyViewportf(float x, float y, float width, float height, CBool originTopLeft);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_begin_default_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void BeginDefaultPass(Graphics.PassAction* passAction, int width, int height);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_begin_default_passf")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void BeginDefaultPassf(Graphics.PassAction* passAction, float width, float height);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_begin_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void BeginPass(Graphics.Pass pass, Graphics.PassAction* passAction);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_commit")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Commit();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_d3d11_device")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* D3d11Device();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_dealloc_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DeallocBuffer(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_dealloc_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DeallocImage(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_dealloc_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DeallocPass(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_dealloc_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DeallocPipeline(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_dealloc_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DeallocShader(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_destroy_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DestroyBuffer(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_destroy_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DestroyImage(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_destroy_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DestroyPass(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_destroy_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DestroyPipeline(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_destroy_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DestroyShader(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_discard_context")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void DiscardContext(Graphics.Context ctxId);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_draw")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Draw(int baseElement, int numElements, int numInstances);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_end_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void EndPass();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_fail_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void FailBuffer(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_fail_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void FailImage(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_fail_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void FailPass(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_fail_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void FailPipeline(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_fail_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void FailShader(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_init_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void InitBuffer(Graphics.Buffer buf, Graphics.BufferDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_init_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void InitImage(Graphics.Image img, Graphics.ImageDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_init_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void InitPass(Graphics.Pass pass, Graphics.PassDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_init_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void InitPipeline(Graphics.Pipeline pip, Graphics.PipelineDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_init_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void InitShader(Graphics.Shader shd, Graphics.ShaderDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_install_trace_hooks")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.TraceHooks InstallTraceHooks(Graphics.TraceHooks* traceHooks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_isvalid")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool Isvalid();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_make_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Buffer MakeBuffer(Graphics.BufferDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_make_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Image MakeImage(Graphics.ImageDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_make_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Pass MakePass(Graphics.PassDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_make_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Pipeline MakePipeline(Graphics.PipelineDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_make_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Shader MakeShader(Graphics.ShaderDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_mtl_device")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MtlDevice();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_mtl_render_command_encoder")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void* MtlRenderCommandEncoder();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_pop_debug_group")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void PopDebugGroup();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_push_debug_group")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void PushDebugGroup(CString name);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_backend")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Backend QueryBackend();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_defaults")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.BufferDesc QueryBufferDefaults(Graphics.BufferDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.BufferDesc QueryBufferDesc(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_info")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.BufferInfo QueryBufferInfo(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_overflow")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool QueryBufferOverflow(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_state")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ResourceState QueryBufferState(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_buffer_will_overflow")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool QueryBufferWillOverflow(Graphics.Buffer buf, ulong size);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Desc QueryDesc();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_features")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Features QueryFeatures();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_image_defaults")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ImageDesc QueryImageDefaults(Graphics.ImageDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_image_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ImageDesc QueryImageDesc(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_image_info")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ImageInfo QueryImageInfo(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_image_state")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ResourceState QueryImageState(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_limits")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Limits QueryLimits();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pass_defaults")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PassDesc QueryPassDefaults(Graphics.PassDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pass_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PassDesc QueryPassDesc(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pass_info")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PassInfo QueryPassInfo(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pass_state")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ResourceState QueryPassState(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pipeline_defaults")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PipelineDesc QueryPipelineDefaults(Graphics.PipelineDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pipeline_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PipelineDesc QueryPipelineDesc(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pipeline_info")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PipelineInfo QueryPipelineInfo(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pipeline_state")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ResourceState QueryPipelineState(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_pixelformat")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.PixelformatInfo QueryPixelformat(Graphics.PixelFormat fmt);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_shader_defaults")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ShaderDesc QueryShaderDefaults(Graphics.ShaderDesc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_shader_desc")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ShaderDesc QueryShaderDesc(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_shader_info")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ShaderInfo QueryShaderInfo(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_query_shader_state")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.ResourceState QueryShaderState(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_remove_commit_listener")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial CBool RemoveCommitListener(Graphics.CommitListener listener);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_reset_state_cache")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void ResetStateCache();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_setup")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Setup(Graphics.Desc* desc);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_setup_context")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Graphics.Context SetupContext();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_shutdown")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Shutdown();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_uninit_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UninitBuffer(Graphics.Buffer buf);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_uninit_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UninitImage(Graphics.Image img);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_uninit_pass")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UninitPass(Graphics.Pass pass);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_uninit_pipeline")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UninitPipeline(Graphics.Pipeline pip);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_uninit_shader")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UninitShader(Graphics.Shader shd);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_update_buffer")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UpdateBuffer(Graphics.Buffer buf, Graphics.Range* data);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "sg_update_image")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void UpdateImage(Graphics.Image img, Graphics.ImageData* data);

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct Allocator
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ulong_VoidPtr_VoidPtr Alloc;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Void Free;

            [FieldOffset(16)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 176, Pack = 4)]
        public struct Bindings
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 32
            public fixed byte _VertexBuffers[32]; // sg_buffer[8]

            public readonly Span<Buffer> VertexBuffers
            {
                get
                {
                    fixed (Bindings* @this = &this)
                    {
                        var pointer = &@this->_VertexBuffers[0];
                        var span = new Span<Buffer>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(36)] // size = 32
            public fixed byte _VertexBufferOffsets[32]; // int[8]

            public readonly Span<int> VertexBufferOffsets
            {
                get
                {
                    fixed (Bindings* @this = &this)
                    {
                        var pointer = &@this->_VertexBufferOffsets[0];
                        var span = new Span<int>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(68)] // size = 4
            public Graphics.Buffer IndexBuffer;

            [FieldOffset(72)] // size = 4
            public int IndexBufferOffset;

            [FieldOffset(76)] // size = 48
            public fixed byte _VsImages[48]; // sg_image[12]

            public readonly Span<Image> VsImages
            {
                get
                {
                    fixed (Bindings* @this = &this)
                    {
                        var pointer = &@this->_VsImages[0];
                        var span = new Span<Image>(pointer, 12);
                        return span;
                    }
                }
            }

            [FieldOffset(124)] // size = 48
            public fixed byte _FsImages[48]; // sg_image[12]

            public readonly Span<Image> FsImages
            {
                get
                {
                    fixed (Bindings* @this = &this)
                    {
                        var pointer = &@this->_FsImages[0];
                        var span = new Span<Image>(pointer, 12);
                        return span;
                    }
                }
            }

            [FieldOffset(172)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct BlendState
        {
            [FieldOffset(0)] // size = 1
            public CBool Enabled;

            [FieldOffset(4)] // size = 4
            public Graphics.BlendFactor SrcFactorRgb;

            [FieldOffset(8)] // size = 4
            public Graphics.BlendFactor DstFactorRgb;

            [FieldOffset(12)] // size = 4
            public Graphics.BlendOp OpRgb;

            [FieldOffset(16)] // size = 4
            public Graphics.BlendFactor SrcFactorAlpha;

            [FieldOffset(20)] // size = 4
            public Graphics.BlendFactor DstFactorAlpha;

            [FieldOffset(24)] // size = 4
            public Graphics.BlendOp OpAlpha;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Buffer
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
        public struct BufferDesc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(8)] // size = 8
            public ulong Size;

            [FieldOffset(16)] // size = 4
            public Graphics.BufferType Type;

            [FieldOffset(20)] // size = 4
            public Graphics.Usage Usage;

            [FieldOffset(24)] // size = 16
            public Graphics.Range Data;

            [FieldOffset(40)] // size = 8
            public CString _Label;

            public string Label
            {
                get
                {
                    return Runtime.CString.ToString(_Label);
                }
                set
                {
                    _Label = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(48)] // size = 8
            public fixed byte _GlBuffers[8]; // uint32_t[2]

            public readonly Span<uint> GlBuffers
            {
                get
                {
                    fixed (BufferDesc* @this = &this)
                    {
                        var pointer = &@this->_GlBuffers[0];
                        var span = new Span<uint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(56)] // size = 16
            public fixed byte _MtlBuffers[16]; // const void*[2]

            public readonly Span<nint> MtlBuffers
            {
                get
                {
                    fixed (BufferDesc* @this = &this)
                    {
                        var pointer = &@this->_MtlBuffers[0];
                        var span = new Span<nint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(72)] // size = 8
            public void* D3d11Buffer;

            [FieldOffset(80)] // size = 8
            public void* WgpuBuffer;

            [FieldOffset(88)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct BufferInfo
        {
            [FieldOffset(0)] // size = 12
            public Graphics.SlotInfo Slot;

            [FieldOffset(12)] // size = 4
            public uint UpdateFrameIndex;

            [FieldOffset(16)] // size = 4
            public uint AppendFrameIndex;

            [FieldOffset(20)] // size = 4
            public int AppendPos;

            [FieldOffset(24)] // size = 1
            public CBool AppendOverflow;

            [FieldOffset(28)] // size = 4
            public int NumSlots;

            [FieldOffset(32)] // size = 4
            public int ActiveSlot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct BufferLayoutDesc
        {
            [FieldOffset(0)] // size = 4
            public int Stride;

            [FieldOffset(4)] // size = 4
            public Graphics.VertexStep StepFunc;

            [FieldOffset(8)] // size = 4
            public int StepRate;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct Color
        {
            [FieldOffset(0)] // size = 4
            public float R;

            [FieldOffset(4)] // size = 4
            public float G;

            [FieldOffset(8)] // size = 4
            public float B;

            [FieldOffset(12)] // size = 4
            public float A;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ColorAttachmentAction
        {
            [FieldOffset(0)] // size = 4
            public Graphics.Action Action;

            [FieldOffset(4)] // size = 16
            public Rgba32F Value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct ColorState
        {
            [FieldOffset(0)] // size = 4
            public Graphics.PixelFormat PixelFormat;

            [FieldOffset(4)] // size = 4
            public Graphics.ColorMask WriteMask;

            [FieldOffset(8)] // size = 28
            public Graphics.BlendState Blend;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct CommitListener
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_VoidPtr_Void Func;

            [FieldOffset(8)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Context
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 184, Pack = 8)]
        public struct ContextDesc
        {
            [FieldOffset(0)] // size = 4
            public Graphics.PixelFormat ColorFormat;

            [FieldOffset(4)] // size = 4
            public Graphics.PixelFormat DepthFormat;

            [FieldOffset(8)] // size = 4
            public int SampleCount;

            [FieldOffset(16)] // size = 48
            public Graphics.MetalContextDesc Metal;

            [FieldOffset(64)] // size = 56
            public Graphics.D3d11ContextDesc D3d11;

            [FieldOffset(120)] // size = 64
            public Graphics.WgpuContextDesc Wgpu;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct D3d11ContextDesc
        {
            [FieldOffset(0)] // size = 8
            public void* Device;

            [FieldOffset(8)] // size = 8
            public void* DeviceContext;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr RenderTargetViewCb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr_VoidPtr RenderTargetViewUserdataCb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr DepthStencilViewCb;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_VoidPtr DepthStencilViewUserdataCb;

            [FieldOffset(48)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct DepthAttachmentAction
        {
            [FieldOffset(0)] // size = 4
            public Graphics.Action Action;

            [FieldOffset(4)] // size = 4
            public float Value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct DepthState
        {
            [FieldOffset(0)] // size = 4
            public Graphics.PixelFormat PixelFormat;

            [FieldOffset(4)] // size = 4
            public Graphics.CompareFunc Compare;

            [FieldOffset(8)] // size = 1
            public CBool WriteEnabled;

            [FieldOffset(12)] // size = 4
            public float Bias;

            [FieldOffset(16)] // size = 4
            public float BiasSlopeScale;

            [FieldOffset(20)] // size = 4
            public float BiasClamp;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 280, Pack = 8)]
        public struct Desc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 4
            public int BufferPoolSize;

            [FieldOffset(8)] // size = 4
            public int ImagePoolSize;

            [FieldOffset(12)] // size = 4
            public int ShaderPoolSize;

            [FieldOffset(16)] // size = 4
            public int PipelinePoolSize;

            [FieldOffset(20)] // size = 4
            public int PassPoolSize;

            [FieldOffset(24)] // size = 4
            public int ContextPoolSize;

            [FieldOffset(28)] // size = 4
            public int UniformBufferSize;

            [FieldOffset(32)] // size = 4
            public int StagingBufferSize;

            [FieldOffset(36)] // size = 4
            public int SamplerCacheSize;

            [FieldOffset(40)] // size = 4
            public int MaxCommitListeners;

            [FieldOffset(44)] // size = 1
            public CBool DisableValidation;

            [FieldOffset(48)] // size = 24
            public Graphics.Allocator Allocator;

            [FieldOffset(72)] // size = 16
            public Graphics.Logger Logger;

            [FieldOffset(88)] // size = 184
            public Graphics.ContextDesc Context;

            [FieldOffset(272)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
        public struct Features
        {
            [FieldOffset(0)] // size = 1
            public CBool OriginTopLeft;

            [FieldOffset(1)] // size = 1
            public CBool ImageClampToBorder;

            [FieldOffset(2)] // size = 1
            public CBool MrtIndependentBlendState;

            [FieldOffset(3)] // size = 1
            public CBool MrtIndependentWriteMask;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Image
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1536, Pack = 8)]
        public struct ImageData
        {
            [FieldOffset(0)] // size = 1536
            public fixed byte _Subimage[1536]; // sg_range[6]

            public readonly Span<Range> Subimage
            {
                get
                {
                    fixed (ImageData* @this = &this)
                    {
                        var pointer = &@this->_Subimage[0];
                        var span = new Span<Range>(pointer, 6);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1688, Pack = 8)]
        public struct ImageDesc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 4
            public Graphics.ImageType Type;

            [FieldOffset(8)] // size = 1
            public CBool RenderTarget;

            [FieldOffset(12)] // size = 4
            public int Width;

            [FieldOffset(16)] // size = 4
            public int Height;

            [FieldOffset(20)] // size = 4
            public int NumSlices;

            [FieldOffset(24)] // size = 4
            public int NumMipmaps;

            [FieldOffset(28)] // size = 4
            public Graphics.Usage Usage;

            [FieldOffset(32)] // size = 4
            public Graphics.PixelFormat PixelFormat;

            [FieldOffset(36)] // size = 4
            public int SampleCount;

            [FieldOffset(40)] // size = 4
            public Graphics.Filter MinFilter;

            [FieldOffset(44)] // size = 4
            public Graphics.Filter MagFilter;

            [FieldOffset(48)] // size = 4
            public Graphics.Wrap WrapU;

            [FieldOffset(52)] // size = 4
            public Graphics.Wrap WrapV;

            [FieldOffset(56)] // size = 4
            public Graphics.Wrap WrapW;

            [FieldOffset(60)] // size = 4
            public Graphics.BorderColor BorderColor;

            [FieldOffset(64)] // size = 4
            public uint MaxAnisotropy;

            [FieldOffset(68)] // size = 4
            public float MinLod;

            [FieldOffset(72)] // size = 4
            public float MaxLod;

            [FieldOffset(80)] // size = 1536
            public Graphics.ImageData Data;

            [FieldOffset(1616)] // size = 8
            public CString _Label;

            public string Label
            {
                get
                {
                    return Runtime.CString.ToString(_Label);
                }
                set
                {
                    _Label = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(1624)] // size = 8
            public fixed byte _GlTextures[8]; // uint32_t[2]

            public readonly Span<uint> GlTextures
            {
                get
                {
                    fixed (ImageDesc* @this = &this)
                    {
                        var pointer = &@this->_GlTextures[0];
                        var span = new Span<uint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(1632)] // size = 4
            public uint GlTextureTarget;

            [FieldOffset(1640)] // size = 16
            public fixed byte _MtlTextures[16]; // const void*[2]

            public readonly Span<nint> MtlTextures
            {
                get
                {
                    fixed (ImageDesc* @this = &this)
                    {
                        var pointer = &@this->_MtlTextures[0];
                        var span = new Span<nint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(1656)] // size = 8
            public void* D3d11Texture;

            [FieldOffset(1664)] // size = 8
            public void* D3d11ShaderResourceView;

            [FieldOffset(1672)] // size = 8
            public void* WgpuTexture;

            [FieldOffset(1680)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct ImageInfo
        {
            [FieldOffset(0)] // size = 12
            public Graphics.SlotInfo Slot;

            [FieldOffset(12)] // size = 4
            public uint UpdFrameIndex;

            [FieldOffset(16)] // size = 4
            public int NumSlots;

            [FieldOffset(20)] // size = 4
            public int ActiveSlot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 4)]
        public struct LayoutDesc
        {
            [FieldOffset(0)] // size = 96
            public fixed byte _Buffers[96]; // sg_buffer_layout_desc[8]

            public readonly Span<BufferLayoutDesc> Buffers
            {
                get
                {
                    fixed (LayoutDesc* @this = &this)
                    {
                        var pointer = &@this->_Buffers[0];
                        var span = new Span<BufferLayoutDesc>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(96)] // size = 192
            public fixed byte _Attrs[192]; // sg_vertex_attr_desc[16]

            public readonly Span<VertexAttrDesc> Attrs
            {
                get
                {
                    fixed (LayoutDesc* @this = &this)
                    {
                        var pointer = &@this->_Attrs[0];
                        var span = new Span<VertexAttrDesc>(pointer, 16);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
        public struct Limits
        {
            [FieldOffset(0)] // size = 4
            public int MaxImageSize2d;

            [FieldOffset(4)] // size = 4
            public int MaxImageSizeCube;

            [FieldOffset(8)] // size = 4
            public int MaxImageSize3d;

            [FieldOffset(12)] // size = 4
            public int MaxImageSizeArray;

            [FieldOffset(16)] // size = 4
            public int MaxImageArrayLayers;

            [FieldOffset(20)] // size = 4
            public int MaxVertexAttrs;

            [FieldOffset(24)] // size = 4
            public int GlMaxVertexUniformVectors;

            [FieldOffset(28)] // size = 4
            public int GlMaxCombinedTextureImageUnits;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct Logger
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_CString_Uint_Uint_CString_Uint_CString_VoidPtr_Void Func;

            [FieldOffset(8)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct MetalContextDesc
        {
            [FieldOffset(0)] // size = 8
            public void* Device;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr RenderpassDescriptorCb;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr_VoidPtr RenderpassDescriptorUserdataCb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr DrawableCb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr_VoidPtr DrawableUserdataCb;

            [FieldOffset(40)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Pass
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 4)]
        public struct PassAction
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 80
            public fixed byte _Colors[80]; // sg_color_attachment_action[4]

            public readonly Span<ColorAttachmentAction> Colors
            {
                get
                {
                    fixed (PassAction* @this = &this)
                    {
                        var pointer = &@this->_Colors[0];
                        var span = new Span<ColorAttachmentAction>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(84)] // size = 8
            public Graphics.DepthAttachmentAction Depth;

            [FieldOffset(92)] // size = 8
            public Graphics.StencilAttachmentAction Stencil;

            [FieldOffset(100)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct PassAttachmentDesc
        {
            [FieldOffset(0)] // size = 4
            public Graphics.Image Image;

            [FieldOffset(4)] // size = 4
            public int MipLevel;

            [FieldOffset(8)] // size = 4
            public int Slice;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct PassDesc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 48
            public fixed byte _ColorAttachments[48]; // sg_pass_attachment_desc[4]

            public readonly Span<PassAttachmentDesc> ColorAttachments
            {
                get
                {
                    fixed (PassDesc* @this = &this)
                    {
                        var pointer = &@this->_ColorAttachments[0];
                        var span = new Span<PassAttachmentDesc>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(52)] // size = 12
            public Graphics.PassAttachmentDesc DepthStencilAttachment;

            [FieldOffset(64)] // size = 8
            public CString _Label;

            public string Label
            {
                get
                {
                    return Runtime.CString.ToString(_Label);
                }
                set
                {
                    _Label = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(72)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct PassInfo
        {
            [FieldOffset(0)] // size = 12
            public Graphics.SlotInfo Slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Pipeline
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 568, Pack = 8)]
        public struct PipelineDesc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(4)] // size = 4
            public Graphics.Shader Shader;

            [FieldOffset(8)] // size = 288
            public Graphics.LayoutDesc Layout;

            [FieldOffset(296)] // size = 24
            public Graphics.DepthState Depth;

            [FieldOffset(320)] // size = 40
            public Graphics.StencilState Stencil;

            [FieldOffset(360)] // size = 4
            public int ColorCount;

            [FieldOffset(364)] // size = 144
            public fixed byte _Colors[144]; // sg_color_state[4]

            public readonly Span<ColorState> Colors
            {
                get
                {
                    fixed (PipelineDesc* @this = &this)
                    {
                        var pointer = &@this->_Colors[0];
                        var span = new Span<ColorState>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(508)] // size = 4
            public Graphics.PrimitiveType PrimitiveType;

            [FieldOffset(512)] // size = 4
            public Graphics.IndexType IndexType;

            [FieldOffset(516)] // size = 4
            public Graphics.CullMode CullMode;

            [FieldOffset(520)] // size = 4
            public Graphics.FaceWinding FaceWinding;

            [FieldOffset(524)] // size = 4
            public int SampleCount;

            [FieldOffset(528)] // size = 16
            public Rgba32F BlendColor;

            [FieldOffset(544)] // size = 1
            public CBool AlphaToCoverageEnabled;

            [FieldOffset(552)] // size = 8
            public CString _Label;

            public string Label
            {
                get
                {
                    return Runtime.CString.ToString(_Label);
                }
                set
                {
                    _Label = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(560)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct PipelineInfo
        {
            [FieldOffset(0)] // size = 12
            public Graphics.SlotInfo Slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 6, Pack = 1)]
        public struct PixelformatInfo
        {
            [FieldOffset(0)] // size = 1
            public CBool Sample;

            [FieldOffset(1)] // size = 1
            public CBool Filter;

            [FieldOffset(2)] // size = 1
            public CBool Render;

            [FieldOffset(3)] // size = 1
            public CBool Blend;

            [FieldOffset(4)] // size = 1
            public CBool Msaa;

            [FieldOffset(5)] // size = 1
            public CBool Depth;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct Range
        {
            [FieldOffset(0)] // size = 8
            public void* Ptr;

            [FieldOffset(8)] // size = 8
            public ulong Size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct Shader
        {
            [FieldOffset(0)] // size = 4
            public uint Id;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ShaderAttrDesc
        {
            [FieldOffset(0)] // size = 8
            public CString _Name;

            public string Name
            {
                get
                {
                    return Runtime.CString.ToString(_Name);
                }
                set
                {
                    _Name = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(8)] // size = 8
            public CString _SemName;

            public string SemName
            {
                get
                {
                    return Runtime.CString.ToString(_SemName);
                }
                set
                {
                    _SemName = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(16)] // size = 4
            public int SemIndex;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 3048, Pack = 8)]
        public struct ShaderDesc
        {
            [FieldOffset(0)] // size = 4
            public uint StartCanary;

            [FieldOffset(8)] // size = 384
            public fixed byte _Attrs[384]; // sg_shader_attr_desc[16]

            public readonly Span<ShaderAttrDesc> Attrs
            {
                get
                {
                    fixed (ShaderDesc* @this = &this)
                    {
                        var pointer = &@this->_Attrs[0];
                        var span = new Span<ShaderAttrDesc>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(392)] // size = 1320
            public Graphics.ShaderStageDesc Vs;

            [FieldOffset(1712)] // size = 1320
            public Graphics.ShaderStageDesc Fs;

            [FieldOffset(3032)] // size = 8
            public CString _Label;

            public string Label
            {
                get
                {
                    return Runtime.CString.ToString(_Label);
                }
                set
                {
                    _Label = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(3040)] // size = 4
            public uint EndCanary;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ShaderImageDesc
        {
            [FieldOffset(0)] // size = 8
            public CString _Name;

            public string Name
            {
                get
                {
                    return Runtime.CString.ToString(_Name);
                }
                set
                {
                    _Name = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(8)] // size = 4
            public Graphics.ImageType ImageType;

            [FieldOffset(12)] // size = 4
            public Graphics.SamplerType SamplerType;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ShaderInfo
        {
            [FieldOffset(0)] // size = 12
            public Graphics.SlotInfo Slot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1320, Pack = 8)]
        public struct ShaderStageDesc
        {
            [FieldOffset(0)] // size = 8
            public CString _Source;

            public string Source
            {
                get
                {
                    return Runtime.CString.ToString(_Source);
                }
                set
                {
                    _Source = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(8)] // size = 16
            public Graphics.Range Bytecode;

            [FieldOffset(24)] // size = 8
            public CString _Entry;

            public string Entry
            {
                get
                {
                    return Runtime.CString.ToString(_Entry);
                }
                set
                {
                    _Entry = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(32)] // size = 8
            public CString _D3d11Target;

            public string D3d11Target
            {
                get
                {
                    return Runtime.CString.ToString(_D3d11Target);
                }
                set
                {
                    _D3d11Target = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(40)] // size = 1088
            public fixed byte _UniformBlocks[1088]; // sg_shader_uniform_block_desc[4]

            public readonly Span<ShaderUniformBlockDesc> UniformBlocks
            {
                get
                {
                    fixed (ShaderStageDesc* @this = &this)
                    {
                        var pointer = &@this->_UniformBlocks[0];
                        var span = new Span<ShaderUniformBlockDesc>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(1128)] // size = 192
            public fixed byte _Images[192]; // sg_shader_image_desc[12]

            public readonly Span<ShaderImageDesc> Images
            {
                get
                {
                    fixed (ShaderStageDesc* @this = &this)
                    {
                        var pointer = &@this->_Images[0];
                        var span = new Span<ShaderImageDesc>(pointer, 12);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct ShaderUniformBlockDesc
        {
            [FieldOffset(0)] // size = 8
            public ulong Size;

            [FieldOffset(8)] // size = 4
            public Graphics.UniformLayout Layout;

            [FieldOffset(16)] // size = 256
            public fixed byte _Uniforms[256]; // sg_shader_uniform_desc[16]

            public readonly Span<ShaderUniformDesc> Uniforms
            {
                get
                {
                    fixed (ShaderUniformBlockDesc* @this = &this)
                    {
                        var pointer = &@this->_Uniforms[0];
                        var span = new Span<ShaderUniformDesc>(pointer, 16);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ShaderUniformDesc
        {
            [FieldOffset(0)] // size = 8
            public CString _Name;

            public string Name
            {
                get
                {
                    return Runtime.CString.ToString(_Name);
                }
                set
                {
                    _Name = Runtime.CString.FromString(value);
                }
            }

            [FieldOffset(8)] // size = 4
            public Graphics.UniformType Type;

            [FieldOffset(12)] // size = 4
            public int ArrayCount;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct SlotInfo
        {
            [FieldOffset(0)] // size = 4
            public Graphics.ResourceState State;

            [FieldOffset(4)] // size = 4
            public uint ResId;

            [FieldOffset(8)] // size = 4
            public uint CtxId;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct StencilAttachmentAction
        {
            [FieldOffset(0)] // size = 4
            public Graphics.Action Action;

            [FieldOffset(4)] // size = 1
            public byte Value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct StencilFaceState
        {
            [FieldOffset(0)] // size = 4
            public Graphics.CompareFunc Compare;

            [FieldOffset(4)] // size = 4
            public Graphics.StencilOp FailOp;

            [FieldOffset(8)] // size = 4
            public Graphics.StencilOp DepthFailOp;

            [FieldOffset(12)] // size = 4
            public Graphics.StencilOp PassOp;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
        public struct StencilState
        {
            [FieldOffset(0)] // size = 1
            public CBool Enabled;

            [FieldOffset(4)] // size = 16
            public Graphics.StencilFaceState Front;

            [FieldOffset(20)] // size = 16
            public Graphics.StencilFaceState Back;

            [FieldOffset(36)] // size = 1
            public byte ReadMask;

            [FieldOffset(37)] // size = 1
            public byte WriteMask;

            [FieldOffset(38)] // size = 1
            public byte Ref;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 488, Pack = 8)]
        public struct TraceHooks
        {
            [FieldOffset(0)] // size = 8
            public void* UserData;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr_Void ResetStateCache;

            [FieldOffset(16)] // size = 8
            public FnPtr_GraphicsBufferDescPtr_GraphicsBuffer_VoidPtr_Void MakeBuffer;

            [FieldOffset(24)] // size = 8
            public FnPtr_GraphicsImageDescPtr_GraphicsImage_VoidPtr_Void MakeImage;

            [FieldOffset(32)] // size = 8
            public FnPtr_GraphicsShaderDescPtr_GraphicsShader_VoidPtr_Void MakeShader;

            [FieldOffset(40)] // size = 8
            public FnPtr_GraphicsPipelineDescPtr_GraphicsPipeline_VoidPtr_Void MakePipeline;

            [FieldOffset(48)] // size = 8
            public FnPtr_GraphicsPassDescPtr_GraphicsPass_VoidPtr_Void MakePass;

            [FieldOffset(56)] // size = 8
            public FnPtr_GraphicsBuffer_VoidPtr_Void DestroyBuffer;

            [FieldOffset(64)] // size = 8
            public FnPtr_GraphicsImage_VoidPtr_Void DestroyImage;

            [FieldOffset(72)] // size = 8
            public FnPtr_GraphicsShader_VoidPtr_Void DestroyShader;

            [FieldOffset(80)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void DestroyPipeline;

            [FieldOffset(88)] // size = 8
            public FnPtr_GraphicsPass_VoidPtr_Void DestroyPass;

            [FieldOffset(96)] // size = 8
            public FnPtr_GraphicsBuffer_GraphicsRangePtr_VoidPtr_Void UpdateBuffer;

            [FieldOffset(104)] // size = 8
            public FnPtr_GraphicsImage_GraphicsImageDataPtr_VoidPtr_Void UpdateImage;

            [FieldOffset(112)] // size = 8
            public FnPtr_GraphicsBuffer_GraphicsRangePtr_Int_VoidPtr_Void AppendBuffer;

            [FieldOffset(120)] // size = 8
            public FnPtr_GraphicsPassActionPtr_Int_Int_VoidPtr_Void BeginDefaultPass;

            [FieldOffset(128)] // size = 8
            public FnPtr_GraphicsPass_GraphicsPassActionPtr_VoidPtr_Void BeginPass;

            [FieldOffset(136)] // size = 8
            public FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void ApplyViewport;

            [FieldOffset(144)] // size = 8
            public FnPtr_Int_Int_Int_Int_CBool_VoidPtr_Void ApplyScissorRect;

            [FieldOffset(152)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void ApplyPipeline;

            [FieldOffset(160)] // size = 8
            public FnPtr_GraphicsBindingsPtr_VoidPtr_Void ApplyBindings;

            [FieldOffset(168)] // size = 8
            public FnPtr_GraphicsShaderStage_Int_GraphicsRangePtr_VoidPtr_Void ApplyUniforms;

            [FieldOffset(176)] // size = 8
            public FnPtr_Int_Int_Int_VoidPtr_Void Draw;

            [FieldOffset(184)] // size = 8
            public FnPtr_VoidPtr_Void EndPass;

            [FieldOffset(192)] // size = 8
            public FnPtr_VoidPtr_Void Commit;

            [FieldOffset(200)] // size = 8
            public FnPtr_GraphicsBuffer_VoidPtr_Void AllocBuffer;

            [FieldOffset(208)] // size = 8
            public FnPtr_GraphicsImage_VoidPtr_Void AllocImage;

            [FieldOffset(216)] // size = 8
            public FnPtr_GraphicsShader_VoidPtr_Void AllocShader;

            [FieldOffset(224)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void AllocPipeline;

            [FieldOffset(232)] // size = 8
            public FnPtr_GraphicsPass_VoidPtr_Void AllocPass;

            [FieldOffset(240)] // size = 8
            public FnPtr_GraphicsBuffer_VoidPtr_Void DeallocBuffer;

            [FieldOffset(248)] // size = 8
            public FnPtr_GraphicsImage_VoidPtr_Void DeallocImage;

            [FieldOffset(256)] // size = 8
            public FnPtr_GraphicsShader_VoidPtr_Void DeallocShader;

            [FieldOffset(264)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void DeallocPipeline;

            [FieldOffset(272)] // size = 8
            public FnPtr_GraphicsPass_VoidPtr_Void DeallocPass;

            [FieldOffset(280)] // size = 8
            public FnPtr_GraphicsBuffer_GraphicsBufferDescPtr_VoidPtr_Void InitBuffer;

            [FieldOffset(288)] // size = 8
            public FnPtr_GraphicsImage_GraphicsImageDescPtr_VoidPtr_Void InitImage;

            [FieldOffset(296)] // size = 8
            public FnPtr_GraphicsShader_GraphicsShaderDescPtr_VoidPtr_Void InitShader;

            [FieldOffset(304)] // size = 8
            public FnPtr_GraphicsPipeline_GraphicsPipelineDescPtr_VoidPtr_Void InitPipeline;

            [FieldOffset(312)] // size = 8
            public FnPtr_GraphicsPass_GraphicsPassDescPtr_VoidPtr_Void InitPass;

            [FieldOffset(320)] // size = 8
            public FnPtr_GraphicsBuffer_VoidPtr_Void UninitBuffer;

            [FieldOffset(328)] // size = 8
            public FnPtr_GraphicsImage_VoidPtr_Void UninitImage;

            [FieldOffset(336)] // size = 8
            public FnPtr_GraphicsShader_VoidPtr_Void UninitShader;

            [FieldOffset(344)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void UninitPipeline;

            [FieldOffset(352)] // size = 8
            public FnPtr_GraphicsPass_VoidPtr_Void UninitPass;

            [FieldOffset(360)] // size = 8
            public FnPtr_GraphicsBuffer_VoidPtr_Void FailBuffer;

            [FieldOffset(368)] // size = 8
            public FnPtr_GraphicsImage_VoidPtr_Void FailImage;

            [FieldOffset(376)] // size = 8
            public FnPtr_GraphicsShader_VoidPtr_Void FailShader;

            [FieldOffset(384)] // size = 8
            public FnPtr_GraphicsPipeline_VoidPtr_Void FailPipeline;

            [FieldOffset(392)] // size = 8
            public FnPtr_GraphicsPass_VoidPtr_Void FailPass;

            [FieldOffset(400)] // size = 8
            public FnPtr_CString_VoidPtr_Void PushDebugGroup;

            [FieldOffset(408)] // size = 8
            public FnPtr_VoidPtr_Void PopDebugGroup;

            [FieldOffset(416)] // size = 8
            public FnPtr_VoidPtr_Void ErrBufferPoolExhausted;

            [FieldOffset(424)] // size = 8
            public FnPtr_VoidPtr_Void ErrImagePoolExhausted;

            [FieldOffset(432)] // size = 8
            public FnPtr_VoidPtr_Void ErrShaderPoolExhausted;

            [FieldOffset(440)] // size = 8
            public FnPtr_VoidPtr_Void ErrPipelinePoolExhausted;

            [FieldOffset(448)] // size = 8
            public FnPtr_VoidPtr_Void ErrPassPoolExhausted;

            [FieldOffset(456)] // size = 8
            public FnPtr_VoidPtr_Void ErrContextMismatch;

            [FieldOffset(464)] // size = 8
            public FnPtr_VoidPtr_Void ErrPassInvalid;

            [FieldOffset(472)] // size = 8
            public FnPtr_VoidPtr_Void ErrDrawInvalid;

            [FieldOffset(480)] // size = 8
            public FnPtr_VoidPtr_Void ErrBindingsInvalid;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct VertexAttrDesc
        {
            [FieldOffset(0)] // size = 4
            public int BufferIndex;

            [FieldOffset(4)] // size = 4
            public int Offset;

            [FieldOffset(8)] // size = 4
            public Graphics.VertexFormat Format;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct WgpuContextDesc
        {
            [FieldOffset(0)] // size = 8
            public void* Device;

            [FieldOffset(8)] // size = 8
            public FnPtr_VoidPtr RenderViewCb;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr_VoidPtr RenderViewUserdataCb;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr ResolveViewCb;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr_VoidPtr ResolveViewUserdataCb;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr DepthStencilViewCb;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_VoidPtr DepthStencilViewUserdataCb;

            [FieldOffset(56)] // size = 8
            public void* UserData;
        }

        [CNode(Kind = "Enum")]
        public enum Action : int
        {
            Default = 0,
            Clear = 1,
            Load = 2,
            Dontcare = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum Backend : int
        {
            Glcore33 = 0,
            Gles3 = 1,
            D3d11 = 2,
            MetalIos = 3,
            MetalMacos = 4,
            MetalSimulator = 5,
            Wgpu = 6,
            Dummy = 7
        }

        [CNode(Kind = "Enum")]
        public enum BlendFactor : int
        {
            Default = 0,
            Zero = 1,
            One = 2,
            SrcColor = 3,
            OneMinusSrcColor = 4,
            SrcAlpha = 5,
            OneMinusSrcAlpha = 6,
            DstColor = 7,
            OneMinusDstColor = 8,
            DstAlpha = 9,
            OneMinusDstAlpha = 10,
            SrcAlphaSaturated = 11,
            BlendColor = 12,
            OneMinusBlendColor = 13,
            BlendAlpha = 14,
            OneMinusBlendAlpha = 15,
            Num = 16,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum BlendOp : int
        {
            Default = 0,
            Add = 1,
            Subtract = 2,
            ReverseSubtract = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum BorderColor : int
        {
            Default = 0,
            TransparentBlack = 1,
            OpaqueBlack = 2,
            OpaqueWhite = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum BufferType : int
        {
            Default = 0,
            Vertexbuffer = 1,
            Indexbuffer = 2,
            Num = 3,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum ColorMask : int
        {
            Default = 0,
            None = 16,
            R = 1,
            G = 2,
            Rg = 3,
            B = 4,
            Rb = 5,
            Gb = 6,
            Rgb = 7,
            A = 8,
            Ra = 9,
            Ga = 10,
            Rga = 11,
            Ba = 12,
            Rba = 13,
            Gba = 14,
            Rgba = 15,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum CompareFunc : int
        {
            Default = 0,
            Never = 1,
            Less = 2,
            Equal = 3,
            LessEqual = 4,
            Greater = 5,
            NotEqual = 6,
            GreaterEqual = 7,
            Always = 8,
            Num = 9,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum CubeFace : int
        {
            PosX = 0,
            NegX = 1,
            PosY = 2,
            NegY = 3,
            PosZ = 4,
            NegZ = 5,
            Num = 6,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum CullMode : int
        {
            Default = 0,
            None = 1,
            Front = 2,
            Back = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum FaceWinding : int
        {
            Default = 0,
            Ccw = 1,
            Cw = 2,
            Num = 3,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum Filter : int
        {
            Default = 0,
            Nearest = 1,
            Linear = 2,
            NearestMipmapNearest = 3,
            NearestMipmapLinear = 4,
            LinearMipmapNearest = 5,
            LinearMipmapLinear = 6,
            Num = 7,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum ImageType : int
        {
            Default = 0,
            _2d = 1,
            Cube = 2,
            _3d = 3,
            Array = 4,
            Num = 5,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum IndexType : int
        {
            Default = 0,
            None = 1,
            Uint16 = 2,
            Uint32 = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum LogItem : int
        {
            Ok = 0,
            MallocFailed = 1,
            GlTextureFormatNotSupported = 2,
            Gl3dTexturesNotSupported = 3,
            GlArrayTexturesNotSupported = 4,
            GlShaderCompilationFailed = 5,
            GlShaderLinkingFailed = 6,
            GlVertexAttributeNotFoundInShader = 7,
            GlFramebufferIncomplete = 8,
            GlMsaaFramebufferIncomplete = 9,
            D3d11CreateBufferFailed = 10,
            D3d11CreateDepthTextureUnsupportedPixelFormat = 11,
            D3d11CreateDepthTextureFailed = 12,
            D3d11Create2dTextureUnsupportedPixelFormat = 13,
            D3d11Create2dTextureFailed = 14,
            D3d11Create2dSrvFailed = 15,
            D3d11Create3dTextureUnsupportedPixelFormat = 16,
            D3d11Create3dTextureFailed = 17,
            D3d11Create3dSrvFailed = 18,
            D3d11CreateMsaaTextureFailed = 19,
            D3d11CreateSamplerStateFailed = 20,
            D3d11LoadD3dcompiler47DllFailed = 21,
            D3d11ShaderCompilationFailed = 22,
            D3d11ShaderCompilationOutput = 23,
            D3d11CreateConstantBufferFailed = 24,
            D3d11CreateInputLayoutFailed = 25,
            D3d11CreateRasterizerStateFailed = 26,
            D3d11CreateDepthStencilStateFailed = 27,
            D3d11CreateBlendStateFailed = 28,
            D3d11CreateRtvFailed = 29,
            D3d11CreateDsvFailed = 30,
            D3d11MapForUpdateBufferFailed = 31,
            D3d11MapForAppendBufferFailed = 32,
            D3d11MapForUpdateImageFailed = 33,
            MetalTextureFormatNotSupported = 34,
            MetalShaderCompilationFailed = 35,
            MetalShaderCreationFailed = 36,
            MetalShaderCompilationOutput = 37,
            MetalVertexShaderEntryNotFound = 38,
            MetalFragmentShaderEntryNotFound = 39,
            MetalCreateRpsFailed = 40,
            MetalCreateRpsOutput = 41,
            WgpuMapUniformBufferFailed = 42,
            WgpuStagingBufferFullCopyToBuffer = 43,
            WgpuStagingBufferFullCopyToTexture = 44,
            WgpuResetStateCacheFixme = 45,
            WgpuActivateContextFixme = 46,
            UninitBufferActiveContextMismatch = 47,
            UninitImageActiveContextMismatch = 48,
            UninitShaderActiveContextMismatch = 49,
            UninitPipelineActiveContextMismatch = 50,
            UninitPassActiveContextMismatch = 51,
            IdenticalCommitListener = 52,
            CommitListenerArrayFull = 53,
            TraceHooksNotEnabled = 54,
            DeallocBufferInvalidState = 55,
            DeallocImageInvalidState = 56,
            DeallocShaderInvalidState = 57,
            DeallocPipelineInvalidState = 58,
            DeallocPassInvalidState = 59,
            InitBufferInvalidState = 60,
            InitImageInvalidState = 61,
            InitShaderInvalidState = 62,
            InitPipelineInvalidState = 63,
            InitPassInvalidState = 64,
            UninitBufferInvalidState = 65,
            UninitImageInvalidState = 66,
            UninitShaderInvalidState = 67,
            UninitPipelineInvalidState = 68,
            UninitPassInvalidState = 69,
            FailBufferInvalidState = 70,
            FailImageInvalidState = 71,
            FailShaderInvalidState = 72,
            FailPipelineInvalidState = 73,
            FailPassInvalidState = 74,
            BufferPoolExhausted = 75,
            ImagePoolExhausted = 76,
            ShaderPoolExhausted = 77,
            PipelinePoolExhausted = 78,
            PassPoolExhausted = 79,
            DrawWithoutBindings = 80,
            ValidateBufferdescCanary = 81,
            ValidateBufferdescSize = 82,
            ValidateBufferdescData = 83,
            ValidateBufferdescDataSize = 84,
            ValidateBufferdescNoData = 85,
            ValidateImagedataNodata = 86,
            ValidateImagedataDataSize = 87,
            ValidateImagedescCanary = 88,
            ValidateImagedescWidth = 89,
            ValidateImagedescHeight = 90,
            ValidateImagedescRtPixelformat = 91,
            ValidateImagedescNonrtPixelformat = 92,
            ValidateImagedescMsaaButNoRt = 93,
            ValidateImagedescNoMsaaRtSupport = 94,
            ValidateImagedescRtImmutable = 95,
            ValidateImagedescRtNoData = 96,
            ValidateImagedescInjectedNoData = 97,
            ValidateImagedescDynamicNoData = 98,
            ValidateImagedescCompressedImmutable = 99,
            ValidateShaderdescCanary = 100,
            ValidateShaderdescSource = 101,
            ValidateShaderdescBytecode = 102,
            ValidateShaderdescSourceOrBytecode = 103,
            ValidateShaderdescNoBytecodeSize = 104,
            ValidateShaderdescNoContUbs = 105,
            ValidateShaderdescNoContUbMembers = 106,
            ValidateShaderdescNoUbMembers = 107,
            ValidateShaderdescUbMemberName = 108,
            ValidateShaderdescUbSizeMismatch = 109,
            ValidateShaderdescUbArrayCount = 110,
            ValidateShaderdescUbStd140ArrayType = 111,
            ValidateShaderdescNoContImgs = 112,
            ValidateShaderdescImgName = 113,
            ValidateShaderdescAttrSemantics = 114,
            ValidateShaderdescAttrStringTooLong = 115,
            ValidatePipelinedescCanary = 116,
            ValidatePipelinedescShader = 117,
            ValidatePipelinedescNoAttrs = 118,
            ValidatePipelinedescLayoutStride4 = 119,
            ValidatePipelinedescAttrSemantics = 120,
            ValidatePassdescCanary = 121,
            ValidatePassdescNoColorAtts = 122,
            ValidatePassdescNoContColorAtts = 123,
            ValidatePassdescImage = 124,
            ValidatePassdescMiplevel = 125,
            ValidatePassdescFace = 126,
            ValidatePassdescLayer = 127,
            ValidatePassdescSlice = 128,
            ValidatePassdescImageNoRt = 129,
            ValidatePassdescColorInvPixelformat = 130,
            ValidatePassdescDepthInvPixelformat = 131,
            ValidatePassdescImageSizes = 132,
            ValidatePassdescImageSampleCounts = 133,
            ValidateBeginpassPass = 134,
            ValidateBeginpassImage = 135,
            ValidateApipPipelineValidId = 136,
            ValidateApipPipelineExists = 137,
            ValidateApipPipelineValid = 138,
            ValidateApipShaderExists = 139,
            ValidateApipShaderValid = 140,
            ValidateApipAttCount = 141,
            ValidateApipColorFormat = 142,
            ValidateApipDepthFormat = 143,
            ValidateApipSampleCount = 144,
            ValidateAbndPipeline = 145,
            ValidateAbndPipelineExists = 146,
            ValidateAbndPipelineValid = 147,
            ValidateAbndVbs = 148,
            ValidateAbndVbExists = 149,
            ValidateAbndVbType = 150,
            ValidateAbndVbOverflow = 151,
            ValidateAbndNoIb = 152,
            ValidateAbndIb = 153,
            ValidateAbndIbExists = 154,
            ValidateAbndIbType = 155,
            ValidateAbndIbOverflow = 156,
            ValidateAbndVsImgs = 157,
            ValidateAbndVsImgExists = 158,
            ValidateAbndVsImgTypes = 159,
            ValidateAbndFsImgs = 160,
            ValidateAbndFsImgExists = 161,
            ValidateAbndFsImgTypes = 162,
            ValidateAubNoPipeline = 163,
            ValidateAubNoUbAtSlot = 164,
            ValidateAubSize = 165,
            ValidateUpdatebufUsage = 166,
            ValidateUpdatebufSize = 167,
            ValidateUpdatebufOnce = 168,
            ValidateUpdatebufAppend = 169,
            ValidateAppendbufUsage = 170,
            ValidateAppendbufSize = 171,
            ValidateAppendbufUpdate = 172,
            ValidateUpdimgUsage = 173,
            ValidateUpdimgOnce = 174,
            ValidationFailed = 175
        }

        [CNode(Kind = "Enum")]
        public enum PixelFormat : int
        {
            Default = 0,
            None = 1,
            R8 = 2,
            R8sn = 3,
            R8ui = 4,
            R8si = 5,
            R16 = 6,
            R16sn = 7,
            R16ui = 8,
            R16si = 9,
            R16f = 10,
            Rg8 = 11,
            Rg8sn = 12,
            Rg8ui = 13,
            Rg8si = 14,
            R32ui = 15,
            R32si = 16,
            R32f = 17,
            Rg16 = 18,
            Rg16sn = 19,
            Rg16ui = 20,
            Rg16si = 21,
            Rg16f = 22,
            Rgba8 = 23,
            Srgb8a8 = 24,
            Rgba8sn = 25,
            Rgba8ui = 26,
            Rgba8si = 27,
            Bgra8 = 28,
            Rgb10a2 = 29,
            Rg11b10f = 30,
            Rg32ui = 31,
            Rg32si = 32,
            Rg32f = 33,
            Rgba16 = 34,
            Rgba16sn = 35,
            Rgba16ui = 36,
            Rgba16si = 37,
            Rgba16f = 38,
            Rgba32ui = 39,
            Rgba32si = 40,
            Rgba32f = 41,
            Depth = 42,
            DepthStencil = 43,
            Bc1Rgba = 44,
            Bc2Rgba = 45,
            Bc3Rgba = 46,
            Bc4R = 47,
            Bc4Rsn = 48,
            Bc5Rg = 49,
            Bc5Rgsn = 50,
            Bc6hRgbf = 51,
            Bc6hRgbuf = 52,
            Bc7Rgba = 53,
            PvrtcRgb2bpp = 54,
            PvrtcRgb4bpp = 55,
            PvrtcRgba2bpp = 56,
            PvrtcRgba4bpp = 57,
            Etc2Rgb8 = 58,
            Etc2Rgb8a1 = 59,
            Etc2Rgba8 = 60,
            Etc2Rg11 = 61,
            Etc2Rg11sn = 62,
            Rgb9e5 = 63,
            Num = 64,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum PrimitiveType : int
        {
            Default = 0,
            Points = 1,
            Lines = 2,
            LineStrip = 3,
            Triangles = 4,
            TriangleStrip = 5,
            Num = 6,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum ResourceState : int
        {
            Initial = 0,
            Alloc = 1,
            Valid = 2,
            Failed = 3,
            Invalid = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum SamplerType : int
        {
            Default = 0,
            Float = 1,
            Sint = 2,
            Uint = 3
        }

        [CNode(Kind = "Enum")]
        public enum ShaderStage : int
        {
            Vs = 0,
            Fs = 1,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum StencilOp : int
        {
            Default = 0,
            Keep = 1,
            Zero = 2,
            Replace = 3,
            IncrClamp = 4,
            DecrClamp = 5,
            Invert = 6,
            IncrWrap = 7,
            DecrWrap = 8,
            Num = 9,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum UniformLayout : int
        {
            Default = 0,
            Native = 1,
            Std140 = 2,
            Num = 3,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum UniformType : int
        {
            Invalid = 0,
            Float = 1,
            Float2 = 2,
            Float3 = 3,
            Float4 = 4,
            Int = 5,
            Int2 = 6,
            Int3 = 7,
            Int4 = 8,
            Mat4 = 9,
            Num = 10,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum Usage : int
        {
            Default = 0,
            Immutable = 1,
            Dynamic = 2,
            Stream = 3,
            Num = 4,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum VertexFormat : int
        {
            Invalid = 0,
            Float = 1,
            Float2 = 2,
            Float3 = 3,
            Float4 = 4,
            Byte4 = 5,
            Byte4n = 6,
            Ubyte4 = 7,
            Ubyte4n = 8,
            Short2 = 9,
            Short2n = 10,
            Ushort2n = 11,
            Short4 = 12,
            Short4n = 13,
            Ushort4n = 14,
            Uint10N2 = 15,
            Half2 = 16,
            Half4 = 17,
            Num = 18,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum VertexStep : int
        {
            Default = 0,
            PerVertex = 1,
            PerInstance = 2,
            Num = 3,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "Enum")]
        public enum Wrap : int
        {
            Default = 0,
            Repeat = 1,
            ClampToEdge = 2,
            ClampToBorder = 3,
            MirroredRepeat = 4,
            Num = 5,
            ForceU32 = 2147483647
        }

        [CNode(Kind = "EnumConstant")]
        public const uint INVALIDID = 0;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXCOLORATTACHMENTS = 4;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXMIPMAPS = 16;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXSHADERSTAGEBUFFERS = 8;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXSHADERSTAGEIMAGES = 12;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXSHADERSTAGEUBS = 4;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXTEXTUREARRAYLAYERS = 128;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXUBMEMBERS = 16;

        [CNode(Kind = "EnumConstant")]
        public const uint MAXVERTEXATTRIBUTES = 16;

        [CNode(Kind = "EnumConstant")]
        public const uint NUMINFLIGHTFRAMES = 2;

        [CNode(Kind = "EnumConstant")]
        public const uint NUMSHADERSTAGES = 2;

        #endregion
    }

    public static unsafe partial class Time
    {

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_diff")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong Diff(ulong newTicks, ulong oldTicks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_laptime")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong Laptime(ulong* lastTime);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_ms")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Double Ms(ulong ticks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_now")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong Now();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_ns")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Double Ns(ulong ticks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_round_to_common_refresh_rate")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong RoundToCommonRefreshRate(ulong frameTicks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_sec")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Double Sec(ulong ticks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_setup")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void Setup();

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_since")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ulong Since(ulong startTicks);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "stm_us")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial Double Us(ulong ticks);

        #endregion
    }

    #region Runtime

    public static class Runtime
    {
        [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.ReturnValue)]
        public sealed class CConstAttribute : Attribute
        {
            // marker
        }

        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Enum | AttributeTargets.Field)]
        public sealed class CNodeAttribute : Attribute
        {
            public string Kind { get; set; } = string.Empty;
        }

        /// <summary>
        ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
        ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
        ///     <c>true</c>.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public readonly struct CBool : IEquatable<CBool>
        {
            private readonly byte _value;

            private CBool(bool value)
            {
                _value = Convert.ToByte(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="CBool" />.</returns>
            public static implicit operator CBool(bool value)
            {
                return FromBoolean(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="CBool" />.</returns>
            public static CBool FromBoolean(bool value)
            {
                return new CBool(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="bool" />.</returns>
            public static implicit operator bool(CBool value)
            {
                return ToBoolean(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="bool" />.</returns>
            public static bool ToBoolean(CBool value)
            {
                return Convert.ToBoolean(value._value);
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return ToBoolean(this).ToString();
            }

            /// <inheritdoc />
            public override bool Equals(object? obj)
            {
                return obj is CBool b && Equals(b);
            }

            /// <inheritdoc />
            public bool Equals(CBool other)
            {
                return _value == other._value;
            }

            /// <inheritdoc />
            public override int GetHashCode()
            {
                return _value.GetHashCode();
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CBool" /> to compare.</param>
            /// <param name="right">The second <see cref="CBool" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool operator ==(CBool left, CBool right)
            {
                return left._value == right._value;
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
            /// </summary>
            /// <param name="left">The first <see cref="CBool" /> to compare.</param>
            /// <param name="right">The second <see cref="CBool" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
            public static bool operator !=(CBool left, CBool right)
            {
                return !(left == right);
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CBool" /> to compare.</param>
            /// <param name="right">The second <see cref="CBool" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool Equals(CBool left, CBool right)
            {
                return left._value == right._value;
            }
        }

        /// <summary>
        ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
        ///     an unmanaged context.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
        {
            private readonly byte _value;

            private CChar(byte value)
            {
                _value = Convert.ToByte(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="CChar" />.</returns>
            public static implicit operator CChar(byte value)
            {
                return FromByte(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="CChar" />.</returns>
            public static CChar FromByte(byte value)
            {
                return new CChar(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="byte" />.</returns>
            public static implicit operator byte(CChar value)
            {
                return ToByte(value);
            }

            /// <summary>
            ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
            /// </summary>
            /// <param name="value">The value.</param>
            /// <returns>A <see cref="byte" />.</returns>
            public static byte ToByte(CChar value)
            {
                return value._value;
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return _value.ToString(CultureInfo.InvariantCulture);
            }

            /// <inheritdoc />
            public override bool Equals(object? obj)
            {
                return obj is CChar value && Equals(value);
            }

            /// <inheritdoc />
            public bool Equals(byte other)
            {
                return _value == other;
            }

            /// <inheritdoc />
            public bool Equals(CChar other)
            {
                return _value == other._value;
            }

            /// <inheritdoc />
            public override int GetHashCode()
            {
                return _value.GetHashCode();
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CChar" /> to compare.</param>
            /// <param name="right">The second <see cref="CChar" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool operator ==(CChar left, CChar right)
            {
                return left._value == right._value;
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
            /// </summary>
            /// <param name="left">The first <see cref="CChar" /> to compare.</param>
            /// <param name="right">The second <see cref="CChar" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
            public static bool operator !=(CChar left, CChar right)
            {
                return !(left == right);
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CChar" /> to compare.</param>
            /// <param name="right">The second <see cref="CChar" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool Equals(CChar left, CChar right)
            {
                return left._value == right._value;
            }
        }

        /// <summary>
        ///     A pointer value type of bytes that represent a string; the C type `char*`.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public readonly unsafe struct CString : IEquatable<CString>
        {
            internal readonly nint _pointer;

            /// <summary>
            ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
            /// </summary>
            public bool IsNull => _pointer == 0;

            /// <summary>
            ///     Initializes a new instance of the <see cref="CString" /> struct.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            public CString(byte* value)
            {
                _pointer = (nint)value;
            }

            /// <summary>
            ///     Initializes a new instance of the <see cref="CString" /> struct.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            public CString(nint value)
            {
                _pointer = value;
            }

            /// <summary>
            ///     Initializes a new instance of the <see cref="CString" /> struct.
            /// </summary>
            /// <param name="s">The string value.</param>
            public CString(string s)
            {
                _pointer = FromString(s)._pointer;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CString" />.
            /// </returns>
            public static explicit operator CString(nint value)
            {
                return FromIntPtr(value);
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CString" />.
            /// </returns>
            public static CString FromIntPtr(nint value)
            {
                return new CString(value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CString" />.
            /// </returns>
            public static implicit operator CString(byte* value)
            {
                return From(value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CString" />.
            /// </returns>
            public static CString From(byte* value)
            {
                return new CString((nint)value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
            /// </summary>
            /// <param name="value">The pointer.</param>
            /// <returns>
            ///     The resulting <see cref="IntPtr" />.
            /// </returns>
            public static implicit operator nint(CString value)
            {
                return value._pointer;
            }

            /// <summary>
            ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
            /// </summary>
            /// <param name="value">The pointer.</param>
            /// <returns>
            ///     The resulting <see cref="IntPtr" />.
            /// </returns>
            public static nint ToIntPtr(CString value)
            {
                return value._pointer;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="CString" /> to a <see cref="string" />.
            /// </summary>
            /// <param name="value">The <see cref="CString" />.</param>
            /// <returns>
            ///     The resulting <see cref="string" />.
            /// </returns>
            public static explicit operator string(CString value)
            {
                return ToString(value);
            }

            /// <summary>
            ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
            ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
            /// </summary>
            /// <param name="value">A pointer to the C string.</param>
            /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
            public static string ToString(CString value)
            {
                if (value.IsNull)
                {
                    return string.Empty;
                }

                // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                var result = Marshal.PtrToStringAnsi(value._pointer);

                if (string.IsNullOrEmpty(result))
                {
                    return string.Empty;
                }

                return result;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CString" />.
            /// </summary>
            /// <param name="s">The <see cref="string" />.</param>
            /// <returns>
            ///     The resulting <see cref="CString" />.
            /// </returns>
            public static explicit operator CString(string s)
            {
                return FromString(s);
            }

            /// <summary>
            ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
            ///     <c>0x0</c>) by allocating and copying.
            /// </summary>
            /// <param name="str">The <see cref="string" />.</param>
            /// <returns>A C string pointer.</returns>
            public static CString FromString(string str)
            {
                var pointer = Marshal.StringToHGlobalAnsi(str);
                return new CString(pointer);
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return ToString(this);
            }

            /// <inheritdoc />
            public override bool Equals(object? obj)
            {
                return obj is CString value && Equals(value);
            }

            /// <inheritdoc />
            public bool Equals(CString other)
            {
                return _pointer == other._pointer;
            }

            /// <inheritdoc />
            public override int GetHashCode()
            {
                return _pointer.GetHashCode();
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CString" /> to compare.</param>
            /// <param name="right">The second <see cref="CString" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool operator ==(CString left, CString right)
            {
                return left._pointer == right._pointer;
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
            /// </summary>
            /// <param name="left">The first <see cref="CString" /> to compare.</param>
            /// <param name="right">The second <see cref="CString" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
            public static bool operator !=(CString left, CString right)
            {
                return !(left == right);
            }
        }

        /// <summary>
        ///     Utility methods for interoperability with C style strings in C#.
        /// </summary>
        public static unsafe class CStrings
        {
            /// <summary>
            ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
            ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
            /// </summary>
            /// <remarks>
            ///     <para>Calls <see cref="CString" />.</para>
            /// </remarks>
            /// <param name="values">The strings.</param>
            /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
            public static CString* CStringArray(ReadOnlySpan<string> values)
            {
                var pointerSize = IntPtr.Size;
                var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                for (var i = 0; i < values.Length; ++i)
                {
                    var @string = values[i];
                    var cString = CString.FromString(@string);
                    result[i] = cString;
                }

                return result;
            }

            /// <summary>
            ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
            ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
            /// </summary>
            /// <remarks>
            ///     <para>Calls <see cref="CString" />.</para>
            /// </remarks>
            /// <param name="values">The strings.</param>
            /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
            public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
            {
                var pointerSize = IntPtr.Size;
                var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                for (var i = 0; i < values.Length; ++i)
                {
                    var @string = values[i];
                    var cString = CStringWide.FromString(@string);
                    result[i] = cString;
                }

                return result;
            }
        }

        /// <summary>
        ///     A pointer value type that represents a wide string; C type `wchar_t*`.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public readonly unsafe struct CStringWide : IEquatable<CStringWide>
        {
            internal readonly nint _pointer;

            /// <summary>
            ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
            /// </summary>
            public bool IsNull => _pointer == 0;

            /// <summary>
            ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            public CStringWide(byte* value)
            {
                _pointer = (nint)value;
            }

            /// <summary>
            ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            public CStringWide(nint value)
            {
                _pointer = value;
            }

            /// <summary>
            ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
            /// </summary>
            /// <param name="s">The string value.</param>
            public CStringWide(string s)
            {
                _pointer = FromString(s)._pointer;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CStringWide" />.
            /// </returns>
            public static explicit operator CStringWide(nint value)
            {
                return FromIntPtr(value);
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CStringWide" />.
            /// </returns>
            public static CStringWide FromIntPtr(nint value)
            {
                return new CStringWide(value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CStringWide" />.
            /// </returns>
            public static implicit operator CStringWide(byte* value)
            {
                return From(value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
            /// </summary>
            /// <param name="value">The pointer value.</param>
            /// <returns>
            ///     The resulting <see cref="CStringWide" />.
            /// </returns>
            public static CStringWide From(byte* value)
            {
                return new CStringWide((nint)value);
            }

            /// <summary>
            ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
            /// </summary>
            /// <param name="value">The pointer.</param>
            /// <returns>
            ///     The resulting <see cref="IntPtr" />.
            /// </returns>
            public static implicit operator nint(CStringWide value)
            {
                return value._pointer;
            }

            /// <summary>
            ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
            /// </summary>
            /// <param name="value">The pointer.</param>
            /// <returns>
            ///     The resulting <see cref="IntPtr" />.
            /// </returns>
            public static nint ToIntPtr(CStringWide value)
            {
                return value._pointer;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
            /// </summary>
            /// <param name="value">The <see cref="CStringWide" />.</param>
            /// <returns>
            ///     The resulting <see cref="string" />.
            /// </returns>
            public static explicit operator string(CStringWide value)
            {
                return ToString(value);
            }

            /// <summary>
            ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
            ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
            /// </summary>
            /// <param name="value">A pointer to the C string.</param>
            /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
            public static string ToString(CStringWide value)
            {
                if (value.IsNull)
                {
                    return string.Empty;
                }

                // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                var result = Marshal.PtrToStringUni(value._pointer);

                if (string.IsNullOrEmpty(result))
                {
                    return string.Empty;
                }

                return result;
            }

            /// <summary>
            ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
            /// </summary>
            /// <param name="s">The <see cref="string" />.</param>
            /// <returns>
            ///     The resulting <see cref="CStringWide" />.
            /// </returns>
            public static explicit operator CStringWide(string s)
            {
                return FromString(s);
            }

            /// <summary>
            ///     Converts a C string pointer (one dimensional byte array terminated by a
            ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
            /// </summary>
            /// <param name="str">The <see cref="string" />.</param>
            /// <returns>A C string pointer.</returns>
            public static CStringWide FromString(string str)
            {
                var pointer = Marshal.StringToHGlobalUni(str);
                return new CStringWide(pointer);
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return ToString(this);
            }

            /// <inheritdoc />
            public override bool Equals(object? obj)
            {
                return obj is CStringWide value && Equals(value);
            }

            /// <inheritdoc />
            public bool Equals(CStringWide other)
            {
                return _pointer == other._pointer;
            }

            /// <inheritdoc />
            public override int GetHashCode()
            {
                return _pointer.GetHashCode();
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
            /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool operator ==(CStringWide left, CStringWide right)
            {
                return left._pointer == right._pointer;
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
            /// </summary>
            /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
            /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
            public static bool operator !=(CStringWide left, CStringWide right)
            {
                return !(left == right);
            }

            /// <summary>
            ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
            /// </summary>
            /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
            /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
            /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
            public static bool Equals(CStringWide left, CStringWide right)
            {
                return left._pointer == right._pointer;
            }
        }
    }

    #endregion
}