
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs (v1.3.17.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class sokol
{
    private const string LibraryName = "sokol";

    // Function @ sokol_args.h:302:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CString8U sargs_value_at(int index);

    // Function @ sokol_args.h:300:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CString8U sargs_key_at(int index);

    // Function @ sokol_args.h:298:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern int sargs_num_args();

    // Function @ sokol_args.h:296:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern int sargs_find(CString8U key);

    // Function @ sokol_args.h:294:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CBool sargs_boolean(CString8U key);

    // Function @ sokol_args.h:292:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CBool sargs_equals(CString8U key, CString8U val);

    // Function @ sokol_args.h:290:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CString8U sargs_value_def(CString8U key, CString8U def);

    // Function @ sokol_args.h:288:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CString8U sargs_value(CString8U key);

    // Function @ sokol_args.h:286:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CBool sargs_exists(CString8U key);

    // Function @ sokol_args.h:284:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern CBool sargs_isvalid();

    // Function @ sokol_args.h:282:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern void sargs_shutdown();

    // Function @ sokol_args.h:280:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [DllImport(LibraryName)]
    public static extern void sargs_setup(sargs_desc* desc);

    // Function @ sokol_time.h:135:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern double stm_ns(ulong ticks);

    // Function @ sokol_time.h:134:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern double stm_us(ulong ticks);

    // Function @ sokol_time.h:133:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern double stm_ms(ulong ticks);

    // Function @ sokol_time.h:132:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern double stm_sec(ulong ticks);

    // Function @ sokol_time.h:131:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern ulong stm_round_to_common_refresh_rate(ulong frame_ticks);

    // Function @ sokol_time.h:130:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern ulong stm_laptime(ulong* last_time);

    // Function @ sokol_time.h:129:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern ulong stm_since(ulong start_ticks);

    // Function @ sokol_time.h:128:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern ulong stm_diff(ulong new_ticks, ulong old_ticks);

    // Function @ sokol_time.h:127:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern ulong stm_now();

    // Function @ sokol_time.h:126:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_time.h)
    [DllImport(LibraryName)]
    public static extern void stm_setup();

    // Function @ sokol_fetch.h:949:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_continue(sfetch_handle_t h);

    // Function @ sokol_fetch.h:947:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_pause(sfetch_handle_t h);

    // Function @ sokol_fetch.h:945:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_cancel(sfetch_handle_t h);

    // Function @ sokol_fetch.h:943:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void* sfetch_unbind_buffer(sfetch_handle_t h);

    // Function @ sokol_fetch.h:941:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_bind_buffer(sfetch_handle_t h, void* buffer_ptr, uint buffer_size);

    // Function @ sokol_fetch.h:938:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_dowork();

    // Function @ sokol_fetch.h:936:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern CBool sfetch_handle_valid(sfetch_handle_t h);

    // Function @ sokol_fetch.h:934:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern sfetch_handle_t sfetch_send(sfetch_request_t* request);

    // Function @ sokol_fetch.h:931:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern int sfetch_max_path();

    // Function @ sokol_fetch.h:929:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern int sfetch_max_userdata_bytes();

    // Function @ sokol_fetch.h:927:36 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern sfetch_desc_t sfetch_desc();

    // Function @ sokol_fetch.h:925:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern CBool sfetch_valid();

    // Function @ sokol_fetch.h:923:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_shutdown();

    // Function @ sokol_fetch.h:921:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [DllImport(LibraryName)]
    public static extern void sfetch_setup(sfetch_desc_t* desc);

    // Function @ sokol_audio.h:445:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern int saudio_push(float* frames, int num_frames);

    // Function @ sokol_audio.h:443:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern int saudio_expect();

    // Function @ sokol_audio.h:441:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern int saudio_channels();

    // Function @ sokol_audio.h:439:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern int saudio_buffer_frames();

    // Function @ sokol_audio.h:437:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern int saudio_sample_rate();

    // Function @ sokol_audio.h:435:34 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern saudio_desc saudio_query_desc();

    // Function @ sokol_audio.h:433:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern void* saudio_userdata();

    // Function @ sokol_audio.h:431:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern CBool saudio_isvalid();

    // Function @ sokol_audio.h:429:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern void saudio_shutdown();

    // Function @ sokol_audio.h:427:27 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [DllImport(LibraryName)]
    public static extern void saudio_setup(saudio_desc* desc);

    // Function @ sokol_glue.h:97:37 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_glue.h)
    [DllImport(LibraryName)]
    public static extern sg_context_desc sapp_sgcontext();

    // Function @ sokol_gfx.h:2378:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void* sg_mtl_render_command_encoder();

    // Function @ sokol_gfx.h:2375:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void* sg_mtl_device();

    // Function @ sokol_gfx.h:2372:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void* sg_d3d11_device();

    // Function @ sokol_gfx.h:2363:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_discard_context(sg_context ctx_id);

    // Function @ sokol_gfx.h:2362:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_activate_context(sg_context ctx_id);

    // Function @ sokol_gfx.h:2361:31 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_context sg_setup_context();

    // Function @ sokol_gfx.h:2358:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_fail_pass(sg_pass pass_id);

    // Function @ sokol_gfx.h:2357:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_fail_pipeline(sg_pipeline pip_id);

    // Function @ sokol_gfx.h:2356:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_fail_shader(sg_shader shd_id);

    // Function @ sokol_gfx.h:2355:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_fail_image(sg_image img_id);

    // Function @ sokol_gfx.h:2354:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_fail_buffer(sg_buffer buf_id);

    // Function @ sokol_gfx.h:2353:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_uninit_pass(sg_pass pass_id);

    // Function @ sokol_gfx.h:2352:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_uninit_pipeline(sg_pipeline pip_id);

    // Function @ sokol_gfx.h:2351:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_uninit_shader(sg_shader shd_id);

    // Function @ sokol_gfx.h:2350:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_uninit_image(sg_image img_id);

    // Function @ sokol_gfx.h:2349:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_uninit_buffer(sg_buffer buf_id);

    // Function @ sokol_gfx.h:2348:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_init_pass(sg_pass pass_id, sg_pass_desc* desc);

    // Function @ sokol_gfx.h:2347:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_init_pipeline(sg_pipeline pip_id, sg_pipeline_desc* desc);

    // Function @ sokol_gfx.h:2346:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_init_shader(sg_shader shd_id, sg_shader_desc* desc);

    // Function @ sokol_gfx.h:2345:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_init_image(sg_image img_id, sg_image_desc* desc);

    // Function @ sokol_gfx.h:2344:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_init_buffer(sg_buffer buf_id, sg_buffer_desc* desc);

    // Function @ sokol_gfx.h:2343:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_dealloc_pass(sg_pass pass_id);

    // Function @ sokol_gfx.h:2342:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_dealloc_pipeline(sg_pipeline pip_id);

    // Function @ sokol_gfx.h:2341:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_dealloc_shader(sg_shader shd_id);

    // Function @ sokol_gfx.h:2340:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_dealloc_image(sg_image img_id);

    // Function @ sokol_gfx.h:2339:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_dealloc_buffer(sg_buffer buf_id);

    // Function @ sokol_gfx.h:2338:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pass sg_alloc_pass();

    // Function @ sokol_gfx.h:2337:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pipeline sg_alloc_pipeline();

    // Function @ sokol_gfx.h:2336:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_shader sg_alloc_shader();

    // Function @ sokol_gfx.h:2335:29 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_image sg_alloc_image();

    // Function @ sokol_gfx.h:2334:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_buffer sg_alloc_buffer();

    // Function @ sokol_gfx.h:2331:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pass_desc sg_query_pass_defaults(sg_pass_desc* desc);

    // Function @ sokol_gfx.h:2330:37 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pipeline_desc sg_query_pipeline_defaults(sg_pipeline_desc* desc);

    // Function @ sokol_gfx.h:2329:35 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_shader_desc sg_query_shader_defaults(sg_shader_desc* desc);

    // Function @ sokol_gfx.h:2328:34 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_image_desc sg_query_image_defaults(sg_image_desc* desc);

    // Function @ sokol_gfx.h:2327:35 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_buffer_desc sg_query_buffer_defaults(sg_buffer_desc* desc);

    // Function @ sokol_gfx.h:2325:33 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pass_info sg_query_pass_info(sg_pass pass);

    // Function @ sokol_gfx.h:2324:37 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pipeline_info sg_query_pipeline_info(sg_pipeline pip);

    // Function @ sokol_gfx.h:2323:35 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_shader_info sg_query_shader_info(sg_shader shd);

    // Function @ sokol_gfx.h:2322:34 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_image_info sg_query_image_info(sg_image img);

    // Function @ sokol_gfx.h:2321:35 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_buffer_info sg_query_buffer_info(sg_buffer buf);

    // Function @ sokol_gfx.h:2319:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_resource_state sg_query_pass_state(sg_pass pass);

    // Function @ sokol_gfx.h:2318:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_resource_state sg_query_pipeline_state(sg_pipeline pip);

    // Function @ sokol_gfx.h:2317:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_resource_state sg_query_shader_state(sg_shader shd);

    // Function @ sokol_gfx.h:2316:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_resource_state sg_query_image_state(sg_image img);

    // Function @ sokol_gfx.h:2315:38 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_resource_state sg_query_buffer_state(sg_buffer buf);

    // Function @ sokol_gfx.h:2313:40 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pixelformat_info sg_query_pixelformat(sg_pixel_format fmt);

    // Function @ sokol_gfx.h:2312:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_limits sg_query_limits();

    // Function @ sokol_gfx.h:2311:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_features sg_query_features();

    // Function @ sokol_gfx.h:2310:31 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_backend sg_query_backend();

    // Function @ sokol_gfx.h:2309:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_desc sg_query_desc();

    // Function @ sokol_gfx.h:2306:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_commit();

    // Function @ sokol_gfx.h:2305:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_end_pass();

    // Function @ sokol_gfx.h:2304:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_draw(int base_element, int num_elements, int num_instances);

    // Function @ sokol_gfx.h:2303:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_uniforms(sg_shader_stage stage, int ub_index, sg_range* data);

    // Function @ sokol_gfx.h:2302:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_bindings(sg_bindings* bindings);

    // Function @ sokol_gfx.h:2301:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_pipeline(sg_pipeline pip);

    // Function @ sokol_gfx.h:2300:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_scissor_rectf(float x, float y, float width, float height, CBool origin_top_left);

    // Function @ sokol_gfx.h:2299:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_scissor_rect(int x, int y, int width, int height, CBool origin_top_left);

    // Function @ sokol_gfx.h:2298:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_viewportf(float x, float y, float width, float height, CBool origin_top_left);

    // Function @ sokol_gfx.h:2297:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_apply_viewport(int x, int y, int width, int height, CBool origin_top_left);

    // Function @ sokol_gfx.h:2296:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_begin_pass(sg_pass pass, sg_pass_action* pass_action);

    // Function @ sokol_gfx.h:2295:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_begin_default_passf(sg_pass_action* pass_action, float width, float height);

    // Function @ sokol_gfx.h:2294:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_begin_default_pass(sg_pass_action* pass_action, int width, int height);

    // Function @ sokol_gfx.h:2291:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_query_buffer_overflow(sg_buffer buf);

    // Function @ sokol_gfx.h:2290:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern int sg_append_buffer(sg_buffer buf, sg_range* data);

    // Function @ sokol_gfx.h:2289:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_update_image(sg_image img, sg_image_data* data);

    // Function @ sokol_gfx.h:2288:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_update_buffer(sg_buffer buf, sg_range* data);

    // Function @ sokol_gfx.h:2287:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_destroy_pass(sg_pass pass);

    // Function @ sokol_gfx.h:2286:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_destroy_pipeline(sg_pipeline pip);

    // Function @ sokol_gfx.h:2285:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_destroy_shader(sg_shader shd);

    // Function @ sokol_gfx.h:2284:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_destroy_image(sg_image img);

    // Function @ sokol_gfx.h:2283:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_destroy_buffer(sg_buffer buf);

    // Function @ sokol_gfx.h:2282:28 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pass sg_make_pass(sg_pass_desc* desc);

    // Function @ sokol_gfx.h:2281:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_pipeline sg_make_pipeline(sg_pipeline_desc* desc);

    // Function @ sokol_gfx.h:2280:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_shader sg_make_shader(sg_shader_desc* desc);

    // Function @ sokol_gfx.h:2279:29 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_image sg_make_image(sg_image_desc* desc);

    // Function @ sokol_gfx.h:2278:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_buffer sg_make_buffer(sg_buffer_desc* desc);

    // Function @ sokol_gfx.h:2275:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_pop_debug_group();

    // Function @ sokol_gfx.h:2274:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_push_debug_group(CString8U name);

    // Function @ sokol_gfx.h:2273:35 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern sg_trace_hooks sg_install_trace_hooks(sg_trace_hooks* trace_hooks);

    // Function @ sokol_gfx.h:2272:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_reset_state_cache();

    // Function @ sokol_gfx.h:2271:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern CBool sg_isvalid();

    // Function @ sokol_gfx.h:2270:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_shutdown();

    // Function @ sokol_gfx.h:2269:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [DllImport(LibraryName)]
    public static extern void sg_setup(sg_desc* desc);

    // Function @ sokol_app.h:1511:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_android_get_native_activity();

    // Function @ sokol_app.h:1508:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_wgpu_get_depth_stencil_view();

    // Function @ sokol_app.h:1506:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_wgpu_get_resolve_view();

    // Function @ sokol_app.h:1504:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_wgpu_get_render_view();

    // Function @ sokol_app.h:1502:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_wgpu_get_device();

    // Function @ sokol_app.h:1499:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_win32_get_hwnd();

    // Function @ sokol_app.h:1497:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_d3d11_get_depth_stencil_view();

    // Function @ sokol_app.h:1495:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_d3d11_get_render_target_view();

    // Function @ sokol_app.h:1493:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_d3d11_get_swap_chain();

    // Function @ sokol_app.h:1491:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_d3d11_get_device_context();

    // Function @ sokol_app.h:1489:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_d3d11_get_device();

    // Function @ sokol_app.h:1486:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_ios_get_window();

    // Function @ sokol_app.h:1484:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_macos_get_window();

    // Function @ sokol_app.h:1482:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_metal_get_drawable();

    // Function @ sokol_app.h:1480:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_metal_get_renderpass_descriptor();

    // Function @ sokol_app.h:1478:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_metal_get_device();

    // Function @ sokol_app.h:1475:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_html5_fetch_dropped_file(sapp_html5_fetch_request* request);

    // Function @ sokol_app.h:1473:29 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern uint sapp_html5_get_dropped_file_size(int index);

    // Function @ sokol_app.h:1471:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_html5_ask_leave_site(CBool ask);

    // Function @ sokol_app.h:1468:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_gles2();

    // Function @ sokol_app.h:1465:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_run(sapp_desc* desc);

    // Function @ sokol_app.h:1462:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CString8U sapp_get_dropped_file_path(int index);

    // Function @ sokol_app.h:1460:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_get_num_dropped_files();

    // Function @ sokol_app.h:1458:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_set_icon(sapp_icon_desc* icon_desc);

    // Function @ sokol_app.h:1456:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_set_window_title(CString8U str);

    // Function @ sokol_app.h:1454:32 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CString8U sapp_get_clipboard_string();

    // Function @ sokol_app.h:1452:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_set_clipboard_string(CString8U str);

    // Function @ sokol_app.h:1450:29 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern ulong sapp_frame_count();

    // Function @ sokol_app.h:1448:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_consume_event();

    // Function @ sokol_app.h:1446:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_quit();

    // Function @ sokol_app.h:1444:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_cancel_quit();

    // Function @ sokol_app.h:1442:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_request_quit();

    // Function @ sokol_app.h:1440:30 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern sapp_desc sapp_query_desc();

    // Function @ sokol_app.h:1438:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void* sapp_userdata();

    // Function @ sokol_app.h:1436:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_mouse_locked();

    // Function @ sokol_app.h:1434:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_lock_mouse(CBool @lock);

    // Function @ sokol_app.h:1432:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_mouse_shown();

    // Function @ sokol_app.h:1430:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_show_mouse(CBool show);

    // Function @ sokol_app.h:1428:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_toggle_fullscreen();

    // Function @ sokol_app.h:1426:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_is_fullscreen();

    // Function @ sokol_app.h:1424:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_keyboard_shown();

    // Function @ sokol_app.h:1422:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern void sapp_show_keyboard(CBool show);

    // Function @ sokol_app.h:1420:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern float sapp_dpi_scale();

    // Function @ sokol_app.h:1418:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_high_dpi();

    // Function @ sokol_app.h:1416:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_sample_count();

    // Function @ sokol_app.h:1414:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_depth_format();

    // Function @ sokol_app.h:1412:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_color_format();

    // Function @ sokol_app.h:1410:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern float sapp_heightf();

    // Function @ sokol_app.h:1408:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_height();

    // Function @ sokol_app.h:1406:26 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern float sapp_widthf();

    // Function @ sokol_app.h:1404:24 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern int sapp_width();

    // Function @ sokol_app.h:1402:25 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern CBool sapp_isvalid();

    // Function @ sokol_app.h:1399:18 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [DllImport(LibraryName)]
    public static extern sapp_desc sokol_main(int argc, CString8U* argv);

    // FunctionPointer @ sokol_fetch.h:904:15 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct sfetch_callback_t
    {
        public delegate* unmanaged<sfetch_response_t*, void> Pointer;
    }

    // FunctionPointer @ sokol_audio.h:422:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_FloatPtr_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<float*, int, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_audio.h:421:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_FloatPtr_Int_Int_Void
    {
        public delegate* unmanaged<float*, int, int, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2235:19 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_VoidPtr_VoidPtr
    {
        public delegate* unmanaged<void*, void*> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2234:19 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_VoidPtr
    {
        public delegate* unmanaged<void*> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2027:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_CString8U_VoidPtr_Void
    {
        public delegate* unmanaged<CString8U, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2016:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pass_Sg_pass_descPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pass, sg_pass_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2015:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pipeline_Sg_pipeline_descPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pipeline, sg_pipeline_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2014:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_shader_Sg_shader_descPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_shader, sg_shader_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2013:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_image_Sg_image_descPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_image, sg_image_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2012:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_buffer_Sg_buffer_descPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_buffer, sg_buffer_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1999:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Int_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<int, int, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1998:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_shader_stage_Int_Sg_rangePtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_shader_stage, int, sg_range*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1997:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_bindingsPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_bindings*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1994:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Int_Int_Int_Int_CBool_VoidPtr_Void
    {
        public delegate* unmanaged<int, int, int, int, CBool, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1993:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pass_Sg_pass_actionPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pass, sg_pass_action*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1992:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pass_actionPtr_Int_Int_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pass_action*, int, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1991:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_buffer_Sg_rangePtr_Int_VoidPtr_Void
    {
        public delegate* unmanaged<sg_buffer, sg_range*, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1990:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_image_Sg_image_dataPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_image, sg_image_data*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1989:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_buffer_Sg_rangePtr_VoidPtr_Void
    {
        public delegate* unmanaged<sg_buffer, sg_range*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1988:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pass_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1987:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1986:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_shader_VoidPtr_Void
    {
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1985:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_image_VoidPtr_Void
    {
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1984:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_buffer_VoidPtr_Void
    {
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1983:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pass_descPtr_Sg_pass_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pass_desc*, sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1982:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_pipeline_descPtr_Sg_pipeline_VoidPtr_Void
    {
        public delegate* unmanaged<sg_pipeline_desc*, sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1981:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_shader_descPtr_Sg_shader_VoidPtr_Void
    {
        public delegate* unmanaged<sg_shader_desc*, sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1980:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_image_descPtr_Sg_image_VoidPtr_Void
    {
        public delegate* unmanaged<sg_image_desc*, sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1979:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sg_buffer_descPtr_Sg_buffer_VoidPtr_Void
    {
        public delegate* unmanaged<sg_buffer_desc*, sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1978:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1392:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sapp_html5_fetch_responsePtr_Void
    {
        public delegate* unmanaged<sapp_html5_fetch_response*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1339:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sapp_eventPtr_VoidPtr_Void
    {
        public delegate* unmanaged<sapp_event*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1333:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_CString8U_Void
    {
        public delegate* unmanaged<CString8U, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1332:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Sapp_eventPtr_Void
    {
        public delegate* unmanaged<sapp_event*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1329:12 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SOKOL_Void
    {
        public delegate* unmanaged<void> Pointer;
    }

    // Struct @ sokol_args.h:277:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_args.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sargs_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int argc;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U* argv;

        [FieldOffset(16)] // size = 4, padding = 0
        public int max_args;

        [FieldOffset(20)] // size = 4, padding = 0
        public int buf_size;
    }

    // Struct @ sokol_fetch.h:870:49 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sfetch_handle_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_fetch.h:918:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct sfetch_request_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint channel;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U path;

        [FieldOffset(16)] // size = 8, padding = 0
        public sfetch_callback_t callback;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(32)] // size = 4, padding = 0
        public uint buffer_size;

        [FieldOffset(36)] // size = 4, padding = 0
        public uint chunk_size;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* user_data_ptr;

        [FieldOffset(48)] // size = 4, padding = 0
        public uint user_data_size;

        [FieldOffset(52)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Struct @ sokol_fetch.h:901:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct sfetch_response_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sfetch_handle_t handle;

        [FieldOffset(4)] // size = 1, padding = 0
        public CBool dispatched;

        [FieldOffset(5)] // size = 1, padding = 0
        public CBool fetched;

        [FieldOffset(6)] // size = 1, padding = 0
        public CBool paused;

        [FieldOffset(7)] // size = 1, padding = 0
        public CBool finished;

        [FieldOffset(8)] // size = 1, padding = 0
        public CBool failed;

        [FieldOffset(9)] // size = 1, padding = 2
        public CBool cancelled;

        [FieldOffset(12)] // size = 4, padding = 0
        public sfetch_error_t error_code;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint channel;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint lane;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString8U path;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* user_data;

        [FieldOffset(40)] // size = 4, padding = 0
        public uint fetched_offset;

        [FieldOffset(44)] // size = 4, padding = 0
        public uint fetched_size;

        [FieldOffset(48)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(56)] // size = 4, padding = 4
        public uint buffer_size;
    }

    // Struct @ sokol_fetch.h:867:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct sfetch_desc_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint max_requests;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint num_channels;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint num_lanes;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Struct @ sokol_audio.h:424:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct saudio_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int sample_rate;

        [FieldOffset(4)] // size = 4, padding = 0
        public int num_channels;

        [FieldOffset(8)] // size = 4, padding = 0
        public int buffer_frames;

        [FieldOffset(12)] // size = 4, padding = 0
        public int packet_frames;

        [FieldOffset(16)] // size = 4, padding = 4
        public int num_packets;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_FloatPtr_Int_Int_Void stream_cb;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_FloatPtr_Int_Int_VoidPtr_Void stream_userdata_cb;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_gfx.h:2251:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 184, Pack = 8)]
    public struct sg_context_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_pixel_format color_format;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_pixel_format depth_format;

        [FieldOffset(8)] // size = 4, padding = 0
        public int sample_count;

        [FieldOffset(12)] // size = 1, padding = 3
        public sg_gl_context_desc gl;

        [FieldOffset(16)] // size = 48, padding = 0
        public sg_metal_context_desc metal;

        [FieldOffset(64)] // size = 56, padding = 0
        public sg_d3d11_context_desc d3d11;

        [FieldOffset(120)] // size = 64, padding = 0
        public sg_wgpu_context_desc wgpu;
    }

    // Struct @ sokol_gfx.h:2241:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct sg_wgpu_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr render_view_cb;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr render_view_userdata_cb;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr resolve_view_cb;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr resolve_view_userdata_cb;

        [FieldOffset(40)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr depth_stencil_view_cb;

        [FieldOffset(48)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr depth_stencil_view_userdata_cb;

        [FieldOffset(56)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_gfx.h:2230:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct sg_d3d11_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 0
        public void* device_context;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr render_target_view_cb;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr render_target_view_userdata_cb;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr depth_stencil_view_cb;

        [FieldOffset(40)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr depth_stencil_view_userdata_cb;

        [FieldOffset(48)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_gfx.h:2220:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct sg_metal_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr renderpass_descriptor_cb;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr renderpass_descriptor_userdata_cb;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr drawable_cb;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_VoidPtr drawable_userdata_cb;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_gfx.h:2211:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
    public struct sg_gl_context_desc
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public CBool force_gles2;
    }

    // Struct @ sokol_gfx.h:633:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_context
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:632:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_pass
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:631:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_pipeline
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:630:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_shader
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:629:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_image
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:628:45 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_buffer
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_gfx.h:1962:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct sg_pass_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 48, padding = 0
        public fixed uint _color_attachments[48 / 4]; // sg_pass_attachment_desc[4]

        public Span<sg_pass_attachment_desc> color_attachments
        {
            get
            {
                fixed (sg_pass_desc* @this = &this)
                {
                    var pointer = &@this->_color_attachments[0];
                    var span = new Span<sg_pass_attachment_desc>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(52)] // size = 12, padding = 0
        public sg_pass_attachment_desc depth_stencil_attachment;

        [FieldOffset(64)] // size = 8, padding = 0
        public CString8U label;

        [FieldOffset(72)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1954:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pass_attachment_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_image image;

        [FieldOffset(4)] // size = 4, padding = 0
        public int mip_level;

        [FieldOffset(8)] // size = 4, padding = 0
        public int slice;
    }

    // Struct @ sokol_gfx.h:1926:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 568, Pack = 8)]
    public struct sg_pipeline_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_shader shader;

        [FieldOffset(8)] // size = 288, padding = 0
        public sg_layout_desc layout;

        [FieldOffset(296)] // size = 24, padding = 0
        public sg_depth_state depth;

        [FieldOffset(320)] // size = 40, padding = 0
        public sg_stencil_state stencil;

        [FieldOffset(360)] // size = 4, padding = 0
        public int color_count;

        [FieldOffset(364)] // size = 144, padding = 0
        public fixed uint _colors[144 / 4]; // sg_color_state[4]

        public Span<sg_color_state> colors
        {
            get
            {
                fixed (sg_pipeline_desc* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<sg_color_state>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(508)] // size = 4, padding = 0
        public sg_primitive_type primitive_type;

        [FieldOffset(512)] // size = 4, padding = 0
        public sg_index_type index_type;

        [FieldOffset(516)] // size = 4, padding = 0
        public sg_cull_mode cull_mode;

        [FieldOffset(520)] // size = 4, padding = 0
        public sg_face_winding face_winding;

        [FieldOffset(524)] // size = 4, padding = 0
        public int sample_count;

        [FieldOffset(528)] // size = 16, padding = 0
        public Rgba32F blend_color;

        [FieldOffset(544)] // size = 1, padding = 7
        public CBool alpha_to_coverage_enabled;

        [FieldOffset(552)] // size = 8, padding = 0
        public CString8U label;

        [FieldOffset(560)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1907:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct sg_color_state
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_pixel_format pixel_format;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_color_mask write_mask;

        [FieldOffset(8)] // size = 28, padding = 0
        public sg_blend_state blend;
    }

    // Struct @ sokol_gfx.h:1901:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct sg_blend_state
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool enabled;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_blend_factor src_factor_rgb;

        [FieldOffset(8)] // size = 4, padding = 0
        public sg_blend_factor dst_factor_rgb;

        [FieldOffset(12)] // size = 4, padding = 0
        public sg_blend_op op_rgb;

        [FieldOffset(16)] // size = 4, padding = 0
        public sg_blend_factor src_factor_alpha;

        [FieldOffset(20)] // size = 4, padding = 0
        public sg_blend_factor dst_factor_alpha;

        [FieldOffset(24)] // size = 4, padding = 0
        public sg_blend_op op_alpha;
    }

    // Struct @ sokol_gfx.h:1882:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct sg_stencil_state
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool enabled;

        [FieldOffset(4)] // size = 16, padding = 0
        public sg_stencil_face_state front;

        [FieldOffset(20)] // size = 16, padding = 0
        public sg_stencil_face_state back;

        [FieldOffset(36)] // size = 1, padding = 0
        public byte read_mask;

        [FieldOffset(37)] // size = 1, padding = 0
        public byte write_mask;

        [FieldOffset(38)] // size = 1, padding = 1
        public byte @ref;
    }

    // Struct @ sokol_gfx.h:1873:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct sg_stencil_face_state
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_compare_func compare;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_stencil_op fail_op;

        [FieldOffset(8)] // size = 4, padding = 0
        public sg_stencil_op depth_fail_op;

        [FieldOffset(12)] // size = 4, padding = 0
        public sg_stencil_op pass_op;
    }

    // Struct @ sokol_gfx.h:1891:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct sg_depth_state
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_pixel_format pixel_format;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_compare_func compare;

        [FieldOffset(8)] // size = 1, padding = 3
        public CBool write_enabled;

        [FieldOffset(12)] // size = 4, padding = 0
        public float bias;

        [FieldOffset(16)] // size = 4, padding = 0
        public float bias_slope_scale;

        [FieldOffset(20)] // size = 4, padding = 0
        public float bias_clamp;
    }

    // Struct @ sokol_gfx.h:1866:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 4)]
    public struct sg_layout_desc
    {
        [FieldOffset(0)] // size = 96, padding = 0
        public fixed uint _buffers[96 / 4]; // sg_buffer_layout_desc[8]

        public Span<sg_buffer_layout_desc> buffers
        {
            get
            {
                fixed (sg_layout_desc* @this = &this)
                {
                    var pointer = &@this->_buffers[0];
                    var span = new Span<sg_buffer_layout_desc>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(96)] // size = 192, padding = 0
        public fixed uint _attrs[192 / 4]; // sg_vertex_attr_desc[16]

        public Span<sg_vertex_attr_desc> attrs
        {
            get
            {
                fixed (sg_layout_desc* @this = &this)
                {
                    var pointer = &@this->_attrs[0];
                    var span = new Span<sg_vertex_attr_desc>(pointer, 16);
                    return span;
                }
            }
        }
    }

    // Struct @ sokol_gfx.h:1861:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_vertex_attr_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int buffer_index;

        [FieldOffset(4)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(8)] // size = 4, padding = 0
        public sg_vertex_format format;
    }

    // Struct @ sokol_gfx.h:1852:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_buffer_layout_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int stride;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_vertex_step step_func;

        [FieldOffset(8)] // size = 4, padding = 0
        public int step_rate;
    }

    // Struct @ sokol_gfx.h:1774:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 2984, Pack = 8)]
    public struct sg_shader_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(8)] // size = 384, padding = 0
        public fixed ulong _attrs[384 / 8]; // sg_shader_attr_desc[16]

        public Span<sg_shader_attr_desc> attrs
        {
            get
            {
                fixed (sg_shader_desc* @this = &this)
                {
                    var pointer = &@this->_attrs[0];
                    var span = new Span<sg_shader_attr_desc>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(392)] // size = 1288, padding = 0
        public sg_shader_stage_desc vs;

        [FieldOffset(1680)] // size = 1288, padding = 0
        public sg_shader_stage_desc fs;

        [FieldOffset(2968)] // size = 8, padding = 0
        public CString8U label;

        [FieldOffset(2976)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1765:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 1288, Pack = 8)]
    public struct sg_shader_stage_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U source;

        [FieldOffset(8)] // size = 16, padding = 0
        public sg_range bytecode;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString8U entry;

        [FieldOffset(32)] // size = 8, padding = 0
        public CString8U d3d11_target;

        [FieldOffset(40)] // size = 1056, padding = 0
        public fixed ulong _uniform_blocks[1056 / 8]; // sg_shader_uniform_block_desc[4]

        public Span<sg_shader_uniform_block_desc> uniform_blocks
        {
            get
            {
                fixed (sg_shader_stage_desc* @this = &this)
                {
                    var pointer = &@this->_uniform_blocks[0];
                    var span = new Span<sg_shader_uniform_block_desc>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(1096)] // size = 192, padding = 0
        public fixed ulong _images[192 / 8]; // sg_shader_image_desc[12]

        public Span<sg_shader_image_desc> images
        {
            get
            {
                fixed (sg_shader_stage_desc* @this = &this)
                {
                    var pointer = &@this->_images[0];
                    var span = new Span<sg_shader_image_desc>(pointer, 12);
                    return span;
                }
            }
        }
    }

    // Struct @ sokol_gfx.h:1756:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_shader_image_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 4, padding = 0
        public sg_image_type image_type;

        [FieldOffset(12)] // size = 4, padding = 0
        public sg_sampler_type sampler_type;
    }

    // Struct @ sokol_gfx.h:1750:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
    public struct sg_shader_uniform_block_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong size;

        [FieldOffset(8)] // size = 256, padding = 0
        public fixed ulong _uniforms[256 / 8]; // sg_shader_uniform_desc[16]

        public Span<sg_shader_uniform_desc> uniforms
        {
            get
            {
                fixed (sg_shader_uniform_block_desc* @this = &this)
                {
                    var pointer = &@this->_uniforms[0];
                    var span = new Span<sg_shader_uniform_desc>(pointer, 16);
                    return span;
                }
            }
        }
    }

    // Struct @ sokol_gfx.h:1745:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_shader_uniform_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 4, padding = 0
        public sg_uniform_type type;

        [FieldOffset(12)] // size = 4, padding = 0
        public int array_count;
    }

    // Struct @ sokol_gfx.h:645:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_range
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* ptr;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong size;
    }

    // Struct @ sokol_gfx.h:1739:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sg_shader_attr_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U sem_name;

        [FieldOffset(16)] // size = 4, padding = 4
        public int sem_index;
    }

    // Struct @ sokol_gfx.h:1699:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 1688, Pack = 8)]
    public struct sg_image_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public sg_image_type type;

        [FieldOffset(8)] // size = 1, padding = 3
        public CBool render_target;

        [FieldOffset(12)] // size = 4, padding = 0
        public int width;

        [FieldOffset(16)] // size = 4, padding = 0
        public int height;

        [FieldOffset(20)] // size = 4, padding = 0
        public int num_slices;

        [FieldOffset(24)] // size = 4, padding = 0
        public int num_mipmaps;

        [FieldOffset(28)] // size = 4, padding = 0
        public sg_usage usage;

        [FieldOffset(32)] // size = 4, padding = 0
        public sg_pixel_format pixel_format;

        [FieldOffset(36)] // size = 4, padding = 0
        public int sample_count;

        [FieldOffset(40)] // size = 4, padding = 0
        public sg_filter min_filter;

        [FieldOffset(44)] // size = 4, padding = 0
        public sg_filter mag_filter;

        [FieldOffset(48)] // size = 4, padding = 0
        public sg_wrap wrap_u;

        [FieldOffset(52)] // size = 4, padding = 0
        public sg_wrap wrap_v;

        [FieldOffset(56)] // size = 4, padding = 0
        public sg_wrap wrap_w;

        [FieldOffset(60)] // size = 4, padding = 0
        public sg_border_color border_color;

        [FieldOffset(64)] // size = 4, padding = 0
        public uint max_anisotropy;

        [FieldOffset(68)] // size = 4, padding = 0
        public float min_lod;

        [FieldOffset(72)] // size = 4, padding = 4
        public float max_lod;

        [FieldOffset(80)] // size = 1536, padding = 0
        public sg_image_data data;

        [FieldOffset(1616)] // size = 8, padding = 0
        public CString8U label;

        [FieldOffset(1624)] // size = 8, padding = 0
        public fixed uint _gl_textures[8 / 4]; // uint32_t[2]

        public Span<uint> gl_textures
        {
            get
            {
                fixed (sg_image_desc* @this = &this)
                {
                    var pointer = &@this->_gl_textures[0];
                    var span = new Span<uint>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(1632)] // size = 4, padding = 4
        public uint gl_texture_target;

        [FieldOffset(1640)] // size = 16, padding = 0
        public fixed ulong _mtl_textures[16 / 8]; // void*[2]

        public Span<IntPtr> mtl_textures
        {
            get
            {
                fixed (sg_image_desc* @this = &this)
                {
                    var pointer = &@this->_mtl_textures[0];
                    var span = new Span<IntPtr>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(1656)] // size = 8, padding = 0
        public void* d3d11_texture;

        [FieldOffset(1664)] // size = 8, padding = 0
        public void* d3d11_shader_resource_view;

        [FieldOffset(1672)] // size = 8, padding = 0
        public void* wgpu_texture;

        [FieldOffset(1680)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1594:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 1536, Pack = 8)]
    public struct sg_image_data
    {
        [FieldOffset(0)] // size = 1536, padding = 0
        public fixed ulong _subimage[1536 / 8]; // sg_range[6]

        public Span<sg_range> subimage
        {
            get
            {
                fixed (sg_image_data* @this = &this)
                {
                    var pointer = &@this->_subimage[0];
                    var span = new Span<sg_range>(pointer, 6);
                    return span;
                }
            }
        }
    }

    // Struct @ sokol_gfx.h:1583:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct sg_buffer_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong size;

        [FieldOffset(16)] // size = 4, padding = 0
        public sg_buffer_type type;

        [FieldOffset(20)] // size = 4, padding = 0
        public sg_usage usage;

        [FieldOffset(24)] // size = 16, padding = 0
        public sg_range data;

        [FieldOffset(40)] // size = 8, padding = 0
        public CString8U label;

        [FieldOffset(48)] // size = 8, padding = 0
        public fixed uint _gl_buffers[8 / 4]; // uint32_t[2]

        public Span<uint> gl_buffers
        {
            get
            {
                fixed (sg_buffer_desc* @this = &this)
                {
                    var pointer = &@this->_gl_buffers[0];
                    var span = new Span<uint>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(56)] // size = 16, padding = 0
        public fixed ulong _mtl_buffers[16 / 8]; // void*[2]

        public Span<IntPtr> mtl_buffers
        {
            get
            {
                fixed (sg_buffer_desc* @this = &this)
                {
                    var pointer = &@this->_mtl_buffers[0];
                    var span = new Span<IntPtr>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(72)] // size = 8, padding = 0
        public void* d3d11_buffer;

        [FieldOffset(80)] // size = 8, padding = 0
        public void* wgpu_buffer;

        [FieldOffset(88)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:2096:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pass_info
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public sg_slot_info slot;
    }

    // Struct @ sokol_gfx.h:2065:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_slot_info
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_resource_state state;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint res_id;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint ctx_id;
    }

    // Struct @ sokol_gfx.h:2092:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pipeline_info
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public sg_slot_info slot;
    }

    // Struct @ sokol_gfx.h:2088:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_shader_info
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public sg_slot_info slot;
    }

    // Struct @ sokol_gfx.h:2084:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct sg_image_info
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public sg_slot_info slot;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint upd_frame_index;

        [FieldOffset(16)] // size = 4, padding = 0
        public int num_slots;

        [FieldOffset(20)] // size = 4, padding = 0
        public int active_slot;

        [FieldOffset(24)] // size = 4, padding = 0
        public int width;

        [FieldOffset(28)] // size = 4, padding = 0
        public int height;
    }

    // Struct @ sokol_gfx.h:2075:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct sg_buffer_info
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public sg_slot_info slot;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint update_frame_index;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint append_frame_index;

        [FieldOffset(20)] // size = 4, padding = 0
        public int append_pos;

        [FieldOffset(24)] // size = 1, padding = 3
        public CBool append_overflow;

        [FieldOffset(28)] // size = 4, padding = 0
        public int num_slots;

        [FieldOffset(32)] // size = 4, padding = 0
        public int active_slot;
    }

    // Struct @ sokol_gfx.h:844:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 6, Pack = 1)]
    public struct sg_pixelformat_info
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public CBool sample;

        [FieldOffset(1)] // size = 1, padding = 0
        public CBool filter;

        [FieldOffset(2)] // size = 1, padding = 0
        public CBool render;

        [FieldOffset(3)] // size = 1, padding = 0
        public CBool blend;

        [FieldOffset(4)] // size = 1, padding = 0
        public CBool msaa;

        [FieldOffset(5)] // size = 1, padding = 0
        public CBool depth;
    }

    // Struct @ sokol_gfx.h:876:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct sg_limits
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int max_image_size_2d;

        [FieldOffset(4)] // size = 4, padding = 0
        public int max_image_size_cube;

        [FieldOffset(8)] // size = 4, padding = 0
        public int max_image_size_3d;

        [FieldOffset(12)] // size = 4, padding = 0
        public int max_image_size_array;

        [FieldOffset(16)] // size = 4, padding = 0
        public int max_image_array_layers;

        [FieldOffset(20)] // size = 4, padding = 0
        public int max_vertex_attrs;

        [FieldOffset(24)] // size = 4, padding = 0
        public int gl_max_vertex_uniform_vectors;
    }

    // Struct @ sokol_gfx.h:863:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 9, Pack = 1)]
    public struct sg_features
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public CBool instancing;

        [FieldOffset(1)] // size = 1, padding = 0
        public CBool origin_top_left;

        [FieldOffset(2)] // size = 1, padding = 0
        public CBool multiple_render_targets;

        [FieldOffset(3)] // size = 1, padding = 0
        public CBool msaa_render_targets;

        [FieldOffset(4)] // size = 1, padding = 0
        public CBool imagetype_3d;

        [FieldOffset(5)] // size = 1, padding = 0
        public CBool imagetype_array;

        [FieldOffset(6)] // size = 1, padding = 0
        public CBool image_clamp_to_border;

        [FieldOffset(7)] // size = 1, padding = 0
        public CBool mrt_independent_blend_state;

        [FieldOffset(8)] // size = 1, padding = 0
        public CBool mrt_independent_write_mask;
    }

    // Struct @ sokol_gfx.h:2266:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 232, Pack = 8)]
    public struct sg_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public int buffer_pool_size;

        [FieldOffset(8)] // size = 4, padding = 0
        public int image_pool_size;

        [FieldOffset(12)] // size = 4, padding = 0
        public int shader_pool_size;

        [FieldOffset(16)] // size = 4, padding = 0
        public int pipeline_pool_size;

        [FieldOffset(20)] // size = 4, padding = 0
        public int pass_pool_size;

        [FieldOffset(24)] // size = 4, padding = 0
        public int context_pool_size;

        [FieldOffset(28)] // size = 4, padding = 0
        public int uniform_buffer_size;

        [FieldOffset(32)] // size = 4, padding = 0
        public int staging_buffer_size;

        [FieldOffset(36)] // size = 4, padding = 0
        public int sampler_cache_size;

        [FieldOffset(40)] // size = 184, padding = 0
        public sg_context_desc context;

        [FieldOffset(224)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1512:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 176, Pack = 4)]
    public struct sg_bindings
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 32, padding = 0
        public fixed uint _vertex_buffers[32 / 4]; // sg_buffer[8]

        public Span<sg_buffer> vertex_buffers
        {
            get
            {
                fixed (sg_bindings* @this = &this)
                {
                    var pointer = &@this->_vertex_buffers[0];
                    var span = new Span<sg_buffer>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(36)] // size = 32, padding = 0
        public fixed uint _vertex_buffer_offsets[32 / 4]; // int[8]

        public Span<int> vertex_buffer_offsets
        {
            get
            {
                fixed (sg_bindings* @this = &this)
                {
                    var pointer = &@this->_vertex_buffer_offsets[0];
                    var span = new Span<int>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(68)] // size = 4, padding = 0
        public sg_buffer index_buffer;

        [FieldOffset(72)] // size = 4, padding = 0
        public int index_buffer_offset;

        [FieldOffset(76)] // size = 48, padding = 0
        public fixed uint _vs_images[48 / 4]; // sg_image[12]

        public Span<sg_image> vs_images
        {
            get
            {
                fixed (sg_bindings* @this = &this)
                {
                    var pointer = &@this->_vs_images[0];
                    var span = new Span<sg_image>(pointer, 12);
                    return span;
                }
            }
        }

        [FieldOffset(124)] // size = 48, padding = 0
        public fixed uint _fs_images[48 / 4]; // sg_image[12]

        public Span<sg_image> fs_images
        {
            get
            {
                fixed (sg_bindings* @this = &this)
                {
                    var pointer = &@this->_fs_images[0];
                    var span = new Span<sg_image>(pointer, 12);
                    return span;
                }
            }
        }

        [FieldOffset(172)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1478:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 4)]
    public struct sg_pass_action
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 80, padding = 0
        public fixed uint _colors[80 / 4]; // sg_color_attachment_action[4]

        public Span<sg_color_attachment_action> colors
        {
            get
            {
                fixed (sg_pass_action* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<sg_color_attachment_action>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(84)] // size = 8, padding = 0
        public sg_depth_attachment_action depth;

        [FieldOffset(92)] // size = 8, padding = 0
        public sg_stencil_attachment_action stencil;

        [FieldOffset(100)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Struct @ sokol_gfx.h:1470:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct sg_stencil_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_action action;

        [FieldOffset(4)] // size = 1, padding = 3
        public byte value;
    }

    // Struct @ sokol_gfx.h:1465:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct sg_depth_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_action action;

        [FieldOffset(4)] // size = 4, padding = 0
        public float value;
    }

    // Struct @ sokol_gfx.h:1460:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct sg_color_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sg_action action;

        [FieldOffset(4)] // size = 16, padding = 0
        public Rgba32F value;
    }

    // Struct @ sokol_gfx.h:2038:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    [StructLayout(LayoutKind.Explicit, Size = 488, Pack = 8)]
    public struct sg_trace_hooks
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* user_data;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void reset_state_cache;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_descPtr_Sg_buffer_VoidPtr_Void make_buffer;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_descPtr_Sg_image_VoidPtr_Void make_image;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_descPtr_Sg_shader_VoidPtr_Void make_shader;

        [FieldOffset(40)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_descPtr_Sg_pipeline_VoidPtr_Void make_pipeline;

        [FieldOffset(48)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_descPtr_Sg_pass_VoidPtr_Void make_pass;

        [FieldOffset(56)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_VoidPtr_Void destroy_buffer;

        [FieldOffset(64)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_VoidPtr_Void destroy_image;

        [FieldOffset(72)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_VoidPtr_Void destroy_shader;

        [FieldOffset(80)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void destroy_pipeline;

        [FieldOffset(88)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_VoidPtr_Void destroy_pass;

        [FieldOffset(96)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_Sg_rangePtr_VoidPtr_Void update_buffer;

        [FieldOffset(104)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_Sg_image_dataPtr_VoidPtr_Void update_image;

        [FieldOffset(112)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_Sg_rangePtr_Int_VoidPtr_Void append_buffer;

        [FieldOffset(120)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_actionPtr_Int_Int_VoidPtr_Void begin_default_pass;

        [FieldOffset(128)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_Sg_pass_actionPtr_VoidPtr_Void begin_pass;

        [FieldOffset(136)] // size = 8, padding = 0
        public FnPtr_SOKOL_Int_Int_Int_Int_CBool_VoidPtr_Void apply_viewport;

        [FieldOffset(144)] // size = 8, padding = 0
        public FnPtr_SOKOL_Int_Int_Int_Int_CBool_VoidPtr_Void apply_scissor_rect;

        [FieldOffset(152)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void apply_pipeline;

        [FieldOffset(160)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_bindingsPtr_VoidPtr_Void apply_bindings;

        [FieldOffset(168)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_stage_Int_Sg_rangePtr_VoidPtr_Void apply_uniforms;

        [FieldOffset(176)] // size = 8, padding = 0
        public FnPtr_SOKOL_Int_Int_Int_VoidPtr_Void draw;

        [FieldOffset(184)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void end_pass;

        [FieldOffset(192)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void commit;

        [FieldOffset(200)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_VoidPtr_Void alloc_buffer;

        [FieldOffset(208)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_VoidPtr_Void alloc_image;

        [FieldOffset(216)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_VoidPtr_Void alloc_shader;

        [FieldOffset(224)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void alloc_pipeline;

        [FieldOffset(232)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_VoidPtr_Void alloc_pass;

        [FieldOffset(240)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_VoidPtr_Void dealloc_buffer;

        [FieldOffset(248)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_VoidPtr_Void dealloc_image;

        [FieldOffset(256)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_VoidPtr_Void dealloc_shader;

        [FieldOffset(264)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void dealloc_pipeline;

        [FieldOffset(272)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_VoidPtr_Void dealloc_pass;

        [FieldOffset(280)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_Sg_buffer_descPtr_VoidPtr_Void init_buffer;

        [FieldOffset(288)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_Sg_image_descPtr_VoidPtr_Void init_image;

        [FieldOffset(296)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_Sg_shader_descPtr_VoidPtr_Void init_shader;

        [FieldOffset(304)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_Sg_pipeline_descPtr_VoidPtr_Void init_pipeline;

        [FieldOffset(312)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_Sg_pass_descPtr_VoidPtr_Void init_pass;

        [FieldOffset(320)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_VoidPtr_Void uninit_buffer;

        [FieldOffset(328)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_VoidPtr_Void uninit_image;

        [FieldOffset(336)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_VoidPtr_Void uninit_shader;

        [FieldOffset(344)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void uninit_pipeline;

        [FieldOffset(352)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_VoidPtr_Void uninit_pass;

        [FieldOffset(360)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_buffer_VoidPtr_Void fail_buffer;

        [FieldOffset(368)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_image_VoidPtr_Void fail_image;

        [FieldOffset(376)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_shader_VoidPtr_Void fail_shader;

        [FieldOffset(384)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pipeline_VoidPtr_Void fail_pipeline;

        [FieldOffset(392)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sg_pass_VoidPtr_Void fail_pass;

        [FieldOffset(400)] // size = 8, padding = 0
        public FnPtr_SOKOL_CString8U_VoidPtr_Void push_debug_group;

        [FieldOffset(408)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void pop_debug_group;

        [FieldOffset(416)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_buffer_pool_exhausted;

        [FieldOffset(424)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_image_pool_exhausted;

        [FieldOffset(432)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_shader_pool_exhausted;

        [FieldOffset(440)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_pipeline_pool_exhausted;

        [FieldOffset(448)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_pass_pool_exhausted;

        [FieldOffset(456)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_context_mismatch;

        [FieldOffset(464)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_pass_invalid;

        [FieldOffset(472)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_draw_invalid;

        [FieldOffset(480)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void err_bindings_invalid;
    }

    // Struct @ sokol_app.h:1396:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct sapp_html5_fetch_request
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int dropped_file_index;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sapp_html5_fetch_responsePtr_Void callback;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(24)] // size = 4, padding = 4
        public uint buffer_size;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_app.h:1388:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct sapp_html5_fetch_response
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool succeeded;

        [FieldOffset(4)] // size = 4, padding = 0
        public sapp_html5_fetch_error error_code;

        [FieldOffset(8)] // size = 4, padding = 0
        public int file_index;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint fetched_size;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(24)] // size = 4, padding = 4
        public uint buffer_size;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* user_data;
    }

    // Struct @ sokol_app.h:1369:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 368, Pack = 8)]
    public struct sapp_desc
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public FnPtr_SOKOL_Void init_cb;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SOKOL_Void frame_cb;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SOKOL_Void cleanup_cb;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sapp_eventPtr_Void event_cb;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SOKOL_CString8U_Void fail_cb;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* user_data;

        [FieldOffset(48)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void init_userdata_cb;

        [FieldOffset(56)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void frame_userdata_cb;

        [FieldOffset(64)] // size = 8, padding = 0
        public FnPtr_SOKOL_VoidPtr_Void cleanup_userdata_cb;

        [FieldOffset(72)] // size = 8, padding = 0
        public FnPtr_SOKOL_Sapp_eventPtr_VoidPtr_Void event_userdata_cb;

        [FieldOffset(80)] // size = 8, padding = 0
        public FnPtr_SOKOL_CString8U_VoidPtr_Void fail_userdata_cb;

        [FieldOffset(88)] // size = 4, padding = 0
        public int width;

        [FieldOffset(92)] // size = 4, padding = 0
        public int height;

        [FieldOffset(96)] // size = 4, padding = 0
        public int sample_count;

        [FieldOffset(100)] // size = 4, padding = 0
        public int swap_interval;

        [FieldOffset(104)] // size = 1, padding = 0
        public CBool high_dpi;

        [FieldOffset(105)] // size = 1, padding = 0
        public CBool fullscreen;

        [FieldOffset(106)] // size = 1, padding = 5
        public CBool alpha;

        [FieldOffset(112)] // size = 8, padding = 0
        public CString8U window_title;

        [FieldOffset(120)] // size = 1, padding = 0
        public CBool user_cursor;

        [FieldOffset(121)] // size = 1, padding = 2
        public CBool enable_clipboard;

        [FieldOffset(124)] // size = 4, padding = 0
        public int clipboard_size;

        [FieldOffset(128)] // size = 1, padding = 3
        public CBool enable_dragndrop;

        [FieldOffset(132)] // size = 4, padding = 0
        public int max_dropped_files;

        [FieldOffset(136)] // size = 4, padding = 4
        public int max_dropped_file_path_length;

        [FieldOffset(144)] // size = 200, padding = 0
        public sapp_icon_desc icon;

        [FieldOffset(344)] // size = 1, padding = 0
        public CBool gl_force_gles2;

        [FieldOffset(345)] // size = 1, padding = 0
        public CBool win32_console_utf8;

        [FieldOffset(346)] // size = 1, padding = 0
        public CBool win32_console_create;

        [FieldOffset(347)] // size = 1, padding = 4
        public CBool win32_console_attach;

        [FieldOffset(352)] // size = 8, padding = 0
        public CString8U html5_canvas_name;

        [FieldOffset(360)] // size = 1, padding = 0
        public CBool html5_canvas_resize;

        [FieldOffset(361)] // size = 1, padding = 0
        public CBool html5_preserve_drawing_buffer;

        [FieldOffset(362)] // size = 1, padding = 0
        public CBool html5_premultiplied_alpha;

        [FieldOffset(363)] // size = 1, padding = 0
        public CBool html5_ask_leave_site;

        [FieldOffset(364)] // size = 1, padding = 3
        public CBool ios_keyboard_resizes_canvas;
    }

    // Struct @ sokol_app.h:1325:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct sapp_icon_desc
    {
        [FieldOffset(0)] // size = 1, padding = 7
        public CBool sokol_default;

        [FieldOffset(8)] // size = 192, padding = 0
        public fixed ulong _images[192 / 8]; // sapp_image_desc[8]

        public Span<sapp_image_desc> images
        {
            get
            {
                fixed (sapp_icon_desc* @this = &this)
                {
                    var pointer = &@this->_images[0];
                    var span = new Span<sapp_image_desc>(pointer, 8);
                    return span;
                }
            }
        }
    }

    // Struct @ sokol_app.h:1302:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sapp_image_desc
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int width;

        [FieldOffset(4)] // size = 4, padding = 0
        public int height;

        [FieldOffset(8)] // size = 16, padding = 0
        public sapp_range pixels;
    }

    // Struct @ sokol_app.h:1275:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sapp_range
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* ptr;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong size;
    }

    // Struct @ sokol_app.h:1264:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
    public struct sapp_event
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong frame_count;

        [FieldOffset(8)] // size = 4, padding = 0
        public sapp_event_type type;

        [FieldOffset(12)] // size = 4, padding = 0
        public sapp_keycode key_code;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint char_code;

        [FieldOffset(20)] // size = 1, padding = 3
        public CBool key_repeat;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint modifiers;

        [FieldOffset(28)] // size = 4, padding = 0
        public sapp_mousebutton mouse_button;

        [FieldOffset(32)] // size = 4, padding = 0
        public float mouse_x;

        [FieldOffset(36)] // size = 4, padding = 0
        public float mouse_y;

        [FieldOffset(40)] // size = 4, padding = 0
        public float mouse_dx;

        [FieldOffset(44)] // size = 4, padding = 0
        public float mouse_dy;

        [FieldOffset(48)] // size = 4, padding = 0
        public float scroll_x;

        [FieldOffset(52)] // size = 4, padding = 0
        public float scroll_y;

        [FieldOffset(56)] // size = 4, padding = 4
        public int num_touches;

        [FieldOffset(64)] // size = 192, padding = 0
        public fixed ulong _touches[192 / 8]; // sapp_touchpoint[8]

        public Span<sapp_touchpoint> touches
        {
            get
            {
                fixed (sapp_event* @this = &this)
                {
                    var pointer = &@this->_touches[0];
                    var span = new Span<sapp_touchpoint>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(256)] // size = 4, padding = 0
        public int window_width;

        [FieldOffset(260)] // size = 4, padding = 0
        public int window_height;

        [FieldOffset(264)] // size = 4, padding = 0
        public int framebuffer_width;

        [FieldOffset(268)] // size = 4, padding = 0
        public int framebuffer_height;
    }

    // Struct @ sokol_app.h:1206:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sapp_touchpoint
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr identifier;

        [FieldOffset(8)] // size = 4, padding = 0
        public float pos_x;

        [FieldOffset(12)] // size = 4, padding = 0
        public float pos_y;

        [FieldOffset(16)] // size = 1, padding = 7
        public CBool changed;
    }

    // Enum @ sokol_fetch.h:881:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_fetch.h)
    public enum sfetch_error_t : uint
    {
        SFETCH_ERROR_NO_ERROR = 0U,
        SFETCH_ERROR_FILE_NOT_FOUND = 1U,
        SFETCH_ERROR_NO_BUFFER = 2U,
        SFETCH_ERROR_BUFFER_TOO_SMALL = 3U,
        SFETCH_ERROR_UNEXPECTED_EOF = 4U,
        SFETCH_ERROR_INVALID_HTTP_STATUS = 5U,
        SFETCH_ERROR_CANCELLED = 6U
    }

    // Enum @ sokol_gfx.h:828:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_pixel_format : uint
    {
        _SG_PIXELFORMAT_DEFAULT = 0U,
        SG_PIXELFORMAT_NONE = 1U,
        SG_PIXELFORMAT_R8 = 2U,
        SG_PIXELFORMAT_R8SN = 3U,
        SG_PIXELFORMAT_R8UI = 4U,
        SG_PIXELFORMAT_R8SI = 5U,
        SG_PIXELFORMAT_R16 = 6U,
        SG_PIXELFORMAT_R16SN = 7U,
        SG_PIXELFORMAT_R16UI = 8U,
        SG_PIXELFORMAT_R16SI = 9U,
        SG_PIXELFORMAT_R16F = 10U,
        SG_PIXELFORMAT_RG8 = 11U,
        SG_PIXELFORMAT_RG8SN = 12U,
        SG_PIXELFORMAT_RG8UI = 13U,
        SG_PIXELFORMAT_RG8SI = 14U,
        SG_PIXELFORMAT_R32UI = 15U,
        SG_PIXELFORMAT_R32SI = 16U,
        SG_PIXELFORMAT_R32F = 17U,
        SG_PIXELFORMAT_RG16 = 18U,
        SG_PIXELFORMAT_RG16SN = 19U,
        SG_PIXELFORMAT_RG16UI = 20U,
        SG_PIXELFORMAT_RG16SI = 21U,
        SG_PIXELFORMAT_RG16F = 22U,
        SG_PIXELFORMAT_RGBA8 = 23U,
        SG_PIXELFORMAT_RGBA8SN = 24U,
        SG_PIXELFORMAT_RGBA8UI = 25U,
        SG_PIXELFORMAT_RGBA8SI = 26U,
        SG_PIXELFORMAT_BGRA8 = 27U,
        SG_PIXELFORMAT_RGB10A2 = 28U,
        SG_PIXELFORMAT_RG11B10F = 29U,
        SG_PIXELFORMAT_RG32UI = 30U,
        SG_PIXELFORMAT_RG32SI = 31U,
        SG_PIXELFORMAT_RG32F = 32U,
        SG_PIXELFORMAT_RGBA16 = 33U,
        SG_PIXELFORMAT_RGBA16SN = 34U,
        SG_PIXELFORMAT_RGBA16UI = 35U,
        SG_PIXELFORMAT_RGBA16SI = 36U,
        SG_PIXELFORMAT_RGBA16F = 37U,
        SG_PIXELFORMAT_RGBA32UI = 38U,
        SG_PIXELFORMAT_RGBA32SI = 39U,
        SG_PIXELFORMAT_RGBA32F = 40U,
        SG_PIXELFORMAT_DEPTH = 41U,
        SG_PIXELFORMAT_DEPTH_STENCIL = 42U,
        SG_PIXELFORMAT_BC1_RGBA = 43U,
        SG_PIXELFORMAT_BC2_RGBA = 44U,
        SG_PIXELFORMAT_BC3_RGBA = 45U,
        SG_PIXELFORMAT_BC4_R = 46U,
        SG_PIXELFORMAT_BC4_RSN = 47U,
        SG_PIXELFORMAT_BC5_RG = 48U,
        SG_PIXELFORMAT_BC5_RGSN = 49U,
        SG_PIXELFORMAT_BC6H_RGBF = 50U,
        SG_PIXELFORMAT_BC6H_RGBUF = 51U,
        SG_PIXELFORMAT_BC7_RGBA = 52U,
        SG_PIXELFORMAT_PVRTC_RGB_2BPP = 53U,
        SG_PIXELFORMAT_PVRTC_RGB_4BPP = 54U,
        SG_PIXELFORMAT_PVRTC_RGBA_2BPP = 55U,
        SG_PIXELFORMAT_PVRTC_RGBA_4BPP = 56U,
        SG_PIXELFORMAT_ETC2_RGB8 = 57U,
        SG_PIXELFORMAT_ETC2_RGB8A1 = 58U,
        SG_PIXELFORMAT_ETC2_RGBA8 = 59U,
        SG_PIXELFORMAT_ETC2_RG11 = 60U,
        SG_PIXELFORMAT_ETC2_RG11SN = 61U,
        _SG_PIXELFORMAT_NUM = 62U,
        _SG_PIXELFORMAT_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1249:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_face_winding : uint
    {
        _SG_FACEWINDING_DEFAULT = 0U,
        SG_FACEWINDING_CCW = 1U,
        SG_FACEWINDING_CW = 2U,
        _SG_FACEWINDING_NUM = 3U,
        _SG_FACEWINDING_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1232:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_cull_mode : uint
    {
        _SG_CULLMODE_DEFAULT = 0U,
        SG_CULLMODE_NONE = 1U,
        SG_CULLMODE_FRONT = 2U,
        SG_CULLMODE_BACK = 3U,
        _SG_CULLMODE_NUM = 4U,
        _SG_CULLMODE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:981:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_index_type : uint
    {
        _SG_INDEXTYPE_DEFAULT = 0U,
        SG_INDEXTYPE_NONE = 1U,
        SG_INDEXTYPE_UINT16 = 2U,
        SG_INDEXTYPE_UINT32 = 3U,
        _SG_INDEXTYPE_NUM = 4U,
        _SG_INDEXTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1074:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_primitive_type : uint
    {
        _SG_PRIMITIVETYPE_DEFAULT = 0U,
        SG_PRIMITIVETYPE_POINTS = 1U,
        SG_PRIMITIVETYPE_LINES = 2U,
        SG_PRIMITIVETYPE_LINE_STRIP = 3U,
        SG_PRIMITIVETYPE_TRIANGLES = 4U,
        SG_PRIMITIVETYPE_TRIANGLE_STRIP = 5U,
        _SG_PRIMITIVETYPE_NUM = 6U,
        _SG_PRIMITIVETYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1375:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_blend_op : uint
    {
        _SG_BLENDOP_DEFAULT = 0U,
        SG_BLENDOP_ADD = 1U,
        SG_BLENDOP_SUBTRACT = 2U,
        SG_BLENDOP_REVERSE_SUBTRACT = 3U,
        _SG_BLENDOP_NUM = 4U,
        _SG_BLENDOP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1351:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_blend_factor : uint
    {
        _SG_BLENDFACTOR_DEFAULT = 0U,
        SG_BLENDFACTOR_ZERO = 1U,
        SG_BLENDFACTOR_ONE = 2U,
        SG_BLENDFACTOR_SRC_COLOR = 3U,
        SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4U,
        SG_BLENDFACTOR_SRC_ALPHA = 5U,
        SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6U,
        SG_BLENDFACTOR_DST_COLOR = 7U,
        SG_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8U,
        SG_BLENDFACTOR_DST_ALPHA = 9U,
        SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10U,
        SG_BLENDFACTOR_SRC_ALPHA_SATURATED = 11U,
        SG_BLENDFACTOR_BLEND_COLOR = 12U,
        SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR = 13U,
        SG_BLENDFACTOR_BLEND_ALPHA = 14U,
        SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA = 15U,
        _SG_BLENDFACTOR_NUM = 16U,
        _SG_BLENDFACTOR_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1409:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_color_mask : uint
    {
        _SG_COLORMASK_DEFAULT = 0U,
        SG_COLORMASK_NONE = 16U,
        SG_COLORMASK_R = 1U,
        SG_COLORMASK_G = 2U,
        SG_COLORMASK_RG = 3U,
        SG_COLORMASK_B = 4U,
        SG_COLORMASK_RB = 5U,
        SG_COLORMASK_GB = 6U,
        SG_COLORMASK_RGB = 7U,
        SG_COLORMASK_A = 8U,
        SG_COLORMASK_RA = 9U,
        SG_COLORMASK_GA = 10U,
        SG_COLORMASK_RGA = 11U,
        SG_COLORMASK_BA = 12U,
        SG_COLORMASK_RBA = 13U,
        SG_COLORMASK_GBA = 14U,
        SG_COLORMASK_RGBA = 15U,
        _SG_COLORMASK_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1313:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_stencil_op : uint
    {
        _SG_STENCILOP_DEFAULT = 0U,
        SG_STENCILOP_KEEP = 1U,
        SG_STENCILOP_ZERO = 2U,
        SG_STENCILOP_REPLACE = 3U,
        SG_STENCILOP_INCR_CLAMP = 4U,
        SG_STENCILOP_DECR_CLAMP = 5U,
        SG_STENCILOP_INVERT = 6U,
        SG_STENCILOP_INCR_WRAP = 7U,
        SG_STENCILOP_DECR_WRAP = 8U,
        _SG_STENCILOP_NUM = 9U,
        _SG_STENCILOP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1279:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_compare_func : uint
    {
        _SG_COMPAREFUNC_DEFAULT = 0U,
        SG_COMPAREFUNC_NEVER = 1U,
        SG_COMPAREFUNC_LESS = 2U,
        SG_COMPAREFUNC_EQUAL = 3U,
        SG_COMPAREFUNC_LESS_EQUAL = 4U,
        SG_COMPAREFUNC_GREATER = 5U,
        SG_COMPAREFUNC_NOT_EQUAL = 6U,
        SG_COMPAREFUNC_GREATER_EQUAL = 7U,
        SG_COMPAREFUNC_ALWAYS = 8U,
        _SG_COMPAREFUNC_NUM = 9U,
        _SG_COMPAREFUNC_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1177:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_vertex_format : uint
    {
        SG_VERTEXFORMAT_INVALID = 0U,
        SG_VERTEXFORMAT_FLOAT = 1U,
        SG_VERTEXFORMAT_FLOAT2 = 2U,
        SG_VERTEXFORMAT_FLOAT3 = 3U,
        SG_VERTEXFORMAT_FLOAT4 = 4U,
        SG_VERTEXFORMAT_BYTE4 = 5U,
        SG_VERTEXFORMAT_BYTE4N = 6U,
        SG_VERTEXFORMAT_UBYTE4 = 7U,
        SG_VERTEXFORMAT_UBYTE4N = 8U,
        SG_VERTEXFORMAT_SHORT2 = 9U,
        SG_VERTEXFORMAT_SHORT2N = 10U,
        SG_VERTEXFORMAT_USHORT2N = 11U,
        SG_VERTEXFORMAT_SHORT4 = 12U,
        SG_VERTEXFORMAT_SHORT4N = 13U,
        SG_VERTEXFORMAT_USHORT4N = 14U,
        SG_VERTEXFORMAT_UINT10_N2 = 15U,
        _SG_VERTEXFORMAT_NUM = 16U,
        _SG_VERTEXFORMAT_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1196:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_vertex_step : uint
    {
        _SG_VERTEXSTEP_DEFAULT = 0U,
        SG_VERTEXSTEP_PER_VERTEX = 1U,
        SG_VERTEXSTEP_PER_INSTANCE = 2U,
        _SG_VERTEXSTEP_NUM = 3U,
        _SG_VERTEXSTEP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1020:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_sampler_type : uint
    {
        _SG_SAMPLERTYPE_DEFAULT = 0U,
        SG_SAMPLERTYPE_FLOAT = 1U,
        SG_SAMPLERTYPE_SINT = 2U,
        SG_SAMPLERTYPE_UINT = 3U
    }

    // Enum @ sokol_gfx.h:1003:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_image_type : uint
    {
        _SG_IMAGETYPE_DEFAULT = 0U,
        SG_IMAGETYPE_2D = 1U,
        SG_IMAGETYPE_CUBE = 2U,
        SG_IMAGETYPE_3D = 3U,
        SG_IMAGETYPE_ARRAY = 4U,
        _SG_IMAGETYPE_NUM = 5U,
        _SG_IMAGETYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1214:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_uniform_type : uint
    {
        SG_UNIFORMTYPE_INVALID = 0U,
        SG_UNIFORMTYPE_FLOAT = 1U,
        SG_UNIFORMTYPE_FLOAT2 = 2U,
        SG_UNIFORMTYPE_FLOAT3 = 3U,
        SG_UNIFORMTYPE_FLOAT4 = 4U,
        SG_UNIFORMTYPE_MAT4 = 5U,
        _SG_UNIFORMTYPE_NUM = 6U,
        _SG_UNIFORMTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1150:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_border_color : uint
    {
        _SG_BORDERCOLOR_DEFAULT = 0U,
        SG_BORDERCOLOR_TRANSPARENT_BLACK = 1U,
        SG_BORDERCOLOR_OPAQUE_BLACK = 2U,
        SG_BORDERCOLOR_OPAQUE_WHITE = 3U,
        _SG_BORDERCOLOR_NUM = 4U,
        _SG_BORDERCOLOR_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1133:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_wrap : uint
    {
        _SG_WRAP_DEFAULT = 0U,
        SG_WRAP_REPEAT = 1U,
        SG_WRAP_CLAMP_TO_EDGE = 2U,
        SG_WRAP_CLAMP_TO_BORDER = 3U,
        SG_WRAP_MIRRORED_REPEAT = 4U,
        _SG_WRAP_NUM = 5U,
        _SG_WRAP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1095:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_filter : uint
    {
        _SG_FILTER_DEFAULT = 0U,
        SG_FILTER_NEAREST = 1U,
        SG_FILTER_LINEAR = 2U,
        SG_FILTER_NEAREST_MIPMAP_NEAREST = 3U,
        SG_FILTER_NEAREST_MIPMAP_LINEAR = 4U,
        SG_FILTER_LINEAR_MIPMAP_NEAREST = 5U,
        SG_FILTER_LINEAR_MIPMAP_LINEAR = 6U,
        _SG_FILTER_NUM = 7U,
        _SG_FILTER_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:946:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_usage : uint
    {
        _SG_USAGE_DEFAULT = 0U,
        SG_USAGE_IMMUTABLE = 1U,
        SG_USAGE_DYNAMIC = 2U,
        SG_USAGE_STREAM = 3U,
        _SG_USAGE_NUM = 4U,
        _SG_USAGE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:962:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_buffer_type : uint
    {
        _SG_BUFFERTYPE_DEFAULT = 0U,
        SG_BUFFERTYPE_VERTEXBUFFER = 1U,
        SG_BUFFERTYPE_INDEXBUFFER = 2U,
        _SG_BUFFERTYPE_NUM = 3U,
        _SG_BUFFERTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:903:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_resource_state : uint
    {
        SG_RESOURCESTATE_INITIAL = 0U,
        SG_RESOURCESTATE_ALLOC = 1U,
        SG_RESOURCESTATE_VALID = 2U,
        SG_RESOURCESTATE_FAILED = 3U,
        SG_RESOURCESTATE_INVALID = 4U,
        _SG_RESOURCESTATE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:702:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_backend : uint
    {
        SG_BACKEND_GLCORE33 = 0U,
        SG_BACKEND_GLES2 = 1U,
        SG_BACKEND_GLES3 = 2U,
        SG_BACKEND_D3D11 = 3U,
        SG_BACKEND_METAL_IOS = 4U,
        SG_BACKEND_METAL_MACOS = 5U,
        SG_BACKEND_METAL_SIMULATOR = 6U,
        SG_BACKEND_WGPU = 7U,
        SG_BACKEND_DUMMY = 8U
    }

    // Enum @ sokol_gfx.h:1054:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_shader_stage : uint
    {
        SG_SHADERSTAGE_VS = 0U,
        SG_SHADERSTAGE_FS = 1U,
        _SG_SHADERSTAGE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1436:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_gfx.h)
    public enum sg_action : uint
    {
        _SG_ACTION_DEFAULT = 0U,
        SG_ACTION_CLEAR = 1U,
        SG_ACTION_LOAD = 2U,
        SG_ACTION_DONTCARE = 3U,
        _SG_ACTION_NUM = 4U,
        _SG_ACTION_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_app.h:1378:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    public enum sapp_html5_fetch_error : uint
    {
        SAPP_HTML5_FETCH_ERROR_NO_ERROR = 0U,
        SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL = 1U,
        SAPP_HTML5_FETCH_ERROR_OTHER = 2U
    }

    // Enum @ sokol_app.h:1219:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    public enum sapp_mousebutton : uint
    {
        SAPP_MOUSEBUTTON_LEFT = 0U,
        SAPP_MOUSEBUTTON_RIGHT = 1U,
        SAPP_MOUSEBUTTON_MIDDLE = 2U,
        SAPP_MOUSEBUTTON_INVALID = 256U
    }

    // Enum @ sokol_app.h:1190:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    public enum sapp_keycode : uint
    {
        SAPP_KEYCODE_INVALID = 0U,
        SAPP_KEYCODE_SPACE = 32U,
        SAPP_KEYCODE_APOSTROPHE = 39U,
        SAPP_KEYCODE_COMMA = 44U,
        SAPP_KEYCODE_MINUS = 45U,
        SAPP_KEYCODE_PERIOD = 46U,
        SAPP_KEYCODE_SLASH = 47U,
        SAPP_KEYCODE_0 = 48U,
        SAPP_KEYCODE_1 = 49U,
        SAPP_KEYCODE_2 = 50U,
        SAPP_KEYCODE_3 = 51U,
        SAPP_KEYCODE_4 = 52U,
        SAPP_KEYCODE_5 = 53U,
        SAPP_KEYCODE_6 = 54U,
        SAPP_KEYCODE_7 = 55U,
        SAPP_KEYCODE_8 = 56U,
        SAPP_KEYCODE_9 = 57U,
        SAPP_KEYCODE_SEMICOLON = 59U,
        SAPP_KEYCODE_EQUAL = 61U,
        SAPP_KEYCODE_A = 65U,
        SAPP_KEYCODE_B = 66U,
        SAPP_KEYCODE_C = 67U,
        SAPP_KEYCODE_D = 68U,
        SAPP_KEYCODE_E = 69U,
        SAPP_KEYCODE_F = 70U,
        SAPP_KEYCODE_G = 71U,
        SAPP_KEYCODE_H = 72U,
        SAPP_KEYCODE_I = 73U,
        SAPP_KEYCODE_J = 74U,
        SAPP_KEYCODE_K = 75U,
        SAPP_KEYCODE_L = 76U,
        SAPP_KEYCODE_M = 77U,
        SAPP_KEYCODE_N = 78U,
        SAPP_KEYCODE_O = 79U,
        SAPP_KEYCODE_P = 80U,
        SAPP_KEYCODE_Q = 81U,
        SAPP_KEYCODE_R = 82U,
        SAPP_KEYCODE_S = 83U,
        SAPP_KEYCODE_T = 84U,
        SAPP_KEYCODE_U = 85U,
        SAPP_KEYCODE_V = 86U,
        SAPP_KEYCODE_W = 87U,
        SAPP_KEYCODE_X = 88U,
        SAPP_KEYCODE_Y = 89U,
        SAPP_KEYCODE_Z = 90U,
        SAPP_KEYCODE_LEFT_BRACKET = 91U,
        SAPP_KEYCODE_BACKSLASH = 92U,
        SAPP_KEYCODE_RIGHT_BRACKET = 93U,
        SAPP_KEYCODE_GRAVE_ACCENT = 96U,
        SAPP_KEYCODE_WORLD_1 = 161U,
        SAPP_KEYCODE_WORLD_2 = 162U,
        SAPP_KEYCODE_ESCAPE = 256U,
        SAPP_KEYCODE_ENTER = 257U,
        SAPP_KEYCODE_TAB = 258U,
        SAPP_KEYCODE_BACKSPACE = 259U,
        SAPP_KEYCODE_INSERT = 260U,
        SAPP_KEYCODE_DELETE = 261U,
        SAPP_KEYCODE_RIGHT = 262U,
        SAPP_KEYCODE_LEFT = 263U,
        SAPP_KEYCODE_DOWN = 264U,
        SAPP_KEYCODE_UP = 265U,
        SAPP_KEYCODE_PAGE_UP = 266U,
        SAPP_KEYCODE_PAGE_DOWN = 267U,
        SAPP_KEYCODE_HOME = 268U,
        SAPP_KEYCODE_END = 269U,
        SAPP_KEYCODE_CAPS_LOCK = 280U,
        SAPP_KEYCODE_SCROLL_LOCK = 281U,
        SAPP_KEYCODE_NUM_LOCK = 282U,
        SAPP_KEYCODE_PRINT_SCREEN = 283U,
        SAPP_KEYCODE_PAUSE = 284U,
        SAPP_KEYCODE_F1 = 290U,
        SAPP_KEYCODE_F2 = 291U,
        SAPP_KEYCODE_F3 = 292U,
        SAPP_KEYCODE_F4 = 293U,
        SAPP_KEYCODE_F5 = 294U,
        SAPP_KEYCODE_F6 = 295U,
        SAPP_KEYCODE_F7 = 296U,
        SAPP_KEYCODE_F8 = 297U,
        SAPP_KEYCODE_F9 = 298U,
        SAPP_KEYCODE_F10 = 299U,
        SAPP_KEYCODE_F11 = 300U,
        SAPP_KEYCODE_F12 = 301U,
        SAPP_KEYCODE_F13 = 302U,
        SAPP_KEYCODE_F14 = 303U,
        SAPP_KEYCODE_F15 = 304U,
        SAPP_KEYCODE_F16 = 305U,
        SAPP_KEYCODE_F17 = 306U,
        SAPP_KEYCODE_F18 = 307U,
        SAPP_KEYCODE_F19 = 308U,
        SAPP_KEYCODE_F20 = 309U,
        SAPP_KEYCODE_F21 = 310U,
        SAPP_KEYCODE_F22 = 311U,
        SAPP_KEYCODE_F23 = 312U,
        SAPP_KEYCODE_F24 = 313U,
        SAPP_KEYCODE_F25 = 314U,
        SAPP_KEYCODE_KP_0 = 320U,
        SAPP_KEYCODE_KP_1 = 321U,
        SAPP_KEYCODE_KP_2 = 322U,
        SAPP_KEYCODE_KP_3 = 323U,
        SAPP_KEYCODE_KP_4 = 324U,
        SAPP_KEYCODE_KP_5 = 325U,
        SAPP_KEYCODE_KP_6 = 326U,
        SAPP_KEYCODE_KP_7 = 327U,
        SAPP_KEYCODE_KP_8 = 328U,
        SAPP_KEYCODE_KP_9 = 329U,
        SAPP_KEYCODE_KP_DECIMAL = 330U,
        SAPP_KEYCODE_KP_DIVIDE = 331U,
        SAPP_KEYCODE_KP_MULTIPLY = 332U,
        SAPP_KEYCODE_KP_SUBTRACT = 333U,
        SAPP_KEYCODE_KP_ADD = 334U,
        SAPP_KEYCODE_KP_ENTER = 335U,
        SAPP_KEYCODE_KP_EQUAL = 336U,
        SAPP_KEYCODE_LEFT_SHIFT = 340U,
        SAPP_KEYCODE_LEFT_CONTROL = 341U,
        SAPP_KEYCODE_LEFT_ALT = 342U,
        SAPP_KEYCODE_LEFT_SUPER = 343U,
        SAPP_KEYCODE_RIGHT_SHIFT = 344U,
        SAPP_KEYCODE_RIGHT_CONTROL = 345U,
        SAPP_KEYCODE_RIGHT_ALT = 346U,
        SAPP_KEYCODE_RIGHT_SUPER = 347U,
        SAPP_KEYCODE_MENU = 348U
    }

    // Enum @ sokol_app.h:1058:3 (/home/runner/work/sokol-cs/sokol-cs/ext/sokol/sokol_app.h)
    public enum sapp_event_type : uint
    {
        SAPP_EVENTTYPE_INVALID = 0U,
        SAPP_EVENTTYPE_KEY_DOWN = 1U,
        SAPP_EVENTTYPE_KEY_UP = 2U,
        SAPP_EVENTTYPE_CHAR = 3U,
        SAPP_EVENTTYPE_MOUSE_DOWN = 4U,
        SAPP_EVENTTYPE_MOUSE_UP = 5U,
        SAPP_EVENTTYPE_MOUSE_SCROLL = 6U,
        SAPP_EVENTTYPE_MOUSE_MOVE = 7U,
        SAPP_EVENTTYPE_MOUSE_ENTER = 8U,
        SAPP_EVENTTYPE_MOUSE_LEAVE = 9U,
        SAPP_EVENTTYPE_TOUCHES_BEGAN = 10U,
        SAPP_EVENTTYPE_TOUCHES_MOVED = 11U,
        SAPP_EVENTTYPE_TOUCHES_ENDED = 12U,
        SAPP_EVENTTYPE_TOUCHES_CANCELLED = 13U,
        SAPP_EVENTTYPE_RESIZED = 14U,
        SAPP_EVENTTYPE_ICONIFIED = 15U,
        SAPP_EVENTTYPE_RESTORED = 16U,
        SAPP_EVENTTYPE_SUSPENDED = 17U,
        SAPP_EVENTTYPE_RESUMED = 18U,
        SAPP_EVENTTYPE_UPDATE_CURSOR = 19U,
        SAPP_EVENTTYPE_QUIT_REQUESTED = 20U,
        SAPP_EVENTTYPE_CLIPBOARD_PASTED = 21U,
        SAPP_EVENTTYPE_FILES_DROPPED = 22U,
        _SAPP_EVENTTYPE_NUM = 23U,
        _SAPP_EVENTTYPE_FORCE_U32 = 2147483647U
    }
}
