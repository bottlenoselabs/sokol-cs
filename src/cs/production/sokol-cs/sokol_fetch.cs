
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class sokol_fetch
{
    private const string LibraryName = "sokol";
    private static IntPtr _libraryHandle;

    static sokol_fetch()
    {
        TryLoadApi();
    }

    public static bool TryLoadApi(string? libraryName = LibraryName)
    {
        UnloadApi();
        _libraryHandle = Runtime.LibraryLoad(libraryName!);
        if (_libraryHandle == IntPtr.Zero) return false;
        _LoadVirtualTable();
        return true;
    }

    public static void UnloadApi()
    {
        if (_libraryHandle == IntPtr.Zero) return;
        _UnloadVirtualTable();
        Runtime.LibraryUnload(_libraryHandle);
    }

    // Function @ sokol_fetch.h:943:27
    public static void sfetch_continue(sfetch_handle_t h)
    {
        _virtualTable.sfetch_continue(h);
    }

    // Function @ sokol_fetch.h:941:27
    public static void sfetch_pause(sfetch_handle_t h)
    {
        _virtualTable.sfetch_pause(h);
    }

    // Function @ sokol_fetch.h:939:27
    public static void sfetch_cancel(sfetch_handle_t h)
    {
        _virtualTable.sfetch_cancel(h);
    }

    // Function @ sokol_fetch.h:937:28
    public static void* sfetch_unbind_buffer(sfetch_handle_t h)
    {
        return _virtualTable.sfetch_unbind_buffer(h);
    }

    // Function @ sokol_fetch.h:935:27
    public static void sfetch_bind_buffer(sfetch_handle_t h, void* buffer_ptr, uint buffer_size)
    {
        _virtualTable.sfetch_bind_buffer(h, buffer_ptr, buffer_size);
    }

    // Function @ sokol_fetch.h:932:27
    public static void sfetch_dowork()
    {
        _virtualTable.sfetch_dowork();
    }

    // Function @ sokol_fetch.h:930:27
    public static CBool sfetch_handle_valid(sfetch_handle_t h)
    {
        return _virtualTable.sfetch_handle_valid(h);
    }

    // Function @ sokol_fetch.h:928:38
    public static sfetch_handle_t sfetch_send(sfetch_request_t* request)
    {
        return _virtualTable.sfetch_send(request);
    }

    // Function @ sokol_fetch.h:925:26
    public static int sfetch_max_path()
    {
        return _virtualTable.sfetch_max_path();
    }

    // Function @ sokol_fetch.h:923:26
    public static int sfetch_max_userdata_bytes()
    {
        return _virtualTable.sfetch_max_userdata_bytes();
    }

    // Function @ sokol_fetch.h:921:36
    public static sfetch_desc_t sfetch_desc()
    {
        return _virtualTable.sfetch_desc();
    }

    // Function @ sokol_fetch.h:919:27
    public static CBool sfetch_valid()
    {
        return _virtualTable.sfetch_valid();
    }

    // Function @ sokol_fetch.h:917:27
    public static void sfetch_shutdown()
    {
        _virtualTable.sfetch_shutdown();
    }

    // Function @ sokol_fetch.h:915:27
    public static void sfetch_setup(sfetch_desc_t* desc)
    {
        _virtualTable.sfetch_setup(desc);
    }

    // FunctionPointer @ sokol_fetch.h:898:15
    [StructLayout(LayoutKind.Sequential)]
    public struct sfetch_callback_t
    {
        public delegate* unmanaged<sfetch_response_t*, void> Pointer;
    }

    // Struct @ sokol_fetch.h:864:49
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sfetch_handle_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint id;
    }

    // Struct @ sokol_fetch.h:912:3
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct sfetch_request_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint channel;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString path;

        [FieldOffset(16)] // size = 8, padding = 0
        public sfetch_callback_t callback;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(32)] // size = 4, padding = 0
        public uint buffer_size;

        [FieldOffset(36)] // size = 4, padding = 0
        public uint chunk_size;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* user_data_ptr;

        [FieldOffset(48)] // size = 4, padding = 0
        public uint user_data_size;

        [FieldOffset(52)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Struct @ sokol_fetch.h:895:3
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct sfetch_response_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public sfetch_handle_t handle;

        [FieldOffset(4)] // size = 1, padding = 0
        public CBool dispatched;

        [FieldOffset(5)] // size = 1, padding = 0
        public CBool fetched;

        [FieldOffset(6)] // size = 1, padding = 0
        public CBool paused;

        [FieldOffset(7)] // size = 1, padding = 0
        public CBool finished;

        [FieldOffset(8)] // size = 1, padding = 0
        public CBool failed;

        [FieldOffset(9)] // size = 1, padding = 2
        public CBool cancelled;

        [FieldOffset(12)] // size = 4, padding = 0
        public sfetch_error_t error_code;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint channel;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint lane;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString path;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* user_data;

        [FieldOffset(40)] // size = 4, padding = 0
        public uint fetched_offset;

        [FieldOffset(44)] // size = 4, padding = 0
        public uint fetched_size;

        [FieldOffset(48)] // size = 8, padding = 0
        public void* buffer_ptr;

        [FieldOffset(56)] // size = 4, padding = 4
        public uint buffer_size;
    }

    // Struct @ sokol_fetch.h:861:3
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct sfetch_desc_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint max_requests;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint num_channels;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint num_lanes;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint _end_canary;
    }

    // Enum @ sokol_fetch.h:875:3
    public enum sfetch_error_t : uint
    {
        SFETCH_ERROR_NO_ERROR = 0U,
        SFETCH_ERROR_FILE_NOT_FOUND = 1U,
        SFETCH_ERROR_NO_BUFFER = 2U,
        SFETCH_ERROR_BUFFER_TOO_SMALL = 3U,
        SFETCH_ERROR_UNEXPECTED_EOF = 4U,
        SFETCH_ERROR_INVALID_HTTP_STATUS = 5U,
        SFETCH_ERROR_CANCELLED = 6U
    }

    private static void _LoadVirtualTable()
    {
        #region "Functions"
        _virtualTable.sfetch_continue = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_continue");
        _virtualTable.sfetch_pause = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_pause");
        _virtualTable.sfetch_cancel = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_cancel");
        _virtualTable.sfetch_unbind_buffer = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void*>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_unbind_buffer");
        _virtualTable.sfetch_bind_buffer = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void*, uint, void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_bind_buffer");
        _virtualTable.sfetch_dowork = (delegate* unmanaged[Cdecl]<void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_dowork");
        _virtualTable.sfetch_handle_valid = (delegate* unmanaged[Cdecl]<sfetch_handle_t, CBool>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_handle_valid");
        _virtualTable.sfetch_send = (delegate* unmanaged[Cdecl]<sfetch_request_t*, sfetch_handle_t>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_send");
        _virtualTable.sfetch_max_path = (delegate* unmanaged[Cdecl]<int>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_max_path");
        _virtualTable.sfetch_max_userdata_bytes = (delegate* unmanaged[Cdecl]<int>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_max_userdata_bytes");
        _virtualTable.sfetch_desc = (delegate* unmanaged[Cdecl]<sfetch_desc_t>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_desc");
        _virtualTable.sfetch_valid = (delegate* unmanaged[Cdecl]<CBool>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_valid");
        _virtualTable.sfetch_shutdown = (delegate* unmanaged[Cdecl]<void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_shutdown");
        _virtualTable.sfetch_setup = (delegate* unmanaged[Cdecl]<sfetch_desc_t*, void>)Runtime.LibraryGetExport(_libraryHandle, "sfetch_setup");
        #endregion

        #region "Variables"

        #endregion
    }

    private static void _UnloadVirtualTable()
    {
        #region "Functions"

        _virtualTable.sfetch_continue = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)IntPtr.Zero;
        _virtualTable.sfetch_pause = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)IntPtr.Zero;
        _virtualTable.sfetch_cancel = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void>)IntPtr.Zero;
        _virtualTable.sfetch_unbind_buffer = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void*>)IntPtr.Zero;
        _virtualTable.sfetch_bind_buffer = (delegate* unmanaged[Cdecl]<sfetch_handle_t, void*, uint, void>)IntPtr.Zero;
        _virtualTable.sfetch_dowork = (delegate* unmanaged[Cdecl]<void>)IntPtr.Zero;
        _virtualTable.sfetch_handle_valid = (delegate* unmanaged[Cdecl]<sfetch_handle_t, CBool>)IntPtr.Zero;
        _virtualTable.sfetch_send = (delegate* unmanaged[Cdecl]<sfetch_request_t*, sfetch_handle_t>)IntPtr.Zero;
        _virtualTable.sfetch_max_path = (delegate* unmanaged[Cdecl]<int>)IntPtr.Zero;
        _virtualTable.sfetch_max_userdata_bytes = (delegate* unmanaged[Cdecl]<int>)IntPtr.Zero;
        _virtualTable.sfetch_desc = (delegate* unmanaged[Cdecl]<sfetch_desc_t>)IntPtr.Zero;
        _virtualTable.sfetch_valid = (delegate* unmanaged[Cdecl]<CBool>)IntPtr.Zero;
        _virtualTable.sfetch_shutdown = (delegate* unmanaged[Cdecl]<void>)IntPtr.Zero;
        _virtualTable.sfetch_setup = (delegate* unmanaged[Cdecl]<sfetch_desc_t*, void>)IntPtr.Zero;

        #endregion

        #region "Variables"



        #endregion
    }

    // The virtual table represents a list of pointers to functions or variables which are resolved in a late manner.
    //	This allows for flexibility in swapping implementations at runtime.
    //	You can think of it in traditional OOP terms in C# as the locations of the virtual methods and/or properties of an object.
    public struct _VirtualTable
    {
        #region "Function Pointers"
        // These pointers hold the locations in the native library where functions are located at runtime.
        // See: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers

        public delegate* unmanaged[Cdecl]<sfetch_handle_t, void> sfetch_continue;
        public delegate* unmanaged[Cdecl]<sfetch_handle_t, void> sfetch_pause;
        public delegate* unmanaged[Cdecl]<sfetch_handle_t, void> sfetch_cancel;
        public delegate* unmanaged[Cdecl]<sfetch_handle_t, void*> sfetch_unbind_buffer;
        public delegate* unmanaged[Cdecl]<sfetch_handle_t, void*, uint, void> sfetch_bind_buffer;
        public delegate* unmanaged[Cdecl]<void> sfetch_dowork;
        public delegate* unmanaged[Cdecl]<sfetch_handle_t, CBool> sfetch_handle_valid;
        public delegate* unmanaged[Cdecl]<sfetch_request_t*, sfetch_handle_t> sfetch_send;
        public delegate* unmanaged[Cdecl]<int> sfetch_max_path;
        public delegate* unmanaged[Cdecl]<int> sfetch_max_userdata_bytes;
        public delegate* unmanaged[Cdecl]<sfetch_desc_t> sfetch_desc;
        public delegate* unmanaged[Cdecl]<CBool> sfetch_valid;
        public delegate* unmanaged[Cdecl]<void> sfetch_shutdown;
        public delegate* unmanaged[Cdecl]<sfetch_desc_t*, void> sfetch_setup;

        #endregion

        #region "Variables"
        // These pointers hold the locations in the native library where global variables are located at runtime.
        //	The value pointed by these pointers are updated by reading/writing memory.



        #endregion
    }

    private static _VirtualTable _virtualTable;
}
