{
  "platforms": [
    "aarch64-apple-darwin",
    "x86_64-apple-darwin"
  ],
  "macroObjects": {
    "SOKOL_TIME_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "SOKOL_GFX_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "SOKOL_FETCH_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "SOKOL_ARGS_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "SOKOL_APP_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "SOKOL_AUDIO_INCLUDED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    }
  },
  "variables": {},
  "functions": {
    "sg_update_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "sg_image_data*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_data",
              "kind": "typeAlias",
              "sizeOf": 1536,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_data",
                "kind": "struct",
                "sizeOf": 1536,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_wgpu_get_resolve_view": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* WebGPU: get swapchain\u0027s MSAA-resolve WGPUTextureView (may return null) */"
    },
    "stm_since": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "start_ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sg_query_buffer_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_buffer_desc",
        "kind": "typeAlias",
        "sizeOf": 96,
        "alignOf": 8,
        "innerType": {
          "name": "sg_buffer_desc",
          "kind": "struct",
          "sizeOf": 96,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_buffer_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_buffer_desc",
              "kind": "typeAlias",
              "sizeOf": 96,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_buffer_desc",
                "kind": "struct",
                "sizeOf": 96,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* get resource creation desc struct with their default values replaced */"
    },
    "sapp_set_icon": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "icon_desc",
          "type": {
            "name": "sapp_icon_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_icon_desc",
              "kind": "typeAlias",
              "sizeOf": 200,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_icon_desc",
                "kind": "struct",
                "sizeOf": 200,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* set the window icon (only on Windows and Linux) */"
    },
    "sg_destroy_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_bind_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "buffer",
          "type": {
            "name": "sfetch_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/* bind a data buffer to a request (request must not currently have a buffer bound, must be called from response callback */"
    },
    "sg_alloc_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pass",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pass",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sg_mtl_device": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Metal: return __bridge-casted MTLDevice */"
    },
    "sapp_show_mouse": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "show",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* show or hide the mouse cursor */"
    },
    "sg_make_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_image",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_image",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_image_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_desc",
              "kind": "typeAlias",
              "sizeOf": 1688,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_desc",
                "kind": "struct",
                "sizeOf": 1688,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sargs_value_at": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* get value string of argument at index, or empty string */"
    },
    "sargs_find": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* get index of arg by key name, return -1 if not exists */"
    },
    "saudio_suspended": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* return true if audio context is currently suspended (only in WebAudio backend, all other backends return false) */"
    },
    "sapp_color_format": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* get default framebuffer color pixel format */"
    },
    "sg_mtl_render_command_encoder": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Metal: return __bridge-casted MTLRenderCommandEncoder in current pass (or zero if outside pass) */"
    },
    "sg_init_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "sg_image_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_desc",
              "kind": "typeAlias",
              "sizeOf": 1688,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_desc",
                "kind": "struct",
                "sizeOf": 1688,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_request_quit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* initiate a \u0022soft quit\u0022 (sends SAPP_EVENTTYPE_QUIT_REQUESTED) */"
    },
    "sapp_quit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* initiate a \u0022hard quit\u0022 (quit application without sending SAPP_EVENTTYPE_QUIT_REQUSTED) */"
    },
    "sg_push_debug_group": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "sg_query_shader_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_shader_info",
        "kind": "typeAlias",
        "sizeOf": 12,
        "alignOf": 4,
        "innerType": {
          "name": "sg_shader_info",
          "kind": "struct",
          "sizeOf": 12,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_macos_get_window": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* macOS: get bridged pointer to macOS NSWindow */"
    },
    "sg_query_image_state": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_resource_state",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_resource_state",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_alloc_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_shader",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_shader",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sapp_wgpu_get_render_view": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* WebGPU: get swapchain\u0027s WGPUTextureView handle for rendering */"
    },
    "sapp_lock_mouse": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "lock",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* enable/disable mouse-pointer-lock mode */"
    },
    "sg_uninit_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_alloc_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_image",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_image",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sg_make_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pipeline",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pipeline",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_pipeline_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pipeline_desc",
              "kind": "typeAlias",
              "sizeOf": 568,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pipeline_desc",
                "kind": "struct",
                "sizeOf": 568,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_wgpu_get_depth_stencil_view": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* WebGPU: get swapchain\u0027s WGPUTextureView for the depth-stencil surface */"
    },
    "sg_init_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "sg_pass_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_desc",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_desc",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sg_fail_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_cancel": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* cancel a request that\u0027s in flight (will call response callback with .cancelled \u002B .finished) */"
    },
    "sapp_consume_event": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* call from inside event callback to consume the current event (don\u0027t forward to platform) */"
    },
    "sargs_exists": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* test if an argument exists by key name */"
    },
    "sg_query_pass_state": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_resource_state",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_resource_state",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sargs_num_args": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* get number of parsed arguments */"
    },
    "sg_fail_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_toggle_fullscreen": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* toggle fullscreen mode */"
    },
    "stm_laptime": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "last_time",
          "type": {
            "name": "uint64_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_d3d11_get_depth_stencil_view": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: get pointer to ID3D11DepthStencilView */"
    },
    "sapp_width": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* returns the current framebuffer width in pixels */"
    },
    "sapp_d3d11_get_device": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: get pointer to ID3D11Device object */"
    },
    "sg_query_image_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_image_info",
        "kind": "typeAlias",
        "sizeOf": 32,
        "alignOf": 4,
        "innerType": {
          "name": "sg_image_info",
          "kind": "struct",
          "sizeOf": 32,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_remove_commit_listener": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "listener",
          "type": {
            "name": "sg_commit_listener",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sg_commit_listener",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sg_query_pipeline_state": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_resource_state",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_resource_state",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_commit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "sapp_high_dpi": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* returns true when high_dpi was requested and actually running in a high-dpi scenario */"
    },
    "sfetch_pause": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* pause a request (will call response callback each frame with .paused) */"
    },
    "sg_query_image_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_image_desc",
        "kind": "typeAlias",
        "sizeOf": 1688,
        "alignOf": 8,
        "innerType": {
          "name": "sg_image_desc",
          "kind": "struct",
          "sizeOf": 1688,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_image_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_desc",
              "kind": "typeAlias",
              "sizeOf": 1688,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_desc",
                "kind": "struct",
                "sizeOf": 1688,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sargs_shutdown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* shutdown sokol-args */"
    },
    "sg_query_pass_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pass_info",
        "kind": "typeAlias",
        "sizeOf": 12,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pass_info",
          "kind": "struct",
          "sizeOf": 12,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_fail_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_is_fullscreen": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* query fullscreen mode */"
    },
    "sapp_query_desc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sapp_desc",
        "kind": "typeAlias",
        "sizeOf": 416,
        "alignOf": 8,
        "innerType": {
          "name": "sapp_desc",
          "kind": "struct",
          "sizeOf": 416,
          "alignOf": 8
        }
      },
      "parameters": [],
      "comment": "/* return a copy of the sapp_desc structure */"
    },
    "sapp_mouse_locked": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* return true if in mouse-pointer-lock mode (this may toggle a few frames later) */"
    },
    "sg_uninit_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sokol_main": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sapp_desc",
        "kind": "typeAlias",
        "sizeOf": 416,
        "alignOf": 8,
        "innerType": {
          "name": "sapp_desc",
          "kind": "struct",
          "sizeOf": 416,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "argc",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "argv",
          "type": {
            "name": "char**",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 8,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/* user-provided functions */"
    },
    "sg_query_desc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_desc",
        "kind": "typeAlias",
        "sizeOf": 280,
        "alignOf": 8,
        "innerType": {
          "name": "sg_desc",
          "kind": "struct",
          "sizeOf": 280,
          "alignOf": 8
        }
      },
      "parameters": [],
      "comment": "/* getting information */"
    },
    "sargs_isvalid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* true between sargs_setup() and sargs_shutdown() */"
    },
    "sapp_egl_get_display": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* EGL: get EGLDisplay object */"
    },
    "sapp_dpi_scale": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* returns the dpi scaling factor (window pixels to framebuffer pixels) */"
    },
    "sg_setup_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_context",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_context",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [],
      "comment": "/* rendering contexts (optional) */"
    },
    "sfetch_desc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sfetch_desc_t",
        "kind": "typeAlias",
        "sizeOf": 56,
        "alignOf": 8,
        "innerType": {
          "name": "sfetch_desc_t",
          "kind": "struct",
          "sizeOf": 56,
          "alignOf": 8
        }
      },
      "parameters": [],
      "comment": "/* get the desc struct that was passed to sfetch_setup() */"
    },
    "sg_apply_viewport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "origin_top_left",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "stm_now": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": []
    },
    "sg_apply_bindings": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "bindings",
          "type": {
            "name": "sg_bindings*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_bindings",
              "kind": "typeAlias",
              "sizeOf": 176,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_bindings",
                "kind": "struct",
                "sizeOf": 176,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "sg_install_trace_hooks": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_trace_hooks",
        "kind": "typeAlias",
        "sizeOf": 488,
        "alignOf": 8,
        "innerType": {
          "name": "sg_trace_hooks",
          "kind": "struct",
          "sizeOf": 488,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "trace_hooks",
          "type": {
            "name": "sg_trace_hooks*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_trace_hooks",
              "kind": "typeAlias",
              "sizeOf": 488,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_trace_hooks",
                "kind": "struct",
                "sizeOf": 488,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sfetch_setup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sfetch_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_desc_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sfetch_desc_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* setup sokol-fetch (can be called on multiple threads) */"
    },
    "saudio_setup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "saudio_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "saudio_desc",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "saudio_desc",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* setup sokol-audio */"
    },
    "sg_fail_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_shutdown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "saudio_userdata": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [],
      "comment": "/* return the saudio_desc.user_data pointer */"
    },
    "sg_destroy_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_get_clipboard_string": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* read string from clipboard (usually during SAPP_EVENTTYPE_CLIPBOARD_PASTED) */"
    },
    "sapp_metal_get_renderpass_descriptor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Metal: get bridged pointer to this frame\u0027s renderpass descriptor */"
    },
    "sg_draw": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "base_element",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "num_elements",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "num_instances",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ]
    },
    "sapp_cancel_quit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* cancel a pending quit (when SAPP_EVENTTYPE_QUIT_REQUESTED has been received) */"
    },
    "sapp_gles2": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* GL: return true when GLES2 fallback is active (to detect fallback from GLES3) */"
    },
    "sg_apply_viewportf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "width",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "origin_top_left",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "sg_begin_default_passf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass_action",
          "type": {
            "name": "sg_pass_action*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_action",
              "kind": "typeAlias",
              "sizeOf": 104,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_action",
                "kind": "struct",
                "sizeOf": 104,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "width",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ]
    },
    "sg_end_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "sg_query_backend": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_backend",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_backend",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sg_uninit_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_set_clipboard_string": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* write string into clipboard */"
    },
    "sargs_equals": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "val",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* return true if val arg matches the value associated with key */"
    },
    "saudio_shutdown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* shutdown sokol-audio */"
    },
    "sg_query_pipeline_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pipeline_desc",
        "kind": "typeAlias",
        "sizeOf": 568,
        "alignOf": 8,
        "innerType": {
          "name": "sg_pipeline_desc",
          "kind": "struct",
          "sizeOf": 568,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_pipeline_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pipeline_desc",
              "kind": "typeAlias",
              "sizeOf": 568,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pipeline_desc",
                "kind": "struct",
                "sizeOf": 568,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sg_dealloc_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_query_features": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_features",
        "kind": "typeAlias",
        "sizeOf": 9,
        "alignOf": 1,
        "innerType": {
          "name": "sg_features",
          "kind": "struct",
          "sizeOf": 9,
          "alignOf": 1
        }
      },
      "parameters": []
    },
    "sg_query_shader_state": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_resource_state",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_resource_state",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_max_path": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* return the value of the SFETCH_MAX_PATH implementation config value */"
    },
    "sapp_frame_duration": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [],
      "comment": "/* get an averaged/smoothed frame duration in seconds */"
    },
    "sg_query_buffer_overflow": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "stm_diff": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "new_ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "old_ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sargs_value_def": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "def",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* get value by key name, return provided default if key doesn\u0027t exist */"
    },
    "sg_query_limits": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_limits",
        "kind": "typeAlias",
        "sizeOf": 28,
        "alignOf": 4,
        "innerType": {
          "name": "sg_limits",
          "kind": "struct",
          "sizeOf": 28,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sg_query_buffer_will_overflow": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "sg_setup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_desc",
              "kind": "typeAlias",
              "sizeOf": 280,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_desc",
                "kind": "struct",
                "sizeOf": 280,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* setup and misc functions */"
    },
    "sg_begin_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "pass_action",
          "type": {
            "name": "sg_pass_action*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_action",
              "kind": "typeAlias",
              "sizeOf": 104,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_action",
                "kind": "struct",
                "sizeOf": 104,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "sapp_show_keyboard": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "show",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* show or hide the mobile device onscreen keyboard */"
    },
    "sfetch_send": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sfetch_handle_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sfetch_handle_t",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "request",
          "type": {
            "name": "sfetch_request_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_request_t",
              "kind": "typeAlias",
              "sizeOf": 64,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sfetch_request_t",
                "kind": "struct",
                "sizeOf": 64,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* send a fetch-request, get handle to request back */"
    },
    "saudio_query_desc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "saudio_desc",
        "kind": "typeAlias",
        "sizeOf": 88,
        "alignOf": 8,
        "innerType": {
          "name": "saudio_desc",
          "kind": "struct",
          "sizeOf": 88,
          "alignOf": 8
        }
      },
      "parameters": [],
      "comment": "/* return a copy of the original saudio_desc struct */"
    },
    "stm_ms": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sg_destroy_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_unbind_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* clear the \u0027buffer binding\u0027 of a request, returns previous buffer pointer (can be 0), must be called from response callback */"
    },
    "sapp_run": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sapp_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_desc",
              "kind": "typeAlias",
              "sizeOf": 416,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_desc",
                "kind": "struct",
                "sizeOf": 416,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* special run-function for SOKOL_NO_ENTRY (in standard mode this is an empty stub) */"
    },
    "sg_query_buffer_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_buffer_info",
        "kind": "typeAlias",
        "sizeOf": 36,
        "alignOf": 4,
        "innerType": {
          "name": "sg_buffer_info",
          "kind": "struct",
          "sizeOf": 36,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* get runtime information about a resource */"
    },
    "sapp_html5_fetch_dropped_file": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "request",
          "type": {
            "name": "sapp_html5_fetch_request*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_html5_fetch_request",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_html5_fetch_request",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* HTML5: asynchronously load the content of a dropped file */"
    },
    "saudio_expect": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* get current number of frames to fill packet queue */"
    },
    "sapp_sample_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* get default framebuffer sample count */"
    },
    "sapp_widthf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* same as sapp_width(), but returns float */"
    },
    "sapp_android_get_native_activity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Android: get native activity handle */"
    },
    "sg_apply_scissor_rectf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "width",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "origin_top_left",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "sg_query_shader_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_shader_desc",
        "kind": "typeAlias",
        "sizeOf": 3048,
        "alignOf": 8,
        "innerType": {
          "name": "sg_shader_desc",
          "kind": "struct",
          "sizeOf": 3048,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_shader_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_desc",
              "kind": "typeAlias",
              "sizeOf": 3048,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_shader_desc",
                "kind": "struct",
                "sizeOf": 3048,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sargs_setup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sargs_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sargs_desc",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sargs_desc",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* setup sokol-args */"
    },
    "sg_make_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pass",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pass",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_pass_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_desc",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_desc",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_html5_get_dropped_file_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "unsigned int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* HTML5: get byte size of a dropped file */"
    },
    "sargs_boolean": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* return true if key\u0027s value is \u0022true\u0022, \u0022yes\u0022 or \u0022on\u0022 */"
    },
    "sg_query_pixelformat": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pixelformat_info",
        "kind": "typeAlias",
        "sizeOf": 6,
        "alignOf": 1,
        "innerType": {
          "name": "sg_pixelformat_info",
          "kind": "struct",
          "sizeOf": 6,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "fmt",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_alloc_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_buffer",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_buffer",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [],
      "comment": "/* separate resource allocation and initialization (for async setup) */"
    },
    "sapp_egl_get_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* EGL: get EGLContext object */"
    },
    "sg_dealloc_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_uninit_image": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "img",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_dowork": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* do per-frame work, moves requests into and out of IO threads, and invokes response-callbacks */"
    },
    "sfetch_shutdown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [],
      "comment": "/* discard a sokol-fetch context */"
    },
    "sapp_wgpu_get_device": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* WebGPU: get WGPUDevice handle */"
    },
    "sfetch_max_userdata_bytes": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* return the max userdata size in number of bytes (SFETCH_MAX_USERDATA_UINT64 * sizeof(uint64_t)) */"
    },
    "sargs_value": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* get value by key name, return empty string if key doesn\u0027t exist */"
    },
    "sg_apply_uniforms": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stage",
          "type": {
            "name": "sg_shader_stage",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader_stage",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "ub_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "data",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_metal_get_drawable": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Metal: get bridged pointer to current drawable */"
    },
    "sg_init_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "sg_shader_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_desc",
              "kind": "typeAlias",
              "sizeOf": 3048,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_shader_desc",
                "kind": "struct",
                "sizeOf": 3048,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "saudio_buffer_frames": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* return actual backend buffer size in number of frames */"
    },
    "sg_make_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_buffer",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_buffer",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_buffer_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_buffer_desc",
              "kind": "typeAlias",
              "sizeOf": 96,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_buffer_desc",
                "kind": "struct",
                "sizeOf": 96,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* resource creation, destruction and updating */"
    },
    "sfetch_continue": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* continue a paused request */"
    },
    "sg_pop_debug_group": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "sg_isvalid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": []
    },
    "sg_update_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_set_window_title": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* set the window title (only on desktop platforms) */"
    },
    "sg_destroy_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_init_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "sg_buffer_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_buffer_desc",
              "kind": "typeAlias",
              "sizeOf": 96,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_buffer_desc",
                "kind": "struct",
                "sizeOf": 96,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_keyboard_shown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* return true if the mobile device onscreen keyboard is currently shown */"
    },
    "sfetch_valid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* return true if sokol-fetch has been setup */"
    },
    "sg_activate_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ctx_id",
          "type": {
            "name": "sg_context",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_context",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sfetch_handle_valid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "h",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* return true if a handle is valid *and* the request is alive */"
    },
    "sg_apply_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_set_mouse_cursor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "sapp_mouse_cursor",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_mouse_cursor",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* set mouse cursor type */"
    },
    "sg_dealloc_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_apply_scissor_rect": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "origin_top_left",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "sapp_userdata": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [],
      "comment": "/* return the userdata pointer optionally provided in sapp_desc */"
    },
    "sg_make_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_shader",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_shader",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_shader_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_desc",
              "kind": "typeAlias",
              "sizeOf": 3048,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_shader_desc",
                "kind": "struct",
                "sizeOf": 3048,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sapp_d3d11_get_render_target_view": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: get pointer to ID3D11RenderTargetView object */"
    },
    "sg_d3d11_device": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: return ID3D11Device */"
    },
    "sapp_get_dropped_file_path": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* gets the dropped file paths */"
    },
    "sapp_html5_ask_leave_site": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ask",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* HTML5: enable or disable the hardwired \u0022Leave Site?\u0022 dialog box */"
    },
    "sapp_get_mouse_cursor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sapp_mouse_cursor",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sapp_mouse_cursor",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [],
      "comment": "/* get current mouse cursor type */"
    },
    "sg_reset_state_cache": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "sapp_metal_get_device": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Metal: get bridged pointer to Metal device object */"
    },
    "sg_add_commit_listener": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "listener",
          "type": {
            "name": "sg_commit_listener",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sg_commit_listener",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "stm_ns": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sapp_isvalid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* returns true after sokol-app has been initialized */"
    },
    "sg_append_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "sg_init_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "sg_pipeline_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pipeline_desc",
              "kind": "typeAlias",
              "sizeOf": 568,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pipeline_desc",
                "kind": "struct",
                "sizeOf": 568,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "stm_us": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "sg_alloc_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pipeline",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pipeline",
          "kind": "struct",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "sapp_frame_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [],
      "comment": "/* get the current frame counter (for comparison with sapp_event.frame_count) */"
    },
    "stm_sec": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "saudio_isvalid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* true after setup if audio backend was successfully initialized */"
    },
    "sapp_d3d11_get_swap_chain": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: get pointer to IDXGISwapChain object */"
    },
    "sapp_get_num_dropped_files": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* gets the total number of dropped files (after an SAPP_EVENTTYPE_FILES_DROPPED event) */"
    },
    "sg_dealloc_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_ios_get_window": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* iOS: get bridged pointer to iOS UIWindow */"
    },
    "sapp_height": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* returns the current framebuffer height in pixels */"
    },
    "saudio_channels": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* actual number of channels */"
    },
    "sg_query_pass_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pass_desc",
        "kind": "typeAlias",
        "sizeOf": 80,
        "alignOf": 8,
        "innerType": {
          "name": "sg_pass_desc",
          "kind": "struct",
          "sizeOf": 80,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "sg_pass_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_desc",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_desc",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "saudio_push": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "frames",
          "type": {
            "name": "const float*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4,
              "isConst": true
            }
          }
        },
        {
          "name": "num_frames",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* push sample frames from main thread, returns number of frames actually pushed */"
    },
    "sg_discard_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ctx_id",
          "type": {
            "name": "sg_context",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_context",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_fail_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "stm_round_to_common_refresh_rate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "frame_ticks",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "saudio_sample_rate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* actual sample rate */"
    },
    "sapp_heightf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* same as sapp_height(), but returns float */"
    },
    "sg_destroy_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_uninit_buffer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_depth_format": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/* get default framebuffer depth pixel format */"
    },
    "sapp_d3d11_get_device_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* D3D11: get pointer to ID3D11DeviceContext object */"
    },
    "sg_query_buffer_state": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_resource_state",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "sg_resource_state",
          "kind": "enum",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "buf",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* get current state of a resource (INITIAL, ALLOC, VALID, FAILED, INVALID) */"
    },
    "sargs_key_at": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* get key name of argument at index, or empty string */"
    },
    "sg_query_pipeline_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_pipeline_info",
        "kind": "typeAlias",
        "sizeOf": 12,
        "alignOf": 4,
        "innerType": {
          "name": "sg_pipeline_info",
          "kind": "struct",
          "sizeOf": 12,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "pip",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_dealloc_shader": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "shd",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_sgcontext": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "sg_context_desc",
        "kind": "typeAlias",
        "sizeOf": 184,
        "alignOf": 8,
        "innerType": {
          "name": "sg_context_desc",
          "kind": "struct",
          "sizeOf": 184,
          "alignOf": 8
        }
      },
      "parameters": []
    },
    "sapp_mouse_shown": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/* show or hide the mouse cursor */"
    },
    "stm_setup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "sg_begin_default_pass": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "pass_action",
          "type": {
            "name": "sg_pass_action*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_action",
              "kind": "typeAlias",
              "sizeOf": 104,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_action",
                "kind": "struct",
                "sizeOf": 104,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/* rendering functions */"
    },
    "sapp_win32_get_hwnd": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [],
      "comment": "/* Win32: get the HWND window handle */"
    }
  },
  "records": {
    "sg_range": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "ptr",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sg_range is a pointer-size-pair struct used to pass memory blobs into\n    sokol-gfx. When initialized from a value type (array or struct), you can\n    use the SG_RANGE() macro to build an sg_range struct. For functions which\n    take either a sg_range pointer, or a (C\u002B\u002B) sg_range reference, use the\n    SG_RANGE_REF macro as a solution which compiles both in C and C\u002B\u002B.\n*/"
    },
    "sg_shader_stage_desc": {
      "size_of": 1320,
      "align_of": 8,
      "fields": [
        {
          "name": "source",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "bytecode",
          "type": {
            "name": "sg_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 8
        },
        {
          "name": "entry",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 24
        },
        {
          "name": "d3d11_target",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 32
        },
        {
          "name": "uniform_blocks",
          "type": {
            "name": "sg_shader_uniform_block_desc[4]",
            "kind": "array",
            "sizeOf": 1088,
            "alignOf": 8,
            "sizeOfElement": 272,
            "arraySize": 4,
            "innerType": {
              "name": "sg_shader_uniform_block_desc",
              "kind": "typeAlias",
              "sizeOf": 272,
              "alignOf": 8,
              "innerType": {
                "name": "sg_shader_uniform_block_desc",
                "kind": "struct",
                "sizeOf": 272,
                "alignOf": 8
              }
            }
          },
          "offset_of": 40
        },
        {
          "name": "images",
          "type": {
            "name": "sg_shader_image_desc[12]",
            "kind": "array",
            "sizeOf": 192,
            "alignOf": 8,
            "sizeOfElement": 16,
            "arraySize": 12,
            "innerType": {
              "name": "sg_shader_image_desc",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "sg_shader_image_desc",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 1128
        }
      ]
    },
    "sg_image_desc": {
      "size_of": 1688,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "sg_image_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "render_target",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16
        },
        {
          "name": "num_slices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20
        },
        {
          "name": "num_mipmaps",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 24
        },
        {
          "name": "usage",
          "type": {
            "name": "sg_usage",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_usage",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 28
        },
        {
          "name": "pixel_format",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 32
        },
        {
          "name": "sample_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 36
        },
        {
          "name": "min_filter",
          "type": {
            "name": "sg_filter",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_filter",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 40
        },
        {
          "name": "mag_filter",
          "type": {
            "name": "sg_filter",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_filter",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 44
        },
        {
          "name": "wrap_u",
          "type": {
            "name": "sg_wrap",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_wrap",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 48
        },
        {
          "name": "wrap_v",
          "type": {
            "name": "sg_wrap",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_wrap",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 52
        },
        {
          "name": "wrap_w",
          "type": {
            "name": "sg_wrap",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_wrap",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 56
        },
        {
          "name": "border_color",
          "type": {
            "name": "sg_border_color",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_border_color",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 60
        },
        {
          "name": "max_anisotropy",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 64
        },
        {
          "name": "min_lod",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 68
        },
        {
          "name": "max_lod",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 72
        },
        {
          "name": "data",
          "type": {
            "name": "sg_image_data",
            "kind": "typeAlias",
            "sizeOf": 1536,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_data",
              "kind": "struct",
              "sizeOf": 1536,
              "alignOf": 8
            }
          },
          "offset_of": 80
        },
        {
          "name": "label",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 1616
        },
        {
          "name": "gl_textures",
          "type": {
            "name": "uint32_t[2]",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 2,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 1624,
          "comment": "/* GL specific */"
        },
        {
          "name": "gl_texture_target",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1632
        },
        {
          "name": "mtl_textures",
          "type": {
            "name": "const void*[2]",
            "kind": "array",
            "sizeOf": 16,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 2,
            "innerType": {
              "name": "const void*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "const void",
                "kind": "primitive",
                "isConst": true
              }
            }
          },
          "offset_of": 1640,
          "comment": "/* Metal specific */"
        },
        {
          "name": "d3d11_texture",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 1656,
          "comment": "/* D3D11 specific */"
        },
        {
          "name": "d3d11_shader_resource_view",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 1664
        },
        {
          "name": "wgpu_texture",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 1672,
          "comment": "/* WebGPU specific */"
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1680
        }
      ],
      "comment": "/*\n    sg_image_desc\n\n    Creation parameters for sg_image objects, used in the sg_make_image()\n    call.\n\n    The default configuration is:\n\n    .type:              SG_IMAGETYPE_2D\n    .render_target:     false\n    .width              0 (must be set to \u003E0)\n    .height             0 (must be set to \u003E0)\n    .num_slices         1 (3D textures: depth; array textures: number of layers)\n    .num_mipmaps:       1\n    .usage:             SG_USAGE_IMMUTABLE\n    .pixel_format:      SG_PIXELFORMAT_RGBA8 for textures, or sg_desc.context.color_format for render targets\n    .sample_count:      1 for textures, or sg_desc.context.sample_count for render targets\n    .min_filter:        SG_FILTER_NEAREST\n    .mag_filter:        SG_FILTER_NEAREST\n    .wrap_u:            SG_WRAP_REPEAT\n    .wrap_v:            SG_WRAP_REPEAT\n    .wrap_w:            SG_WRAP_REPEAT (only SG_IMAGETYPE_3D)\n    .border_color       SG_BORDERCOLOR_OPAQUE_BLACK\n    .max_anisotropy     1 (must be 1..16)\n    .min_lod            0.0f\n    .max_lod            FLT_MAX\n    .data               an sg_image_data struct to define the initial content\n    .label              0       (optional string label for trace hooks)\n\n    Q: Why is the default sample_count for render targets identical with the\n    \u0022default sample count\u0022 from sg_desc.context.sample_count?\n\n    A: So that it matches the default sample count in pipeline objects. Even\n    though it is a bit strange/confusing that offscreen render targets by default\n    get the same sample count as the default framebuffer, but it\u0027s better that\n    an offscreen render target created with default parameters matches\n    a pipeline object created with default parameters.\n\n    NOTE:\n\n    SG_IMAGETYPE_ARRAY and SG_IMAGETYPE_3D are not supported on WebGL/GLES2,\n    use sg_query_features().imagetype_array and\n    sg_query_features().imagetype_3d at runtime to check if array- and\n    3D-textures are supported.\n\n    Images with usage SG_USAGE_IMMUTABLE must be fully initialized by\n    providing a valid .data member which points to initialization data.\n\n    ADVANCED TOPIC: Injecting native 3D-API textures:\n\n    The following struct members allow to inject your own GL, Metal or D3D11\n    textures into sokol_gfx:\n\n    .gl_textures[SG_NUM_INFLIGHT_FRAMES]\n    .mtl_textures[SG_NUM_INFLIGHT_FRAMES]\n    .d3d11_texture\n    .d3d11_shader_resource_view\n\n    For GL, you can also specify the texture target or leave it empty to use\n    the default texture target for the image type (GL_TEXTURE_2D for\n    SG_IMAGETYPE_2D etc)\n\n    For D3D11, you can provide either a D3D11 texture, or a\n    shader-resource-view, or both. If only a texture is provided, a matching\n    shader-resource-view will be created. If only a shader-resource-view is\n    provided, the texture will be looked up from the shader-resource-view.\n\n    The same rules apply as for injecting native buffers (see sg_buffer_desc\n    documentation for more details).\n*/"
    },
    "sg_color_attachment_action": {
      "size_of": 20,
      "align_of": 4,
      "fields": [
        {
          "name": "action",
          "type": {
            "name": "sg_action",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_action",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "sg_color",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 4,
            "innerType": {
              "name": "sg_color",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 4
            }
          },
          "offset_of": 4
        }
      ],
      "comment": "/*\n    sg_pass_action\n\n    The sg_pass_action struct defines the actions to be performed\n    at the start of a rendering pass in the functions sg_begin_pass()\n    and sg_begin_default_pass().\n\n    A separate action and clear values can be defined for each\n    color attachment, and for the depth-stencil attachment.\n\n    The default clear values are defined by the macros:\n\n    - SG_DEFAULT_CLEAR_RED:     0.5f\n    - SG_DEFAULT_CLEAR_GREEN:   0.5f\n    - SG_DEFAULT_CLEAR_BLUE:    0.5f\n    - SG_DEFAULT_CLEAR_ALPHA:   1.0f\n    - SG_DEFAULT_CLEAR_DEPTH:   1.0f\n    - SG_DEFAULT_CLEAR_STENCIL: 0\n*/"
    },
    "sg_gl_context_desc": {
      "size_of": 1,
      "align_of": 1,
      "fields": [
        {
          "name": "force_gles2",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/*\n    sg_desc\n\n    The sg_desc struct contains configuration values for sokol_gfx,\n    it is used as parameter to the sg_setup() call.\n\n    NOTE that all callback function pointers come in two versions, one without\n    a userdata pointer, and one with a userdata pointer. You would\n    either initialize one or the other depending on whether you pass data\n    to your callbacks.\n\n    FIXME: explain the various configuration options\n\n    The default configuration is:\n\n    .buffer_pool_size       128\n    .image_pool_size        128\n    .shader_pool_size       32\n    .pipeline_pool_size     64\n    .pass_pool_size         16\n    .context_pool_size      16\n    .uniform_buffer_size    4 MB (4*1024*1024)\n    .staging_buffer_size    8 MB (8*1024*1024)\n    .sampler_cache_size     64\n    .max_commit_listeners   1024\n    .disable_validation     false\n\n    .allocator.alloc        0 (in this case, malloc() will be called)\n    .allocator.free         0 (in this case, free() will be called)\n    .allocator.user_data    0\n\n    .context.color_format: default value depends on selected backend:\n        all GL backends:    SG_PIXELFORMAT_RGBA8\n        Metal and D3D11:    SG_PIXELFORMAT_BGRA8\n        WGPU:               *no default* (must be queried from WGPU swapchain)\n    .context.depth_format   SG_PIXELFORMAT_DEPTH_STENCIL\n    .context.sample_count   1\n\n    GL specific:\n        .context.gl.force_gles2\n            if this is true the GL backend will act in \u0022GLES2 fallback mode\u0022 even\n            when compiled with SOKOL_GLES3, this is useful to fall back\n            to traditional WebGL if a browser doesn\u0027t support a WebGL2 context\n\n    Metal specific:\n        (NOTE: All Objective-C object references are transferred through\n        a bridged (const void*) to sokol_gfx, which will use a unretained\n        bridged cast (__bridged id\u003Cxxx\u003E) to retrieve the Objective-C\n        references back. Since the bridge cast is unretained, the caller\n        must hold a strong reference to the Objective-C object for the\n        duration of the sokol_gfx call!\n\n        .context.metal.device\n            a pointer to the MTLDevice object\n        .context.metal.renderpass_descriptor_cb\n        .context.metal_renderpass_descriptor_userdata_cb\n            A C callback function to obtain the MTLRenderPassDescriptor for the\n            current frame when rendering to the default framebuffer, will be called\n            in sg_begin_default_pass().\n        .context.metal.drawable_cb\n        .context.metal.drawable_userdata_cb\n            a C callback function to obtain a MTLDrawable for the current\n            frame when rendering to the default framebuffer, will be called in\n            sg_end_pass() of the default pass\n        .context.metal.user_data\n            optional user data pointer passed to the userdata versions of\n            callback functions\n\n    D3D11 specific:\n        .context.d3d11.device\n            a pointer to the ID3D11Device object, this must have been created\n            before sg_setup() is called\n        .context.d3d11.device_context\n            a pointer to the ID3D11DeviceContext object\n        .context.d3d11.render_target_view_cb\n        .context.d3d11.render_target_view_userdata_cb\n            a C callback function to obtain a pointer to the current\n            ID3D11RenderTargetView object of the default framebuffer,\n            this function will be called in sg_begin_pass() when rendering\n            to the default framebuffer\n        .context.d3d11.depth_stencil_view_cb\n        .context.d3d11.depth_stencil_view_userdata_cb\n            a C callback function to obtain a pointer to the current\n            ID3D11DepthStencilView object of the default framebuffer,\n            this function will be called in sg_begin_pass() when rendering\n            to the default framebuffer\n        .context.metal.user_data\n            optional user data pointer passed to the userdata versions of\n            callback functions\n\n    WebGPU specific:\n        .context.wgpu.device\n            a WGPUDevice handle\n        .context.wgpu.render_format\n            WGPUTextureFormat of the swap chain surface\n        .context.wgpu.render_view_cb\n        .context.wgpu.render_view_userdata_cb\n            callback to get the current WGPUTextureView of the swapchain\u0027s\n            rendering attachment (may be an MSAA surface)\n        .context.wgpu.resolve_view_cb\n        .context.wgpu.resolve_view_userdata_cb\n            callback to get the current WGPUTextureView of the swapchain\u0027s\n            MSAA-resolve-target surface, must return 0 if not MSAA rendering\n        .context.wgpu.depth_stencil_view_cb\n        .context.wgpu.depth_stencil_view_userdata_cb\n            callback to get current default-pass depth-stencil-surface WGPUTextureView\n            the pixel format of the default WGPUTextureView must be WGPUTextureFormat_Depth24Plus8\n        .context.metal.user_data\n            optional user data pointer passed to the userdata versions of\n            callback functions\n\n    When using sokol_gfx.h and sokol_app.h together, consider using the\n    helper function sapp_sgcontext() in the sokol_glue.h header to\n    initialize the sg_desc.context nested struct. sapp_sgcontext() returns\n    a completely initialized sg_context_desc struct with information\n    provided by sokol_app.h.\n*/"
    },
    "sg_shader_uniform_block_desc": {
      "size_of": 272,
      "align_of": 8,
      "fields": [
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "layout",
          "type": {
            "name": "sg_uniform_layout",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_uniform_layout",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "uniforms",
          "type": {
            "name": "sg_shader_uniform_desc[16]",
            "kind": "array",
            "sizeOf": 256,
            "alignOf": 8,
            "sizeOfElement": 16,
            "arraySize": 16,
            "innerType": {
              "name": "sg_shader_uniform_desc",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "sg_shader_uniform_desc",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 16
        }
      ]
    },
    "sg_pass_desc": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "color_attachments",
          "type": {
            "name": "sg_pass_attachment_desc[4]",
            "kind": "array",
            "sizeOf": 48,
            "alignOf": 8,
            "sizeOfElement": 12,
            "arraySize": 4,
            "innerType": {
              "name": "sg_pass_attachment_desc",
              "kind": "typeAlias",
              "sizeOf": 12,
              "alignOf": 4,
              "innerType": {
                "name": "sg_pass_attachment_desc",
                "kind": "struct",
                "sizeOf": 12,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4
        },
        {
          "name": "depth_stencil_attachment",
          "type": {
            "name": "sg_pass_attachment_desc",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass_attachment_desc",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "offset_of": 52
        },
        {
          "name": "label",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 64
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 72
        }
      ]
    },
    "sg_shader_attr_desc": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "comment": "// GLSL vertex attribute name (only strictly required for GLES2)"
        },
        {
          "name": "sem_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "// HLSL semantic name"
        },
        {
          "name": "sem_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16,
          "comment": "// HLSL semantic index"
        }
      ],
      "comment": "/*\n    sg_shader_desc\n\n    The structure sg_shader_desc defines all creation parameters for shader\n    programs, used as input to the sg_make_shader() function:\n\n    - reflection information for vertex attributes (vertex shader inputs):\n        - vertex attribute name (required for GLES2, optional for GLES3 and GL)\n        - a semantic name and index (required for D3D11)\n    - for each shader-stage (vertex and fragment):\n        - the shader source or bytecode\n        - an optional entry function name\n        - an optional compile target (only for D3D11 when source is provided,\n          defaults are \u0022vs_4_0\u0022 and \u0022ps_4_0\u0022)\n        - reflection info for each uniform block used by the shader stage:\n            - the size of the uniform block in bytes\n            - a memory layout hint (native vs std140, only required for GL backends)\n            - reflection info for each uniform block member (only required for GL backends):\n                - member name\n                - member type (SG_UNIFORMTYPE_xxx)\n                - if the member is an array, the number of array items\n        - reflection info for the texture images used by the shader stage:\n            - the image type (SG_IMAGETYPE_xxx)\n            - the sampler type (SG_SAMPLERTYPE_xxx, default is SG_SAMPLERTYPE_FLOAT)\n            - the name of the texture sampler (required for GLES2, optional everywhere else)\n\n    For all GL backends, shader source-code must be provided. For D3D11 and Metal,\n    either shader source-code or byte-code can be provided.\n\n    For D3D11, if source code is provided, the d3dcompiler_47.dll will be loaded\n    on demand. If this fails, shader creation will fail. When compiling HLSL\n    source code, you can provide an optional target string via\n    sg_shader_stage_desc.d3d11_target, the default target is \u0022vs_4_0\u0022 for the\n    vertex shader stage and \u0022ps_4_0\u0022 for the pixel shader stage.\n*/"
    },
    "sapp_html5_fetch_response": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "succeeded",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "// true if the loading operation has succeeded"
        },
        {
          "name": "error_code",
          "type": {
            "name": "sapp_html5_fetch_error",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_html5_fetch_error",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "file_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8,
          "comment": "// index of the dropped file (0..sapp_get_num_dropped_filed()-1)"
        },
        {
          "name": "data",
          "type": {
            "name": "sapp_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "// pointer and size of the fetched data (data.ptr == buffer.ptr, data.size \u003C= buffer.size)"
        },
        {
          "name": "buffer",
          "type": {
            "name": "sapp_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 32,
          "comment": "// the user-provided buffer ptr/size pair (buffer.ptr == data.ptr, buffer.size \u003E= data.size)"
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 48,
          "comment": "// user-provided user data pointer"
        }
      ]
    },
    "sg_metal_context_desc": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "device",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "renderpass_descriptor_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "renderpass_descriptor_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "drawable_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24
        },
        {
          "name": "drawable_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 40
        }
      ]
    },
    "sg_context": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_stencil_state": {
      "size_of": 40,
      "align_of": 4,
      "fields": [
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "front",
          "type": {
            "name": "sg_stencil_face_state",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_face_state",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "back",
          "type": {
            "name": "sg_stencil_face_state",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_face_state",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 4
            }
          },
          "offset_of": 20
        },
        {
          "name": "read_mask",
          "type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "unsigned char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 36
        },
        {
          "name": "write_mask",
          "type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "unsigned char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 37
        },
        {
          "name": "ref",
          "type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "unsigned char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 38
        }
      ]
    },
    "sapp_html5_fetch_request": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "dropped_file_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "// 0..sapp_get_num_dropped_files()-1"
        },
        {
          "name": "callback",
          "type": {
            "name": "void (const sapp_html5_fetch_response *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8,
          "comment": "// response callback function pointer (required)"
        },
        {
          "name": "buffer",
          "type": {
            "name": "sapp_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "// ptr/size of a memory buffer to load the data into"
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 32,
          "comment": "// optional userdata pointer"
        }
      ]
    },
    "sapp_icon_desc": {
      "size_of": 200,
      "align_of": 8,
      "fields": [
        {
          "name": "sokol_default",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "images",
          "type": {
            "name": "sapp_image_desc[8]",
            "kind": "array",
            "sizeOf": 192,
            "alignOf": 8,
            "sizeOfElement": 24,
            "arraySize": 8,
            "innerType": {
              "name": "sapp_image_desc",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "sapp_image_desc",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sapp_icon_desc\n\n    An icon description structure for use in sapp_desc.icon and\n    sapp_set_icon().\n\n    When setting a custom image, the application can provide a number of\n    candidates differing in size, and sokol_app.h will pick the image(s)\n    closest to the size expected by the platform\u0027s window system.\n\n    To set sokol-app\u0027s default icon, set .sokol_default to true.\n\n    Otherwise provide candidate images of different sizes in the\n    images[] array.\n\n    If both the sokol_default flag is set to true, any image candidates\n    will be ignored and the sokol_app.h default icon will be set.\n*/"
    },
    "sargs_desc": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "argc",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "argv",
          "type": {
            "name": "char**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "max_args",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16
        },
        {
          "name": "buf_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20
        },
        {
          "name": "allocator",
          "type": {
            "name": "sargs_allocator",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "sargs_allocator",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 24
        }
      ]
    },
    "sfetch_desc_t": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "max_requests",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "// max number of active requests across all channels (default: 128)"
        },
        {
          "name": "num_channels",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4,
          "comment": "// number of channels to fetch requests in parallel (default: 1)"
        },
        {
          "name": "num_lanes",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "// max number of requests active on the same channel (default: 1)"
        },
        {
          "name": "allocator",
          "type": {
            "name": "sfetch_allocator_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_allocator_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "// optional memory allocation overrides (default: malloc/free)"
        },
        {
          "name": "logger",
          "type": {
            "name": "sfetch_logger_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_logger_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 40,
          "comment": "// optional log function overrides (default: SOKOL_LOG(message))"
        }
      ],
      "comment": "/* configuration values for sfetch_setup() */"
    },
    "sapp_image_desc": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        },
        {
          "name": "pixels",
          "type": {
            "name": "sapp_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sapp_image_desc\n\n    This is used to describe image data to sokol_app.h (at first, window\n    icons, later maybe cursor images).\n\n    Note that the actual image pixel format depends on the use case:\n\n    - window icon pixels are RGBA8\n    - cursor images are ??? (FIXME)\n*/"
    },
    "sargs_allocator": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc",
          "type": {
            "name": "void *(size_t, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "free",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/*\n    sargs_allocator\n\n    Used in sargs_desc to provide custom memory-alloc and -free functions\n    to sokol_args.h. If memory management should be overridden, both the\n    alloc and free function must be provided (e.g. it\u0027s not valid to\n    override one function but not the other).\n*/"
    },
    "sg_depth_attachment_action": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "action",
          "type": {
            "name": "sg_action",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_action",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        }
      ]
    },
    "sg_trace_hooks": {
      "size_of": 488,
      "align_of": 8,
      "fields": [
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "reset_state_cache",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "make_buffer",
          "type": {
            "name": "void (const sg_buffer_desc *, sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "make_image",
          "type": {
            "name": "void (const sg_image_desc *, sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24
        },
        {
          "name": "make_shader",
          "type": {
            "name": "void (const sg_shader_desc *, sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32
        },
        {
          "name": "make_pipeline",
          "type": {
            "name": "void (const sg_pipeline_desc *, sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 40
        },
        {
          "name": "make_pass",
          "type": {
            "name": "void (const sg_pass_desc *, sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 48
        },
        {
          "name": "destroy_buffer",
          "type": {
            "name": "void (sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 56
        },
        {
          "name": "destroy_image",
          "type": {
            "name": "void (sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 64
        },
        {
          "name": "destroy_shader",
          "type": {
            "name": "void (sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 72
        },
        {
          "name": "destroy_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 80
        },
        {
          "name": "destroy_pass",
          "type": {
            "name": "void (sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 88
        },
        {
          "name": "update_buffer",
          "type": {
            "name": "void (sg_buffer, const sg_range *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 96
        },
        {
          "name": "update_image",
          "type": {
            "name": "void (sg_image, const sg_image_data *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 104
        },
        {
          "name": "append_buffer",
          "type": {
            "name": "void (sg_buffer, const sg_range *, int, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 112
        },
        {
          "name": "begin_default_pass",
          "type": {
            "name": "void (const sg_pass_action *, int, int, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 120
        },
        {
          "name": "begin_pass",
          "type": {
            "name": "void (sg_pass, const sg_pass_action *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 128
        },
        {
          "name": "apply_viewport",
          "type": {
            "name": "void (int, int, int, int, _Bool, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 136
        },
        {
          "name": "apply_scissor_rect",
          "type": {
            "name": "void (int, int, int, int, _Bool, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 144
        },
        {
          "name": "apply_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 152
        },
        {
          "name": "apply_bindings",
          "type": {
            "name": "void (const sg_bindings *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 160
        },
        {
          "name": "apply_uniforms",
          "type": {
            "name": "void (sg_shader_stage, int, const sg_range *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 168
        },
        {
          "name": "draw",
          "type": {
            "name": "void (int, int, int, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 176
        },
        {
          "name": "end_pass",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 184
        },
        {
          "name": "commit",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 192
        },
        {
          "name": "alloc_buffer",
          "type": {
            "name": "void (sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 200
        },
        {
          "name": "alloc_image",
          "type": {
            "name": "void (sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 208
        },
        {
          "name": "alloc_shader",
          "type": {
            "name": "void (sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 216
        },
        {
          "name": "alloc_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 224
        },
        {
          "name": "alloc_pass",
          "type": {
            "name": "void (sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 232
        },
        {
          "name": "dealloc_buffer",
          "type": {
            "name": "void (sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 240
        },
        {
          "name": "dealloc_image",
          "type": {
            "name": "void (sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 248
        },
        {
          "name": "dealloc_shader",
          "type": {
            "name": "void (sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 256
        },
        {
          "name": "dealloc_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 264
        },
        {
          "name": "dealloc_pass",
          "type": {
            "name": "void (sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 272
        },
        {
          "name": "init_buffer",
          "type": {
            "name": "void (sg_buffer, const sg_buffer_desc *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 280
        },
        {
          "name": "init_image",
          "type": {
            "name": "void (sg_image, const sg_image_desc *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 288
        },
        {
          "name": "init_shader",
          "type": {
            "name": "void (sg_shader, const sg_shader_desc *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 296
        },
        {
          "name": "init_pipeline",
          "type": {
            "name": "void (sg_pipeline, const sg_pipeline_desc *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 304
        },
        {
          "name": "init_pass",
          "type": {
            "name": "void (sg_pass, const sg_pass_desc *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 312
        },
        {
          "name": "uninit_buffer",
          "type": {
            "name": "void (sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 320
        },
        {
          "name": "uninit_image",
          "type": {
            "name": "void (sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 328
        },
        {
          "name": "uninit_shader",
          "type": {
            "name": "void (sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 336
        },
        {
          "name": "uninit_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 344
        },
        {
          "name": "uninit_pass",
          "type": {
            "name": "void (sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 352
        },
        {
          "name": "fail_buffer",
          "type": {
            "name": "void (sg_buffer, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 360
        },
        {
          "name": "fail_image",
          "type": {
            "name": "void (sg_image, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 368
        },
        {
          "name": "fail_shader",
          "type": {
            "name": "void (sg_shader, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 376
        },
        {
          "name": "fail_pipeline",
          "type": {
            "name": "void (sg_pipeline, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 384
        },
        {
          "name": "fail_pass",
          "type": {
            "name": "void (sg_pass, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 392
        },
        {
          "name": "push_debug_group",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 400
        },
        {
          "name": "pop_debug_group",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 408
        },
        {
          "name": "err_buffer_pool_exhausted",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 416
        },
        {
          "name": "err_image_pool_exhausted",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 424
        },
        {
          "name": "err_shader_pool_exhausted",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 432
        },
        {
          "name": "err_pipeline_pool_exhausted",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 440
        },
        {
          "name": "err_pass_pool_exhausted",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 448
        },
        {
          "name": "err_context_mismatch",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 456
        },
        {
          "name": "err_pass_invalid",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 464
        },
        {
          "name": "err_draw_invalid",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 472
        },
        {
          "name": "err_bindings_invalid",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 480
        }
      ],
      "comment": "/*\n    sg_trace_hooks\n\n    Installable callback functions to keep track of the sokol-gfx calls,\n    this is useful for debugging, or keeping track of resource creation\n    and destruction.\n\n    Trace hooks are installed with sg_install_trace_hooks(), this returns\n    another sg_trace_hooks struct with the previous set of\n    trace hook function pointers. These should be invoked by the\n    new trace hooks to form a proper call chain.\n*/"
    },
    "sapp_touchpoint": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "identifier",
          "type": {
            "name": "uintptr_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "pos_x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8
        },
        {
          "name": "pos_y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        },
        {
          "name": "android_tooltype",
          "type": {
            "name": "sapp_android_tooltype",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_android_tooltype",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "// only valid on Android"
        },
        {
          "name": "changed",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 20
        }
      ],
      "comment": "/*\n    sapp_touchpoint\n\n    Describes a single touchpoint in a multitouch event (TOUCHES_BEGAN,\n    TOUCHES_MOVED, TOUCHES_ENDED).\n\n    Touch points are stored in the nested array sapp_event.touches[],\n    and the number of touches is stored in sapp_event.num_touches.\n*/"
    },
    "sg_wgpu_context_desc": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "device",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "comment": "/* WGPUDevice */"
        },
        {
          "name": "render_view_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8,
          "comment": "/* returns WGPUTextureView */"
        },
        {
          "name": "render_view_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "resolve_view_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24,
          "comment": "/* returns WGPUTextureView */"
        },
        {
          "name": "resolve_view_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32
        },
        {
          "name": "depth_stencil_view_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 40,
          "comment": "/* returns WGPUTextureView, must be WGPUTextureFormat_Depth24Plus8 */"
        },
        {
          "name": "depth_stencil_view_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 48
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 56
        }
      ]
    },
    "sg_layout_desc": {
      "size_of": 288,
      "align_of": 4,
      "fields": [
        {
          "name": "buffers",
          "type": {
            "name": "sg_buffer_layout_desc[8]",
            "kind": "array",
            "sizeOf": 96,
            "alignOf": 8,
            "sizeOfElement": 12,
            "arraySize": 8,
            "innerType": {
              "name": "sg_buffer_layout_desc",
              "kind": "typeAlias",
              "sizeOf": 12,
              "alignOf": 4,
              "innerType": {
                "name": "sg_buffer_layout_desc",
                "kind": "struct",
                "sizeOf": 12,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "attrs",
          "type": {
            "name": "sg_vertex_attr_desc[16]",
            "kind": "array",
            "sizeOf": 192,
            "alignOf": 8,
            "sizeOfElement": 12,
            "arraySize": 16,
            "innerType": {
              "name": "sg_vertex_attr_desc",
              "kind": "typeAlias",
              "sizeOf": 12,
              "alignOf": 4,
              "innerType": {
                "name": "sg_vertex_attr_desc",
                "kind": "struct",
                "sizeOf": 12,
                "alignOf": 4
              }
            }
          },
          "offset_of": 96
        }
      ]
    },
    "sfetch_response_t": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "handle",
          "type": {
            "name": "sfetch_handle_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_handle_t",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "// request handle this response belongs to"
        },
        {
          "name": "dispatched",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "// true when request is in DISPATCHED state (lane has been assigned)"
        },
        {
          "name": "fetched",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "// true when request is in FETCHED state (fetched data is available)"
        },
        {
          "name": "paused",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 6,
          "comment": "// request is currently in paused state"
        },
        {
          "name": "finished",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 7,
          "comment": "// this is the last response for this request"
        },
        {
          "name": "failed",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8,
          "comment": "// request has failed (always set together with \u0027finished\u0027)"
        },
        {
          "name": "cancelled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 9,
          "comment": "// request was cancelled (always set together with \u0027finished\u0027)"
        },
        {
          "name": "error_code",
          "type": {
            "name": "sfetch_error_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sfetch_error_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "// more detailed error code when failed is true"
        },
        {
          "name": "channel",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "// the channel which processes this request"
        },
        {
          "name": "lane",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20,
          "comment": "// the lane this request occupies on its channel"
        },
        {
          "name": "path",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 24,
          "comment": "// the original filesystem path of the request"
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 32,
          "comment": "// pointer to read/write user-data area"
        },
        {
          "name": "data_offset",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 40,
          "comment": "// current offset of fetched data chunk in the overall file data"
        },
        {
          "name": "data",
          "type": {
            "name": "sfetch_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "// the fetched data as ptr/size pair (data.ptr == buffer.ptr, data.size \u003C= buffer.size)"
        },
        {
          "name": "buffer",
          "type": {
            "name": "sfetch_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 64,
          "comment": "// the user-provided buffer which holds the fetched data"
        }
      ],
      "comment": "/* the response struct passed to the response callback */"
    },
    "sg_pass": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_shader_image_desc": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "image_type",
          "type": {
            "name": "sg_image_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "sampler_type",
          "type": {
            "name": "sg_sampler_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_sampler_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12
        }
      ]
    },
    "saudio_logger": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "log_cb",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    saudio_logger\n\n    Used in saudio_desc to provide custom log callbacks to sokol_audio.h.\n    Default behavior is SOKOL_LOG(message).\n*/"
    },
    "sg_image_info": {
      "size_of": 32,
      "align_of": 4,
      "fields": [
        {
          "name": "slot",
          "type": {
            "name": "sg_slot_info",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_slot_info",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "comment": "/* resource pool slot info */"
        },
        {
          "name": "upd_frame_index",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/* frame index of last sg_update_image() */"
        },
        {
          "name": "num_slots",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16,
          "comment": "/* number of renaming-slots for dynamically updated images */"
        },
        {
          "name": "active_slot",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20,
          "comment": "/* currently active write-slot for dynamically updated images */"
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 24,
          "comment": "/* image width */"
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 28,
          "comment": "/* image height */"
        }
      ]
    },
    "sg_d3d11_context_desc": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "device",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "device_context",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 8
        },
        {
          "name": "render_target_view_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "render_target_view_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24
        },
        {
          "name": "depth_stencil_view_cb",
          "type": {
            "name": "const void *(void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32
        },
        {
          "name": "depth_stencil_view_userdata_cb",
          "type": {
            "name": "const void *(void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 40
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 48
        }
      ]
    },
    "sg_buffer_layout_desc": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "step_func",
          "type": {
            "name": "sg_vertex_step",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_vertex_step",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "step_rate",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sg_pipeline_desc\n\n    The sg_pipeline_desc struct defines all creation parameters for an\n    sg_pipeline object, used as argument to the sg_make_pipeline() function:\n\n    - the vertex layout for all input vertex buffers\n    - a shader object\n    - the 3D primitive type (points, lines, triangles, ...)\n    - the index type (none, 16- or 32-bit)\n    - all the fixed-function-pipeline state (depth-, stencil-, blend-state, etc...)\n\n    If the vertex data has no gaps between vertex components, you can omit\n    the .layout.buffers[].stride and layout.attrs[].offset items (leave them\n    default-initialized to 0), sokol-gfx will then compute the offsets and\n    strides from the vertex component formats (.layout.attrs[].format).\n    Please note that ALL vertex attribute offsets must be 0 in order for the\n    automatic offset computation to kick in.\n\n    The default configuration is as follows:\n\n    .shader:            0 (must be initialized with a valid sg_shader id!)\n    .layout:\n        .buffers[]:         vertex buffer layouts\n            .stride:        0 (if no stride is given it will be computed)\n            .step_func      SG_VERTEXSTEP_PER_VERTEX\n            .step_rate      1\n        .attrs[]:           vertex attribute declarations\n            .buffer_index   0 the vertex buffer bind slot\n            .offset         0 (offsets can be omitted if the vertex layout has no gaps)\n            .format         SG_VERTEXFORMAT_INVALID (must be initialized!)\n    .depth:\n        .pixel_format:      sg_desc.context.depth_format\n        .compare:           SG_COMPAREFUNC_ALWAYS\n        .write_enabled:     false\n        .bias:              0.0f\n        .bias_slope_scale:  0.0f\n        .bias_clamp:        0.0f\n    .stencil:\n        .enabled:           false\n        .front/back:\n            .compare:       SG_COMPAREFUNC_ALWAYS\n            .fail_op:       SG_STENCILOP_KEEP\n            .depth_fail_op: SG_STENCILOP_KEEP\n            .pass_op:       SG_STENCILOP_KEEP\n        .read_mask:         0\n        .write_mask:        0\n        .ref:               0\n    .color_count            1\n    .colors[0..color_count]\n        .pixel_format       sg_desc.context.color_format\n        .write_mask:        SG_COLORMASK_RGBA\n        .blend:\n            .enabled:           false\n            .src_factor_rgb:    SG_BLENDFACTOR_ONE\n            .dst_factor_rgb:    SG_BLENDFACTOR_ZERO\n            .op_rgb:            SG_BLENDOP_ADD\n            .src_factor_alpha:  SG_BLENDFACTOR_ONE\n            .dst_factor_alpha:  SG_BLENDFACTOR_ZERO\n            .op_alpha:          SG_BLENDOP_ADD\n    .primitive_type:            SG_PRIMITIVETYPE_TRIANGLES\n    .index_type:                SG_INDEXTYPE_NONE\n    .cull_mode:                 SG_CULLMODE_NONE\n    .face_winding:              SG_FACEWINDING_CW\n    .sample_count:              sg_desc.context.sample_count\n    .blend_color:               (sg_color) { 0.0f, 0.0f, 0.0f, 0.0f }\n    .alpha_to_coverage_enabled: false\n    .label  0       (optional string label for trace hooks)\n*/"
    },
    "sfetch_request_t": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "channel",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "// index of channel this request is assigned to (default: 0)"
        },
        {
          "name": "path",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "// filesystem path or HTTP URL (required)"
        },
        {
          "name": "callback",
          "type": {
            "name": "sfetch_callback_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (const sfetch_response_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "// response callback function pointer (required)"
        },
        {
          "name": "chunk_size",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24,
          "comment": "// number of bytes to load per stream-block (optional)"
        },
        {
          "name": "buffer",
          "type": {
            "name": "sfetch_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 32,
          "comment": "// a memory buffer where the data will be loaded into (optional)"
        },
        {
          "name": "user_data",
          "type": {
            "name": "sfetch_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "// ptr/size of a POD user data block which will be memcpy\u0027d (optional)"
        }
      ],
      "comment": "/* request parameters passed to sfetch_send() */"
    },
    "sfetch_logger_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "log_cb",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sfetch_logger_t\n\n    Used in sfetch_desc_t to provide custom log callbacks to sokol_fetch.h.\n    Default behavior is SOKOL_LOG(message).\n*/"
    },
    "sg_pass_action": {
      "size_of": 104,
      "align_of": 4,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "colors",
          "type": {
            "name": "sg_color_attachment_action[4]",
            "kind": "array",
            "sizeOf": 80,
            "alignOf": 8,
            "sizeOfElement": 20,
            "arraySize": 4,
            "innerType": {
              "name": "sg_color_attachment_action",
              "kind": "typeAlias",
              "sizeOf": 20,
              "alignOf": 4,
              "innerType": {
                "name": "sg_color_attachment_action",
                "kind": "struct",
                "sizeOf": 20,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4
        },
        {
          "name": "depth",
          "type": {
            "name": "sg_depth_attachment_action",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "sg_depth_attachment_action",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 84
        },
        {
          "name": "stencil",
          "type": {
            "name": "sg_stencil_attachment_action",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_attachment_action",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 92
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 100
        }
      ]
    },
    "sapp_allocator": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc",
          "type": {
            "name": "void *(size_t, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "free",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/*\n    sapp_allocator\n\n    Used in sapp_desc to provide custom memory-alloc and -free functions\n    to sokol_app.h. If memory management should be overridden, both the\n    alloc and free function must be provided (e.g. it\u0027s not valid to\n    override one function but not the other).\n*/"
    },
    "sfetch_allocator_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc",
          "type": {
            "name": "void *(size_t, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "free",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/*\n    sfetch_allocator_t\n\n    Used in sfetch_desc_t to provide custom memory-alloc and -free functions\n    to sokol_fetch.h. If memory management should be overridden, both the\n    alloc and free function must be provided (e.g. it\u0027s not valid to\n    override one function but not the other).\n*/"
    },
    "sapp_event": {
      "size_of": 272,
      "align_of": 8,
      "fields": [
        {
          "name": "frame_count",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "// current frame counter, always valid, useful for checking if two events were issued in the same frame"
        },
        {
          "name": "type",
          "type": {
            "name": "sapp_event_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_event_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "// the event type, always valid"
        },
        {
          "name": "key_code",
          "type": {
            "name": "sapp_keycode",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_keycode",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "// the virtual key code, only valid in KEY_UP, KEY_DOWN"
        },
        {
          "name": "char_code",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "// the UTF-32 character code, only valid in CHAR events"
        },
        {
          "name": "key_repeat",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 20,
          "comment": "// true if this is a key-repeat event, valid in KEY_UP, KEY_DOWN and CHAR"
        },
        {
          "name": "modifiers",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24,
          "comment": "// current modifier keys, valid in all key-, char- and mouse-events"
        },
        {
          "name": "mouse_button",
          "type": {
            "name": "sapp_mousebutton",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sapp_mousebutton",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 28,
          "comment": "// mouse button that was pressed or released, valid in MOUSE_DOWN, MOUSE_UP"
        },
        {
          "name": "mouse_x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 32,
          "comment": "// current horizontal mouse position in pixels, always valid except during mouse lock"
        },
        {
          "name": "mouse_y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 36,
          "comment": "// current vertical mouse position in pixels, always valid except during mouse lock"
        },
        {
          "name": "mouse_dx",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 40,
          "comment": "// relative horizontal mouse movement since last frame, always valid"
        },
        {
          "name": "mouse_dy",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 44,
          "comment": "// relative vertical mouse movement since last frame, always valid"
        },
        {
          "name": "scroll_x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 48,
          "comment": "// horizontal mouse wheel scroll distance, valid in MOUSE_SCROLL events"
        },
        {
          "name": "scroll_y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 52,
          "comment": "// vertical mouse wheel scroll distance, valid in MOUSE_SCROLL events"
        },
        {
          "name": "num_touches",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 56,
          "comment": "// number of valid items in the touches[] array"
        },
        {
          "name": "touches",
          "type": {
            "name": "sapp_touchpoint[8]",
            "kind": "array",
            "sizeOf": 192,
            "alignOf": 8,
            "sizeOfElement": 24,
            "arraySize": 8,
            "innerType": {
              "name": "sapp_touchpoint",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "sapp_touchpoint",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 64,
          "comment": "// current touch points, valid in TOUCHES_BEGIN, TOUCHES_MOVED, TOUCHES_ENDED"
        },
        {
          "name": "window_width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 256,
          "comment": "// current window- and framebuffer sizes in pixels, always valid"
        },
        {
          "name": "window_height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 260
        },
        {
          "name": "framebuffer_width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 264,
          "comment": "// = window_width * dpi_scale"
        },
        {
          "name": "framebuffer_height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 268,
          "comment": "// = window_height * dpi_scale"
        }
      ],
      "comment": "/*\n    sapp_event\n\n    This is an all-in-one event struct passed to the event handler\n    user callback function. Note that it depends on the event\n    type what struct fields actually contain useful values, so you\n    should first check the event type before reading other struct\n    fields.\n*/"
    },
    "sg_pass_attachment_desc": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "image",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "mip_level",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        },
        {
          "name": "slice",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8,
          "comment": "/* cube texture: face; array texture: layer; 3D texture: slice */"
        }
      ],
      "comment": "/*\n    sg_pass_desc\n\n    Creation parameters for an sg_pass object, used as argument\n    to the sg_make_pass() function.\n\n    A pass object contains 1..4 color-attachments and none, or one,\n    depth-stencil-attachment. Each attachment consists of\n    an image, and two additional indices describing\n    which subimage the pass will render to: one mipmap index, and\n    if the image is a cubemap, array-texture or 3D-texture, the\n    face-index, array-layer or depth-slice.\n\n    Pass images must fulfill the following requirements:\n\n    All images must have:\n    - been created as render target (sg_image_desc.render_target = true)\n    - the same size\n    - the same sample count\n\n    In addition, all color-attachment images must have the same pixel format.\n*/"
    },
    "sg_color": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "r",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        },
        {
          "name": "b",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8
        },
        {
          "name": "a",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        }
      ],
      "comment": "/*\n    sg_color\n\n    An RGBA color value.\n*/"
    },
    "sg_stencil_face_state": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "compare",
          "type": {
            "name": "sg_compare_func",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_compare_func",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fail_op",
          "type": {
            "name": "sg_stencil_op",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_op",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "depth_fail_op",
          "type": {
            "name": "sg_stencil_op",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_op",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "pass_op",
          "type": {
            "name": "sg_stencil_op",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_op",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12
        }
      ]
    },
    "sg_desc": {
      "size_of": 280,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "buffer_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        },
        {
          "name": "image_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8
        },
        {
          "name": "shader_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        },
        {
          "name": "pipeline_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16
        },
        {
          "name": "pass_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20
        },
        {
          "name": "context_pool_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 24
        },
        {
          "name": "uniform_buffer_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 28
        },
        {
          "name": "staging_buffer_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 32
        },
        {
          "name": "sampler_cache_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 36
        },
        {
          "name": "max_commit_listeners",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 40
        },
        {
          "name": "disable_validation",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 44,
          "comment": "// disable validation layer even in debug mode, useful for tests"
        },
        {
          "name": "allocator",
          "type": {
            "name": "sg_allocator",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "sg_allocator",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 48
        },
        {
          "name": "logger",
          "type": {
            "name": "sg_logger",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sg_logger",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "// optional log function override"
        },
        {
          "name": "context",
          "type": {
            "name": "sg_context_desc",
            "kind": "typeAlias",
            "sizeOf": 184,
            "alignOf": 8,
            "innerType": {
              "name": "sg_context_desc",
              "kind": "struct",
              "sizeOf": 184,
              "alignOf": 8
            }
          },
          "offset_of": 88
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 272
        }
      ]
    },
    "sg_color_state": {
      "size_of": 36,
      "align_of": 4,
      "fields": [
        {
          "name": "pixel_format",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "write_mask",
          "type": {
            "name": "sg_color_mask",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_color_mask",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "blend",
          "type": {
            "name": "sg_blend_state",
            "kind": "typeAlias",
            "sizeOf": 28,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_state",
              "kind": "struct",
              "sizeOf": 28,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ]
    },
    "sg_blend_state": {
      "size_of": 28,
      "align_of": 4,
      "fields": [
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "src_factor_rgb",
          "type": {
            "name": "sg_blend_factor",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_factor",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "dst_factor_rgb",
          "type": {
            "name": "sg_blend_factor",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_factor",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "op_rgb",
          "type": {
            "name": "sg_blend_op",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_op",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12
        },
        {
          "name": "src_factor_alpha",
          "type": {
            "name": "sg_blend_factor",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_factor",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16
        },
        {
          "name": "dst_factor_alpha",
          "type": {
            "name": "sg_blend_factor",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_factor",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20
        },
        {
          "name": "op_alpha",
          "type": {
            "name": "sg_blend_op",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_blend_op",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24
        }
      ]
    },
    "sg_shader_info": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "slot",
          "type": {
            "name": "sg_slot_info",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_slot_info",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "comment": "/* resoure pool slot info */"
        }
      ]
    },
    "sg_pixelformat_info": {
      "size_of": 6,
      "align_of": 1,
      "fields": [
        {
          "name": "sample",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "// pixel format can be sampled in shaders"
        },
        {
          "name": "filter",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "// pixel format can be sampled with filtering"
        },
        {
          "name": "render",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2,
          "comment": "// pixel format can be used as render target"
        },
        {
          "name": "blend",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 3,
          "comment": "// alpha-blending is supported"
        },
        {
          "name": "msaa",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "// pixel format can be used as MSAA render target"
        },
        {
          "name": "depth",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "// pixel format is a depth format"
        }
      ],
      "comment": "/*\n    Runtime information about a pixel format, returned\n    by sg_query_pixelformat().\n*/"
    },
    "sfetch_handle_t": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* a request handle to identify an active fetch request, returned by sfetch_send() */"
    },
    "sg_shader_uniform_desc": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "sg_uniform_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_uniform_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "array_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        }
      ]
    },
    "sg_pipeline_desc": {
      "size_of": 568,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "shader",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "layout",
          "type": {
            "name": "sg_layout_desc",
            "kind": "typeAlias",
            "sizeOf": 288,
            "alignOf": 4,
            "innerType": {
              "name": "sg_layout_desc",
              "kind": "struct",
              "sizeOf": 288,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "depth",
          "type": {
            "name": "sg_depth_state",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 4,
            "innerType": {
              "name": "sg_depth_state",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 4
            }
          },
          "offset_of": 296
        },
        {
          "name": "stencil",
          "type": {
            "name": "sg_stencil_state",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 4,
            "innerType": {
              "name": "sg_stencil_state",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 4
            }
          },
          "offset_of": 320
        },
        {
          "name": "color_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 360
        },
        {
          "name": "colors",
          "type": {
            "name": "sg_color_state[4]",
            "kind": "array",
            "sizeOf": 144,
            "alignOf": 8,
            "sizeOfElement": 36,
            "arraySize": 4,
            "innerType": {
              "name": "sg_color_state",
              "kind": "typeAlias",
              "sizeOf": 36,
              "alignOf": 4,
              "innerType": {
                "name": "sg_color_state",
                "kind": "struct",
                "sizeOf": 36,
                "alignOf": 4
              }
            }
          },
          "offset_of": 364
        },
        {
          "name": "primitive_type",
          "type": {
            "name": "sg_primitive_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_primitive_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 508
        },
        {
          "name": "index_type",
          "type": {
            "name": "sg_index_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_index_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 512
        },
        {
          "name": "cull_mode",
          "type": {
            "name": "sg_cull_mode",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_cull_mode",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 516
        },
        {
          "name": "face_winding",
          "type": {
            "name": "sg_face_winding",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_face_winding",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 520
        },
        {
          "name": "sample_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 524
        },
        {
          "name": "blend_color",
          "type": {
            "name": "sg_color",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 4,
            "innerType": {
              "name": "sg_color",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 4
            }
          },
          "offset_of": 528
        },
        {
          "name": "alpha_to_coverage_enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 544
        },
        {
          "name": "label",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 552
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 560
        }
      ]
    },
    "sg_buffer_info": {
      "size_of": 36,
      "align_of": 4,
      "fields": [
        {
          "name": "slot",
          "type": {
            "name": "sg_slot_info",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_slot_info",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "comment": "/* resource pool slot info */"
        },
        {
          "name": "update_frame_index",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/* frame index of last sg_update_buffer() */"
        },
        {
          "name": "append_frame_index",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/* frame index of last sg_append_buffer() */"
        },
        {
          "name": "append_pos",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20,
          "comment": "/* current position in buffer for sg_append_buffer() */"
        },
        {
          "name": "append_overflow",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 24,
          "comment": "/* is buffer in overflow state (due to sg_append_buffer) */"
        },
        {
          "name": "num_slots",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 28,
          "comment": "/* number of renaming-slots for dynamically updated buffers */"
        },
        {
          "name": "active_slot",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 32,
          "comment": "/* currently active write-slot for dynamically updated buffers */"
        }
      ]
    },
    "sg_bindings": {
      "size_of": 176,
      "align_of": 4,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "vertex_buffers",
          "type": {
            "name": "sg_buffer[8]",
            "kind": "array",
            "sizeOf": 32,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 8,
            "innerType": {
              "name": "sg_buffer",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "sg_buffer",
                "kind": "struct",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4
        },
        {
          "name": "vertex_buffer_offsets",
          "type": {
            "name": "int[8]",
            "kind": "array",
            "sizeOf": 32,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 8,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 36
        },
        {
          "name": "index_buffer",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 68
        },
        {
          "name": "index_buffer_offset",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 72
        },
        {
          "name": "vs_images",
          "type": {
            "name": "sg_image[12]",
            "kind": "array",
            "sizeOf": 48,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 12,
            "innerType": {
              "name": "sg_image",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "sg_image",
                "kind": "struct",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 76
        },
        {
          "name": "fs_images",
          "type": {
            "name": "sg_image[12]",
            "kind": "array",
            "sizeOf": 48,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 12,
            "innerType": {
              "name": "sg_image",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "sg_image",
                "kind": "struct",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 124
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 172
        }
      ],
      "comment": "/*\n    sg_bindings\n\n    The sg_bindings structure defines the resource binding slots\n    of the sokol_gfx render pipeline, used as argument to the\n    sg_apply_bindings() function.\n\n    A resource binding struct contains:\n\n    - 1..N vertex buffers\n    - 0..N vertex buffer offsets\n    - 0..1 index buffers\n    - 0..1 index buffer offsets\n    - 0..N vertex shader stage images\n    - 0..N fragment shader stage images\n\n    The max number of vertex buffer and shader stage images\n    are defined by the SG_MAX_SHADERSTAGE_BUFFERS and\n    SG_MAX_SHADERSTAGE_IMAGES configuration constants.\n\n    The optional buffer offsets can be used to put different unrelated\n    chunks of vertex- and/or index-data into the same buffer objects.\n*/"
    },
    "sg_shader": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_logger": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "log_cb",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sapp_logger\n\n    Used in sapp_desc to provide custom log callbacks to sokol_app.h.\n    Default behavior is SOKOL_LOG(message).\n*/"
    },
    "sg_shader_desc": {
      "size_of": 3048,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "attrs",
          "type": {
            "name": "sg_shader_attr_desc[16]",
            "kind": "array",
            "sizeOf": 384,
            "alignOf": 8,
            "sizeOfElement": 24,
            "arraySize": 16,
            "innerType": {
              "name": "sg_shader_attr_desc",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "sg_shader_attr_desc",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "vs",
          "type": {
            "name": "sg_shader_stage_desc",
            "kind": "typeAlias",
            "sizeOf": 1320,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_stage_desc",
              "kind": "struct",
              "sizeOf": 1320,
              "alignOf": 8
            }
          },
          "offset_of": 392
        },
        {
          "name": "fs",
          "type": {
            "name": "sg_shader_stage_desc",
            "kind": "typeAlias",
            "sizeOf": 1320,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_stage_desc",
              "kind": "struct",
              "sizeOf": 1320,
              "alignOf": 8
            }
          },
          "offset_of": 1712
        },
        {
          "name": "label",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 3032
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 3040
        }
      ]
    },
    "sfetch_range_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "ptr",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sfetch_range_t\n\n    A pointer-size pair struct to pass memory ranges into and out of sokol-fetch.\n    When initialized from a value type (array or struct) you can use the\n    SFETCH_RANGE() helper macro to build an sfetch_range_t struct.\n*/"
    },
    "sapp_range": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "ptr",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sg_range\n\n    A general pointer/size-pair struct and constructor macros for passing binary blobs\n    into sokol_app.h.\n*/"
    },
    "sg_depth_state": {
      "size_of": 24,
      "align_of": 4,
      "fields": [
        {
          "name": "pixel_format",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "sg_compare_func",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_compare_func",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "write_enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8
        },
        {
          "name": "bias",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12
        },
        {
          "name": "bias_slope_scale",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16
        },
        {
          "name": "bias_clamp",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20
        }
      ]
    },
    "sg_context_desc": {
      "size_of": 184,
      "align_of": 8,
      "fields": [
        {
          "name": "color_format",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "depth_format",
          "type": {
            "name": "sg_pixel_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pixel_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "sample_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8
        },
        {
          "name": "gl",
          "type": {
            "name": "sg_gl_context_desc",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "sg_gl_context_desc",
              "kind": "struct",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 12
        },
        {
          "name": "metal",
          "type": {
            "name": "sg_metal_context_desc",
            "kind": "typeAlias",
            "sizeOf": 48,
            "alignOf": 8,
            "innerType": {
              "name": "sg_metal_context_desc",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          },
          "offset_of": 16
        },
        {
          "name": "d3d11",
          "type": {
            "name": "sg_d3d11_context_desc",
            "kind": "typeAlias",
            "sizeOf": 56,
            "alignOf": 8,
            "innerType": {
              "name": "sg_d3d11_context_desc",
              "kind": "struct",
              "sizeOf": 56,
              "alignOf": 8
            }
          },
          "offset_of": 64
        },
        {
          "name": "wgpu",
          "type": {
            "name": "sg_wgpu_context_desc",
            "kind": "typeAlias",
            "sizeOf": 64,
            "alignOf": 8,
            "innerType": {
              "name": "sg_wgpu_context_desc",
              "kind": "struct",
              "sizeOf": 64,
              "alignOf": 8
            }
          },
          "offset_of": 120
        }
      ]
    },
    "sg_limits": {
      "size_of": 28,
      "align_of": 4,
      "fields": [
        {
          "name": "max_image_size_2d",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "// max width/height of SG_IMAGETYPE_2D images"
        },
        {
          "name": "max_image_size_cube",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4,
          "comment": "// max width/height of SG_IMAGETYPE_CUBE images"
        },
        {
          "name": "max_image_size_3d",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8,
          "comment": "// max width/height/depth of SG_IMAGETYPE_3D images"
        },
        {
          "name": "max_image_size_array",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12,
          "comment": "// max width/height of SG_IMAGETYPE_ARRAY images"
        },
        {
          "name": "max_image_array_layers",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16,
          "comment": "// max number of layers in SG_IMAGETYPE_ARRAY images"
        },
        {
          "name": "max_vertex_attrs",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 20,
          "comment": "// \u003C= SG_MAX_VERTEX_ATTRIBUTES or less (on some GLES2 impls)"
        },
        {
          "name": "gl_max_vertex_uniform_vectors",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 24,
          "comment": "// \u003C= GL_MAX_VERTEX_UNIFORM_VECTORS (only on GL backends)"
        }
      ],
      "comment": "/*\n    Runtime information about resource limits, returned by sg_query_limit()\n*/"
    },
    "sg_image": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sapp_desc": {
      "size_of": 416,
      "align_of": 8,
      "fields": [
        {
          "name": "init_cb",
          "type": {
            "name": "void (void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "comment": "// these are the user-provided callbacks without user data"
        },
        {
          "name": "frame_cb",
          "type": {
            "name": "void (void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "cleanup_cb",
          "type": {
            "name": "void (void)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "event_cb",
          "type": {
            "name": "void (const sapp_event *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24
        },
        {
          "name": "fail_cb",
          "type": {
            "name": "void (const char *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 40,
          "comment": "// these are the user-provided callbacks with user data"
        },
        {
          "name": "init_userdata_cb",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 48
        },
        {
          "name": "frame_userdata_cb",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 56
        },
        {
          "name": "cleanup_userdata_cb",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 64
        },
        {
          "name": "event_userdata_cb",
          "type": {
            "name": "void (const sapp_event *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 72
        },
        {
          "name": "fail_userdata_cb",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 80
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 88,
          "comment": "// the preferred width of the window / canvas"
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 92,
          "comment": "// the preferred height of the window / canvas"
        },
        {
          "name": "sample_count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 96,
          "comment": "// MSAA sample count"
        },
        {
          "name": "swap_interval",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 100,
          "comment": "// the preferred swap interval (ignored on some platforms)"
        },
        {
          "name": "high_dpi",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 104,
          "comment": "// whether the rendering canvas is full-resolution on HighDPI displays"
        },
        {
          "name": "fullscreen",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 105,
          "comment": "// whether the window should be created in fullscreen mode"
        },
        {
          "name": "alpha",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 106,
          "comment": "// whether the framebuffer should have an alpha channel (ignored on some platforms)"
        },
        {
          "name": "window_title",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 112,
          "comment": "// the window title as UTF-8 encoded string"
        },
        {
          "name": "enable_clipboard",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 120,
          "comment": "// enable clipboard access, default is false"
        },
        {
          "name": "clipboard_size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 124,
          "comment": "// max size of clipboard content in bytes"
        },
        {
          "name": "enable_dragndrop",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 128,
          "comment": "// enable file dropping (drag\u0027n\u0027drop), default is false"
        },
        {
          "name": "max_dropped_files",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 132,
          "comment": "// max number of dropped files to process (default: 1)"
        },
        {
          "name": "max_dropped_file_path_length",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 136,
          "comment": "// max length in bytes of a dropped UTF-8 file path (default: 2048)"
        },
        {
          "name": "icon",
          "type": {
            "name": "sapp_icon_desc",
            "kind": "typeAlias",
            "sizeOf": 200,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_icon_desc",
              "kind": "struct",
              "sizeOf": 200,
              "alignOf": 8
            }
          },
          "offset_of": 144,
          "comment": "// the initial window icon to set"
        },
        {
          "name": "allocator",
          "type": {
            "name": "sapp_allocator",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_allocator",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 344,
          "comment": "// optional memory allocation overrides (default: malloc/free)"
        },
        {
          "name": "logger",
          "type": {
            "name": "sapp_logger",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_logger",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 368,
          "comment": "// optional log callback overrides (default: SAPP_LOG(message))"
        },
        {
          "name": "gl_force_gles2",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 384,
          "comment": "// if true, setup GLES2/WebGL even if GLES3/WebGL2 is available"
        },
        {
          "name": "gl_major_version",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 388,
          "comment": "// override GL major and minor version (the default GL version is 3.2)"
        },
        {
          "name": "gl_minor_version",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 392
        },
        {
          "name": "win32_console_utf8",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 396,
          "comment": "// if true, set the output console codepage to UTF-8"
        },
        {
          "name": "win32_console_create",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 397,
          "comment": "// if true, attach stdout/stderr to a new console window"
        },
        {
          "name": "win32_console_attach",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 398,
          "comment": "// if true, attach stdout/stderr to parent process"
        },
        {
          "name": "html5_canvas_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 400,
          "comment": "// the name (id) of the HTML5 canvas element, default is \u0022canvas\u0022"
        },
        {
          "name": "html5_canvas_resize",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 408,
          "comment": "// if true, the HTML5 canvas size is set to sapp_desc.width/height, otherwise canvas size is tracked"
        },
        {
          "name": "html5_preserve_drawing_buffer",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 409,
          "comment": "// HTML5 only: whether to preserve default framebuffer content between frames"
        },
        {
          "name": "html5_premultiplied_alpha",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 410,
          "comment": "// HTML5 only: whether the rendered pixels use premultiplied alpha convention"
        },
        {
          "name": "html5_ask_leave_site",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 411,
          "comment": "// initial state of the internal html5_ask_leave_site flag (see sapp_html5_ask_leave_site())"
        },
        {
          "name": "ios_keyboard_resizes_canvas",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 412,
          "comment": "// if true, showing the iOS keyboard shrinks the canvas"
        }
      ]
    },
    "sg_pipeline_info": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "slot",
          "type": {
            "name": "sg_slot_info",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_slot_info",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "comment": "/* resource pool slot info */"
        }
      ]
    },
    "saudio_allocator": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc",
          "type": {
            "name": "void *(size_t, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "free",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/*\n    saudio_allocator\n\n    Used in saudio_desc to provide custom memory-alloc and -free functions\n    to sokol_audio.h. If memory management should be overridden, both the\n    alloc and free function must be provided (e.g. it\u0027s not valid to\n    override one function but not the other).\n*/"
    },
    "sg_stencil_attachment_action": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "action",
          "type": {
            "name": "sg_action",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_action",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "unsigned char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 4
        }
      ]
    },
    "sg_buffer": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/*\n    Resource id typedefs:\n\n    sg_buffer:      vertex- and index-buffers\n    sg_image:       textures and render targets\n    sg_shader:      vertex- and fragment-shaders, uniform blocks\n    sg_pipeline:    associated shader and vertex-layouts, and render states\n    sg_pass:        a bundle of render targets and actions on them\n    sg_context:     a \u0027context handle\u0027 for switching between 3D-API contexts\n\n    Instead of pointers, resource creation functions return a 32-bit\n    number which uniquely identifies the resource object.\n\n    The 32-bit resource id is split into a 16-bit pool index in the lower bits,\n    and a 16-bit \u0027unique counter\u0027 in the upper bits. The index allows fast\n    pool lookups, and combined with the unique-mask it allows to detect\n    \u0027dangling accesses\u0027 (trying to use an object which no longer exists, and\n    its pool slot has been reused for a new object)\n\n    The resource ids are wrapped into a struct so that the compiler\n    can complain when the wrong resource type is used.\n*/"
    },
    "sg_features": {
      "size_of": 9,
      "align_of": 1,
      "fields": [
        {
          "name": "instancing",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "// hardware instancing supported"
        },
        {
          "name": "origin_top_left",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "// framebuffer and texture origin is in top left corner"
        },
        {
          "name": "multiple_render_targets",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2,
          "comment": "// offscreen render passes can have multiple render targets attached"
        },
        {
          "name": "msaa_render_targets",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 3,
          "comment": "// offscreen render passes support MSAA antialiasing"
        },
        {
          "name": "imagetype_3d",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "// creation of SG_IMAGETYPE_3D images is supported"
        },
        {
          "name": "imagetype_array",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "// creation of SG_IMAGETYPE_ARRAY images is supported"
        },
        {
          "name": "image_clamp_to_border",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 6,
          "comment": "// border color and clamp-to-border UV-wrap mode is supported"
        },
        {
          "name": "mrt_independent_blend_state",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 7,
          "comment": "// multiple-render-target rendering can use per-render-target blend state"
        },
        {
          "name": "mrt_independent_write_mask",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8,
          "comment": "// multiple-render-target rendering can use per-render-target color write masks"
        }
      ],
      "comment": "/*\n    Runtime information about available optional features,\n    returned by sg_query_features()\n*/"
    },
    "saudio_desc": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "sample_rate",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "// requested sample rate"
        },
        {
          "name": "num_channels",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4,
          "comment": "// number of channels, default: 1 (mono)"
        },
        {
          "name": "buffer_frames",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8,
          "comment": "// number of frames in streaming buffer"
        },
        {
          "name": "packet_frames",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 12,
          "comment": "// number of frames in a packet"
        },
        {
          "name": "num_packets",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16,
          "comment": "// number of packets in packet queue"
        },
        {
          "name": "stream_cb",
          "type": {
            "name": "void (float *, int, int)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24,
          "comment": "// optional streaming callback (no user data)"
        },
        {
          "name": "stream_userdata_cb",
          "type": {
            "name": "void (float *, int, int, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32,
          "comment": "//... and with user data"
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 40,
          "comment": "// optional user data argument for stream_userdata_cb"
        },
        {
          "name": "allocator",
          "type": {
            "name": "saudio_allocator",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "saudio_allocator",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "// optional allocation override functions"
        },
        {
          "name": "logger",
          "type": {
            "name": "saudio_logger",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "saudio_logger",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "// optional log override functions"
        }
      ]
    },
    "sg_allocator": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc",
          "type": {
            "name": "void *(size_t, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "free",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/*\n    sg_allocator\n\n    Used in sg_desc to provide custom memory-alloc and -free functions\n    to sokol_gfx.h. If memory management should be overridden, both the\n    alloc and free function must be provided (e.g. it\u0027s not valid to\n    override one function but not the other).\n*/"
    },
    "sg_slot_info": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "state",
          "type": {
            "name": "sg_resource_state",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_resource_state",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "/* the current state of this resource slot */"
        },
        {
          "name": "res_id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4,
          "comment": "/* type-neutral resource if (e.g. sg_buffer.id) */"
        },
        {
          "name": "ctx_id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/* the context this resource belongs to */"
        }
      ],
      "comment": "/*\n    sg_buffer_info\n    sg_image_info\n    sg_shader_info\n    sg_pipeline_info\n    sg_pass_info\n\n    These structs contain various internal resource attributes which\n    might be useful for debug-inspection. Please don\u0027t rely on the\n    actual content of those structs too much, as they are quite closely\n    tied to sokol_gfx.h internals and may change more frequently than\n    the other public API elements.\n\n    The *_info structs are used as the return values of the following functions:\n\n    sg_query_buffer_info()\n    sg_query_image_info()\n    sg_query_shader_info()\n    sg_query_pipeline_info()\n    sg_query_pass_info()\n*/"
    },
    "sg_buffer_desc": {
      "size_of": 96,
      "align_of": 8,
      "fields": [
        {
          "name": "_start_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8
        },
        {
          "name": "type",
          "type": {
            "name": "sg_buffer_type",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer_type",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16
        },
        {
          "name": "usage",
          "type": {
            "name": "sg_usage",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_usage",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20
        },
        {
          "name": "data",
          "type": {
            "name": "sg_range",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 24
        },
        {
          "name": "label",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 40
        },
        {
          "name": "gl_buffers",
          "type": {
            "name": "uint32_t[2]",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 2,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 48,
          "comment": "/* GL specific */"
        },
        {
          "name": "mtl_buffers",
          "type": {
            "name": "const void*[2]",
            "kind": "array",
            "sizeOf": 16,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 2,
            "innerType": {
              "name": "const void*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "const void",
                "kind": "primitive",
                "isConst": true
              }
            }
          },
          "offset_of": 56,
          "comment": "/* Metal specific */"
        },
        {
          "name": "d3d11_buffer",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 72,
          "comment": "/* D3D11 specific */"
        },
        {
          "name": "wgpu_buffer",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 80,
          "comment": "/* WebGPU specific */"
        },
        {
          "name": "_end_canary",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 88
        }
      ],
      "comment": "/*\n    sg_buffer_desc\n\n    Creation parameters for sg_buffer objects, used in the\n    sg_make_buffer() call.\n\n    The default configuration is:\n\n    .size:      0       (*must* be \u003E0 for buffers without data)\n    .type:      SG_BUFFERTYPE_VERTEXBUFFER\n    .usage:     SG_USAGE_IMMUTABLE\n    .data.ptr   0       (*must* be valid for immutable buffers)\n    .data.size  0       (*must* be \u003E 0 for immutable buffers)\n    .label      0       (optional string label for trace hooks)\n\n    The label will be ignored by sokol_gfx.h, it is only useful\n    when hooking into sg_make_buffer() or sg_init_buffer() via\n    the sg_install_trace_hooks() function.\n\n    For immutable buffers which are initialized with initial data,\n    keep the .size item zero-initialized, and set the size together with the\n    pointer to the initial data in the .data item.\n\n    For mutable buffers without initial data, keep the .data item\n    zero-initialized, and set the buffer size in the .size item instead.\n\n    You can also set both size values, but currently both size values must\n    be identical (this may change in the future when the dynamic resource\n    management may become more flexible).\n\n    ADVANCED TOPIC: Injecting native 3D-API buffers:\n\n    The following struct members allow to inject your own GL, Metal\n    or D3D11 buffers into sokol_gfx:\n\n    .gl_buffers[SG_NUM_INFLIGHT_FRAMES]\n    .mtl_buffers[SG_NUM_INFLIGHT_FRAMES]\n    .d3d11_buffer\n\n    You must still provide all other struct items except the .data item, and\n    these must match the creation parameters of the native buffers you\n    provide. For SG_USAGE_IMMUTABLE, only provide a single native 3D-API\n    buffer, otherwise you need to provide SG_NUM_INFLIGHT_FRAMES buffers\n    (only for GL and Metal, not D3D11). Providing multiple buffers for GL and\n    Metal is necessary because sokol_gfx will rotate through them when\n    calling sg_update_buffer() to prevent lock-stalls.\n\n    Note that it is expected that immutable injected buffer have already been\n    initialized with content, and the .content member must be 0!\n\n    Also you need to call sg_reset_state_cache() after calling native 3D-API\n    functions, and before calling any sokol_gfx function.\n*/"
    },
    "sg_vertex_attr_desc": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "buffer_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4
        },
        {
          "name": "format",
          "type": {
            "name": "sg_vertex_format",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_vertex_format",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ]
    },
    "sg_logger": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "log_cb",
          "type": {
            "name": "void (const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sg_logger\n\n    Used in sg_desc to provide custom log callbacks to sokol_gfx.h.\n    Default behavior is SOKOL_LOG(message).\n*/"
    },
    "sg_image_data": {
      "size_of": 1536,
      "align_of": 8,
      "fields": [
        {
          "name": "subimage",
          "type": {
            "name": "sg_range[6]",
            "kind": "array",
            "sizeOf": 1536,
            "alignOf": 8,
            "sizeOfElement": 256,
            "arraySize": 6,
            "innerType": {
              "name": "sg_range",
              "kind": "array",
              "sizeOf": 256,
              "alignOf": 8,
              "sizeOfElement": 16,
              "arraySize": 16,
              "innerType": {
                "name": "sg_range",
                "kind": "typeAlias",
                "sizeOf": 16,
                "alignOf": 8,
                "innerType": {
                  "name": "sg_range",
                  "kind": "struct",
                  "sizeOf": 16,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/*\n    sg_image_data\n\n    Defines the content of an image through a 2D array of sg_range structs.\n    The first array dimension is the cubemap face, and the second array\n    dimension the mipmap level.\n*/"
    },
    "sg_commit_listener": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "func",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "user_data",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/*\n    sg_commit_listener\n\n    Used with function sg_add_commit_listener() to add a callback\n    which will be called in sg_commit(). This is useful for libraries\n    building on top of sokol-gfx to be notified about when a frame\n    ends (instead of having to guess, or add a manual \u0027new-frame\u0027\n    function.\n*/"
    },
    "sg_pipeline": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "sg_pass_info": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "slot",
          "type": {
            "name": "sg_slot_info",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "sg_slot_info",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          },
          "comment": "/* resource pool slot info */"
        }
      ]
    }
  },
  "enums": {
    "sg_stencil_op": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_STENCILOP_DEFAULT"
        },
        {
          "name": "SG_STENCILOP_KEEP",
          "value": 1
        },
        {
          "name": "SG_STENCILOP_ZERO",
          "value": 2
        },
        {
          "name": "SG_STENCILOP_REPLACE",
          "value": 3
        },
        {
          "name": "SG_STENCILOP_INCR_CLAMP",
          "value": 4
        },
        {
          "name": "SG_STENCILOP_DECR_CLAMP",
          "value": 5
        },
        {
          "name": "SG_STENCILOP_INVERT",
          "value": 6
        },
        {
          "name": "SG_STENCILOP_INCR_WRAP",
          "value": 7
        },
        {
          "name": "SG_STENCILOP_DECR_WRAP",
          "value": 8
        },
        {
          "name": "_SG_STENCILOP_NUM",
          "value": 9
        },
        {
          "name": "_SG_STENCILOP_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_stencil_op\n\n    The operation performed on a currently stored stencil-value when a\n    comparison test passes or fails. This is used when creating a pipeline\n    object in the members:\n\n    sg_pipeline_desc\n        .stencil\n            .front\n                .fail_op\n                .depth_fail_op\n                .pass_op\n            .back\n                .fail_op\n                .depth_fail_op\n                .pass_op\n\n    The default value is SG_STENCILOP_KEEP.\n*/"
    },
    "sg_filter": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_FILTER_DEFAULT"
        },
        {
          "name": "SG_FILTER_NEAREST",
          "value": 1
        },
        {
          "name": "SG_FILTER_LINEAR",
          "value": 2
        },
        {
          "name": "SG_FILTER_NEAREST_MIPMAP_NEAREST",
          "value": 3
        },
        {
          "name": "SG_FILTER_NEAREST_MIPMAP_LINEAR",
          "value": 4
        },
        {
          "name": "SG_FILTER_LINEAR_MIPMAP_NEAREST",
          "value": 5
        },
        {
          "name": "SG_FILTER_LINEAR_MIPMAP_LINEAR",
          "value": 6
        },
        {
          "name": "_SG_FILTER_NUM",
          "value": 7
        },
        {
          "name": "_SG_FILTER_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_filter\n\n    The filtering mode when sampling a texture image. This is\n    used in the sg_image_desc.min_filter and sg_image_desc.mag_filter\n    members when creating an image object.\n\n    The default filter mode is SG_FILTER_NEAREST.\n*/"
    },
    "sg_resource_state": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_RESOURCESTATE_INITIAL"
        },
        {
          "name": "SG_RESOURCESTATE_ALLOC",
          "value": 1
        },
        {
          "name": "SG_RESOURCESTATE_VALID",
          "value": 2
        },
        {
          "name": "SG_RESOURCESTATE_FAILED",
          "value": 3
        },
        {
          "name": "SG_RESOURCESTATE_INVALID",
          "value": 4
        },
        {
          "name": "_SG_RESOURCESTATE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_resource_state\n\n    The current state of a resource in its resource pool.\n    Resources start in the INITIAL state, which means the\n    pool slot is unoccupied and can be allocated. When a resource is\n    created, first an id is allocated, and the resource pool slot\n    is set to state ALLOC. After allocation, the resource is\n    initialized, which may result in the VALID or FAILED state. The\n    reason why allocation and initialization are separate is because\n    some resource types (e.g. buffers and images) might be asynchronously\n    initialized by the user application. If a resource which is not\n    in the VALID state is attempted to be used for rendering, rendering\n    operations will silently be dropped.\n\n    The special INVALID state is returned in sg_query_xxx_state() if no\n    resource object exists for the provided resource id.\n*/"
    },
    "sg_shader_stage": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_SHADERSTAGE_VS"
        },
        {
          "name": "SG_SHADERSTAGE_FS",
          "value": 1
        },
        {
          "name": "_SG_SHADERSTAGE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_shader_stage\n\n    There are 2 shader stages: vertex- and fragment-shader-stage.\n    Each shader stage consists of:\n\n    - one slot for a shader function (provided as source- or byte-code)\n    - SG_MAX_SHADERSTAGE_UBS slots for uniform blocks\n    - SG_MAX_SHADERSTAGE_IMAGES slots for images used as textures by\n      the shader function\n*/"
    },
    "sg_action": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_ACTION_DEFAULT"
        },
        {
          "name": "SG_ACTION_CLEAR",
          "value": 1
        },
        {
          "name": "SG_ACTION_LOAD",
          "value": 2
        },
        {
          "name": "SG_ACTION_DONTCARE",
          "value": 3
        },
        {
          "name": "_SG_ACTION_NUM",
          "value": 4
        },
        {
          "name": "_SG_ACTION_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_action\n\n    Defines what action should be performed at the start of a render pass:\n\n    SG_ACTION_CLEAR:    clear the render target image\n    SG_ACTION_LOAD:     load the previous content of the render target image\n    SG_ACTION_DONTCARE: leave the render target image content undefined\n\n    This is used in the sg_pass_action structure.\n\n    The default action for all pass attachments is SG_ACTION_CLEAR, with the\n    clear color rgba = {0.5f, 0.5f, 0.5f, 1.0f], depth=1.0 and stencil=0.\n\n    If you want to override the default behaviour, it is important to not\n    only set the clear color, but the \u0027action\u0027 field as well (as long as this\n    is in its _SG_ACTION_DEFAULT, the value fields will be ignored).\n*/"
    },
    "sg_uniform_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_UNIFORMTYPE_INVALID"
        },
        {
          "name": "SG_UNIFORMTYPE_FLOAT",
          "value": 1
        },
        {
          "name": "SG_UNIFORMTYPE_FLOAT2",
          "value": 2
        },
        {
          "name": "SG_UNIFORMTYPE_FLOAT3",
          "value": 3
        },
        {
          "name": "SG_UNIFORMTYPE_FLOAT4",
          "value": 4
        },
        {
          "name": "SG_UNIFORMTYPE_INT",
          "value": 5
        },
        {
          "name": "SG_UNIFORMTYPE_INT2",
          "value": 6
        },
        {
          "name": "SG_UNIFORMTYPE_INT3",
          "value": 7
        },
        {
          "name": "SG_UNIFORMTYPE_INT4",
          "value": 8
        },
        {
          "name": "SG_UNIFORMTYPE_MAT4",
          "value": 9
        },
        {
          "name": "_SG_UNIFORMTYPE_NUM",
          "value": 10
        },
        {
          "name": "_SG_UNIFORMTYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_uniform_type\n\n    The data type of a uniform block member. This is used to\n    describe the internal layout of uniform blocks when creating\n    a shader object.\n*/"
    },
    "sg_backend": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_BACKEND_GLCORE33"
        },
        {
          "name": "SG_BACKEND_GLES2",
          "value": 1
        },
        {
          "name": "SG_BACKEND_GLES3",
          "value": 2
        },
        {
          "name": "SG_BACKEND_D3D11",
          "value": 3
        },
        {
          "name": "SG_BACKEND_METAL_IOS",
          "value": 4
        },
        {
          "name": "SG_BACKEND_METAL_MACOS",
          "value": 5
        },
        {
          "name": "SG_BACKEND_METAL_SIMULATOR",
          "value": 6
        },
        {
          "name": "SG_BACKEND_WGPU",
          "value": 7
        },
        {
          "name": "SG_BACKEND_DUMMY",
          "value": 8
        }
      ],
      "comment": "/*\n    sg_backend\n\n    The active 3D-API backend, use the function sg_query_backend()\n    to get the currently active backend.\n\n    NOTE that SG_BACKEND_GLES2 will be returned if sokol-gfx was\n    compiled with SOKOL_GLES3, but the runtime platform doesn\u0027t support\n    GLES3/WebGL2 and sokol-gfx had to fallback to GLES2/WebGL.\n*/"
    },
    "sapp_mouse_cursor": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_MOUSECURSOR_DEFAULT"
        },
        {
          "name": "SAPP_MOUSECURSOR_ARROW",
          "value": 1
        },
        {
          "name": "SAPP_MOUSECURSOR_IBEAM",
          "value": 2
        },
        {
          "name": "SAPP_MOUSECURSOR_CROSSHAIR",
          "value": 3
        },
        {
          "name": "SAPP_MOUSECURSOR_POINTING_HAND",
          "value": 4
        },
        {
          "name": "SAPP_MOUSECURSOR_RESIZE_EW",
          "value": 5
        },
        {
          "name": "SAPP_MOUSECURSOR_RESIZE_NS",
          "value": 6
        },
        {
          "name": "SAPP_MOUSECURSOR_RESIZE_NWSE",
          "value": 7
        },
        {
          "name": "SAPP_MOUSECURSOR_RESIZE_NESW",
          "value": 8
        },
        {
          "name": "SAPP_MOUSECURSOR_RESIZE_ALL",
          "value": 9
        },
        {
          "name": "SAPP_MOUSECURSOR_NOT_ALLOWED",
          "value": 10
        },
        {
          "name": "_SAPP_MOUSECURSOR_NUM",
          "value": 11
        }
      ],
      "comment": "/*\n    sapp_mouse_cursor\n\n    Predefined cursor image definitions, set with sapp_set_mouse_cursor(sapp_mouse_cursor cursor)\n*/"
    },
    "sg_blend_factor": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_BLENDFACTOR_DEFAULT"
        },
        {
          "name": "SG_BLENDFACTOR_ZERO",
          "value": 1
        },
        {
          "name": "SG_BLENDFACTOR_ONE",
          "value": 2
        },
        {
          "name": "SG_BLENDFACTOR_SRC_COLOR",
          "value": 3
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
          "value": 4
        },
        {
          "name": "SG_BLENDFACTOR_SRC_ALPHA",
          "value": 5
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
          "value": 6
        },
        {
          "name": "SG_BLENDFACTOR_DST_COLOR",
          "value": 7
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_DST_COLOR",
          "value": 8
        },
        {
          "name": "SG_BLENDFACTOR_DST_ALPHA",
          "value": 9
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
          "value": 10
        },
        {
          "name": "SG_BLENDFACTOR_SRC_ALPHA_SATURATED",
          "value": 11
        },
        {
          "name": "SG_BLENDFACTOR_BLEND_COLOR",
          "value": 12
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR",
          "value": 13
        },
        {
          "name": "SG_BLENDFACTOR_BLEND_ALPHA",
          "value": 14
        },
        {
          "name": "SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA",
          "value": 15
        },
        {
          "name": "_SG_BLENDFACTOR_NUM",
          "value": 16
        },
        {
          "name": "_SG_BLENDFACTOR_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_blend_factor\n\n    The source and destination factors in blending operations.\n    This is used in the following members when creating a pipeline object:\n\n    sg_pipeline_desc\n        .colors[i]\n            .blend\n                .src_factor_rgb\n                .dst_factor_rgb\n                .src_factor_alpha\n                .dst_factor_alpha\n\n    The default value is SG_BLENDFACTOR_ONE for source\n    factors, and SG_BLENDFACTOR_ZERO for destination factors.\n*/"
    },
    "sg_border_color": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_BORDERCOLOR_DEFAULT"
        },
        {
          "name": "SG_BORDERCOLOR_TRANSPARENT_BLACK",
          "value": 1
        },
        {
          "name": "SG_BORDERCOLOR_OPAQUE_BLACK",
          "value": 2
        },
        {
          "name": "SG_BORDERCOLOR_OPAQUE_WHITE",
          "value": 3
        },
        {
          "name": "_SG_BORDERCOLOR_NUM",
          "value": 4
        },
        {
          "name": "_SG_BORDERCOLOR_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_border_color\n\n    The border color to use when sampling a texture, and the UV wrap\n    mode is SG_WRAP_CLAMP_TO_BORDER.\n\n    The default border color is SG_BORDERCOLOR_OPAQUE_BLACK\n*/"
    },
    "sg_sampler_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_SAMPLERTYPE_DEFAULT"
        },
        {
          "name": "SG_SAMPLERTYPE_FLOAT",
          "value": 1
        },
        {
          "name": "SG_SAMPLERTYPE_SINT",
          "value": 2
        },
        {
          "name": "SG_SAMPLERTYPE_UINT",
          "value": 3
        }
      ],
      "comment": "/*\n    sg_sampler_type\n\n    Indicates the basic data type of a shader\u0027s texture sampler which\n    can be float , unsigned integer or signed integer. The sampler\n    type is used in the sg_shader_image_desc to describe the\n    sampler type of a shader\u0027s texture sampler binding.\n\n    The default sampler type is SG_SAMPLERTYPE_FLOAT.\n*/"
    },
    "sfetch_error_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SFETCH_ERROR_NO_ERROR"
        },
        {
          "name": "SFETCH_ERROR_FILE_NOT_FOUND",
          "value": 1
        },
        {
          "name": "SFETCH_ERROR_NO_BUFFER",
          "value": 2
        },
        {
          "name": "SFETCH_ERROR_BUFFER_TOO_SMALL",
          "value": 3
        },
        {
          "name": "SFETCH_ERROR_UNEXPECTED_EOF",
          "value": 4
        },
        {
          "name": "SFETCH_ERROR_INVALID_HTTP_STATUS",
          "value": 5
        },
        {
          "name": "SFETCH_ERROR_CANCELLED",
          "value": 6
        }
      ],
      "comment": "/* error codes */"
    },
    "sg_face_winding": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_FACEWINDING_DEFAULT"
        },
        {
          "name": "SG_FACEWINDING_CCW",
          "value": 1
        },
        {
          "name": "SG_FACEWINDING_CW",
          "value": 2
        },
        {
          "name": "_SG_FACEWINDING_NUM",
          "value": 3
        },
        {
          "name": "_SG_FACEWINDING_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_face_winding\n\n    The vertex-winding rule that determines a front-facing primitive. This\n    is used in the member sg_pipeline_desc.face_winding\n    when creating a pipeline object.\n\n    The default winding is SG_FACEWINDING_CW (clockwise)\n*/"
    },
    "sg_vertex_step": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_VERTEXSTEP_DEFAULT"
        },
        {
          "name": "SG_VERTEXSTEP_PER_VERTEX",
          "value": 1
        },
        {
          "name": "SG_VERTEXSTEP_PER_INSTANCE",
          "value": 2
        },
        {
          "name": "_SG_VERTEXSTEP_NUM",
          "value": 3
        },
        {
          "name": "_SG_VERTEXSTEP_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_vertex_step\n\n    Defines whether the input pointer of a vertex input stream is advanced\n    \u0027per vertex\u0027 or \u0027per instance\u0027. The default step-func is\n    SG_VERTEXSTEP_PER_VERTEX. SG_VERTEXSTEP_PER_INSTANCE is used with\n    instanced-rendering.\n\n    The vertex-step is part of the vertex-layout definition\n    when creating pipeline objects.\n*/"
    },
    "sg_image_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_IMAGETYPE_DEFAULT"
        },
        {
          "name": "SG_IMAGETYPE_2D",
          "value": 1
        },
        {
          "name": "SG_IMAGETYPE_CUBE",
          "value": 2
        },
        {
          "name": "SG_IMAGETYPE_3D",
          "value": 3
        },
        {
          "name": "SG_IMAGETYPE_ARRAY",
          "value": 4
        },
        {
          "name": "_SG_IMAGETYPE_NUM",
          "value": 5
        },
        {
          "name": "_SG_IMAGETYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_image_type\n\n    Indicates the basic type of an image object (2D-texture, cubemap,\n    3D-texture or 2D-array-texture). 3D- and array-textures are not supported\n    on the GLES2/WebGL backend (use sg_query_features().imagetype_3d and\n    sg_query_features().imagetype_array to check for support). The image type\n    is used in the sg_image_desc.type member when creating an image, and\n    in sg_shader_image_desc when describing a shader\u0027s texture sampler binding.\n\n    The default image type when creating an image is SG_IMAGETYPE_2D.\n*/"
    },
    "sg_primitive_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_PRIMITIVETYPE_DEFAULT"
        },
        {
          "name": "SG_PRIMITIVETYPE_POINTS",
          "value": 1
        },
        {
          "name": "SG_PRIMITIVETYPE_LINES",
          "value": 2
        },
        {
          "name": "SG_PRIMITIVETYPE_LINE_STRIP",
          "value": 3
        },
        {
          "name": "SG_PRIMITIVETYPE_TRIANGLES",
          "value": 4
        },
        {
          "name": "SG_PRIMITIVETYPE_TRIANGLE_STRIP",
          "value": 5
        },
        {
          "name": "_SG_PRIMITIVETYPE_NUM",
          "value": 6
        },
        {
          "name": "_SG_PRIMITIVETYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_primitive_type\n\n    This is the common subset of 3D primitive types supported across all 3D\n    APIs. This is used in the sg_pipeline_desc.primitive_type member when\n    creating a pipeline object.\n\n    The default primitive type is SG_PRIMITIVETYPE_TRIANGLES.\n*/"
    },
    "sg_cull_mode": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_CULLMODE_DEFAULT"
        },
        {
          "name": "SG_CULLMODE_NONE",
          "value": 1
        },
        {
          "name": "SG_CULLMODE_FRONT",
          "value": 2
        },
        {
          "name": "SG_CULLMODE_BACK",
          "value": 3
        },
        {
          "name": "_SG_CULLMODE_NUM",
          "value": 4
        },
        {
          "name": "_SG_CULLMODE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_cull_mode\n\n    The face-culling mode, this is used in the\n    sg_pipeline_desc.cull_mode member when creating a\n    pipeline object.\n\n    The default cull mode is SG_CULLMODE_NONE\n*/"
    },
    "sg_compare_func": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_COMPAREFUNC_DEFAULT"
        },
        {
          "name": "SG_COMPAREFUNC_NEVER",
          "value": 1
        },
        {
          "name": "SG_COMPAREFUNC_LESS",
          "value": 2
        },
        {
          "name": "SG_COMPAREFUNC_EQUAL",
          "value": 3
        },
        {
          "name": "SG_COMPAREFUNC_LESS_EQUAL",
          "value": 4
        },
        {
          "name": "SG_COMPAREFUNC_GREATER",
          "value": 5
        },
        {
          "name": "SG_COMPAREFUNC_NOT_EQUAL",
          "value": 6
        },
        {
          "name": "SG_COMPAREFUNC_GREATER_EQUAL",
          "value": 7
        },
        {
          "name": "SG_COMPAREFUNC_ALWAYS",
          "value": 8
        },
        {
          "name": "_SG_COMPAREFUNC_NUM",
          "value": 9
        },
        {
          "name": "_SG_COMPAREFUNC_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_compare_func\n\n    The compare-function for depth- and stencil-ref tests.\n    This is used when creating pipeline objects in the members:\n\n    sg_pipeline_desc\n        .depth\n            .compare\n        .stencil\n            .front.compare\n            .back.compar\n\n    The default compare func for depth- and stencil-tests is\n    SG_COMPAREFUNC_ALWAYS.\n*/"
    },
    "sg_pixel_format": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_PIXELFORMAT_DEFAULT"
        },
        {
          "name": "SG_PIXELFORMAT_NONE",
          "value": 1
        },
        {
          "name": "SG_PIXELFORMAT_R8",
          "value": 2
        },
        {
          "name": "SG_PIXELFORMAT_R8SN",
          "value": 3
        },
        {
          "name": "SG_PIXELFORMAT_R8UI",
          "value": 4
        },
        {
          "name": "SG_PIXELFORMAT_R8SI",
          "value": 5
        },
        {
          "name": "SG_PIXELFORMAT_R16",
          "value": 6
        },
        {
          "name": "SG_PIXELFORMAT_R16SN",
          "value": 7
        },
        {
          "name": "SG_PIXELFORMAT_R16UI",
          "value": 8
        },
        {
          "name": "SG_PIXELFORMAT_R16SI",
          "value": 9
        },
        {
          "name": "SG_PIXELFORMAT_R16F",
          "value": 10
        },
        {
          "name": "SG_PIXELFORMAT_RG8",
          "value": 11
        },
        {
          "name": "SG_PIXELFORMAT_RG8SN",
          "value": 12
        },
        {
          "name": "SG_PIXELFORMAT_RG8UI",
          "value": 13
        },
        {
          "name": "SG_PIXELFORMAT_RG8SI",
          "value": 14
        },
        {
          "name": "SG_PIXELFORMAT_R32UI",
          "value": 15
        },
        {
          "name": "SG_PIXELFORMAT_R32SI",
          "value": 16
        },
        {
          "name": "SG_PIXELFORMAT_R32F",
          "value": 17
        },
        {
          "name": "SG_PIXELFORMAT_RG16",
          "value": 18
        },
        {
          "name": "SG_PIXELFORMAT_RG16SN",
          "value": 19
        },
        {
          "name": "SG_PIXELFORMAT_RG16UI",
          "value": 20
        },
        {
          "name": "SG_PIXELFORMAT_RG16SI",
          "value": 21
        },
        {
          "name": "SG_PIXELFORMAT_RG16F",
          "value": 22
        },
        {
          "name": "SG_PIXELFORMAT_RGBA8",
          "value": 23
        },
        {
          "name": "SG_PIXELFORMAT_RGBA8SN",
          "value": 24
        },
        {
          "name": "SG_PIXELFORMAT_RGBA8UI",
          "value": 25
        },
        {
          "name": "SG_PIXELFORMAT_RGBA8SI",
          "value": 26
        },
        {
          "name": "SG_PIXELFORMAT_BGRA8",
          "value": 27
        },
        {
          "name": "SG_PIXELFORMAT_RGB10A2",
          "value": 28
        },
        {
          "name": "SG_PIXELFORMAT_RG11B10F",
          "value": 29
        },
        {
          "name": "SG_PIXELFORMAT_RG32UI",
          "value": 30
        },
        {
          "name": "SG_PIXELFORMAT_RG32SI",
          "value": 31
        },
        {
          "name": "SG_PIXELFORMAT_RG32F",
          "value": 32
        },
        {
          "name": "SG_PIXELFORMAT_RGBA16",
          "value": 33
        },
        {
          "name": "SG_PIXELFORMAT_RGBA16SN",
          "value": 34
        },
        {
          "name": "SG_PIXELFORMAT_RGBA16UI",
          "value": 35
        },
        {
          "name": "SG_PIXELFORMAT_RGBA16SI",
          "value": 36
        },
        {
          "name": "SG_PIXELFORMAT_RGBA16F",
          "value": 37
        },
        {
          "name": "SG_PIXELFORMAT_RGBA32UI",
          "value": 38
        },
        {
          "name": "SG_PIXELFORMAT_RGBA32SI",
          "value": 39
        },
        {
          "name": "SG_PIXELFORMAT_RGBA32F",
          "value": 40
        },
        {
          "name": "SG_PIXELFORMAT_DEPTH",
          "value": 41
        },
        {
          "name": "SG_PIXELFORMAT_DEPTH_STENCIL",
          "value": 42
        },
        {
          "name": "SG_PIXELFORMAT_BC1_RGBA",
          "value": 43
        },
        {
          "name": "SG_PIXELFORMAT_BC2_RGBA",
          "value": 44
        },
        {
          "name": "SG_PIXELFORMAT_BC3_RGBA",
          "value": 45
        },
        {
          "name": "SG_PIXELFORMAT_BC4_R",
          "value": 46
        },
        {
          "name": "SG_PIXELFORMAT_BC4_RSN",
          "value": 47
        },
        {
          "name": "SG_PIXELFORMAT_BC5_RG",
          "value": 48
        },
        {
          "name": "SG_PIXELFORMAT_BC5_RGSN",
          "value": 49
        },
        {
          "name": "SG_PIXELFORMAT_BC6H_RGBF",
          "value": 50
        },
        {
          "name": "SG_PIXELFORMAT_BC6H_RGBUF",
          "value": 51
        },
        {
          "name": "SG_PIXELFORMAT_BC7_RGBA",
          "value": 52
        },
        {
          "name": "SG_PIXELFORMAT_PVRTC_RGB_2BPP",
          "value": 53
        },
        {
          "name": "SG_PIXELFORMAT_PVRTC_RGB_4BPP",
          "value": 54
        },
        {
          "name": "SG_PIXELFORMAT_PVRTC_RGBA_2BPP",
          "value": 55
        },
        {
          "name": "SG_PIXELFORMAT_PVRTC_RGBA_4BPP",
          "value": 56
        },
        {
          "name": "SG_PIXELFORMAT_ETC2_RGB8",
          "value": 57
        },
        {
          "name": "SG_PIXELFORMAT_ETC2_RGB8A1",
          "value": 58
        },
        {
          "name": "SG_PIXELFORMAT_ETC2_RGBA8",
          "value": 59
        },
        {
          "name": "SG_PIXELFORMAT_ETC2_RG11",
          "value": 60
        },
        {
          "name": "SG_PIXELFORMAT_ETC2_RG11SN",
          "value": 61
        },
        {
          "name": "SG_PIXELFORMAT_RGB9E5",
          "value": 62
        },
        {
          "name": "_SG_PIXELFORMAT_NUM",
          "value": 63
        },
        {
          "name": "_SG_PIXELFORMAT_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_pixel_format\n\n    sokol_gfx.h basically uses the same pixel formats as WebGPU, since these\n    are supported on most newer GPUs. GLES2 and WebGL only supports a much\n    smaller subset of actually available pixel formats. Call\n    sg_query_pixelformat() to check at runtime if a pixel format supports the\n    desired features.\n\n    A pixelformat name consist of three parts:\n\n        - components (R, RG, RGB or RGBA)\n        - bit width per component (8, 16 or 32)\n        - component data type:\n            - unsigned normalized (no postfix)\n            - signed normalized (SN postfix)\n            - unsigned integer (UI postfix)\n            - signed integer (SI postfix)\n            - float (F postfix)\n\n    Not all pixel formats can be used for everything, call sg_query_pixelformat()\n    to inspect the capabilities of a given pixelformat. The function returns\n    an sg_pixelformat_info struct with the following bool members:\n\n        - sample: the pixelformat can be sampled as texture at least with\n                  nearest filtering\n        - filter: the pixelformat can be samples as texture with linear\n                  filtering\n        - render: the pixelformat can be used for render targets\n        - blend:  blending is supported when using the pixelformat for\n                  render targets\n        - msaa:   multisample-antialiasing is supported when using the\n                  pixelformat for render targets\n        - depth:  the pixelformat can be used for depth-stencil attachments\n\n    When targeting GLES2/WebGL, the only safe formats to use\n    as texture are SG_PIXELFORMAT_R8 and SG_PIXELFORMAT_RGBA8. For rendering\n    in GLES2/WebGL, only SG_PIXELFORMAT_RGBA8 is safe. All other formats\n    must be checked via sg_query_pixelformats().\n\n    The default pixel format for texture images is SG_PIXELFORMAT_RGBA8.\n\n    The default pixel format for render target images is platform-dependent:\n        - for Metal and D3D11 it is SG_PIXELFORMAT_BGRA8\n        - for GL backends it is SG_PIXELFORMAT_RGBA8\n\n    This is mainly because of the default framebuffer which is setup outside\n    of sokol_gfx.h. On some backends, using BGRA for the default frame buffer\n    allows more efficient frame flips. For your own offscreen-render-targets,\n    use whatever renderable pixel format is convenient for you.\n*/"
    },
    "sg_usage": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_USAGE_DEFAULT"
        },
        {
          "name": "SG_USAGE_IMMUTABLE",
          "value": 1
        },
        {
          "name": "SG_USAGE_DYNAMIC",
          "value": 2
        },
        {
          "name": "SG_USAGE_STREAM",
          "value": 3
        },
        {
          "name": "_SG_USAGE_NUM",
          "value": 4
        },
        {
          "name": "_SG_USAGE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_usage\n\n    A resource usage hint describing the update strategy of\n    buffers and images. This is used in the sg_buffer_desc.usage\n    and sg_image_desc.usage members when creating buffers\n    and images:\n\n    SG_USAGE_IMMUTABLE:     the resource will never be updated with\n                            new data, instead the content of the\n                            resource must be provided on creation\n    SG_USAGE_DYNAMIC:       the resource will be updated infrequently\n                            with new data (this could range from \u0022once\n                            after creation\u0022, to \u0022quite often but not\n                            every frame\u0022)\n    SG_USAGE_STREAM:        the resource will be updated each frame\n                            with new content\n\n    The rendering backends use this hint to prevent that the\n    CPU needs to wait for the GPU when attempting to update\n    a resource that might be currently accessed by the GPU.\n\n    Resource content is updated with the functions sg_update_buffer() or\n    sg_append_buffer() for buffer objects, and sg_update_image() for image\n    objects. For the sg_update_*() functions, only one update is allowed per\n    frame and resource object, while sg_append_buffer() can be called\n    multiple times per frame on the same buffer. The application must update\n    all data required for rendering (this means that the update data can be\n    smaller than the resource size, if only a part of the overall resource\n    size is used for rendering, you only need to make sure that the data that\n    *is* used is valid).\n\n    The default usage is SG_USAGE_IMMUTABLE.\n*/"
    },
    "sapp_html5_fetch_error": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_HTML5_FETCH_ERROR_NO_ERROR"
        },
        {
          "name": "SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL",
          "value": 1
        },
        {
          "name": "SAPP_HTML5_FETCH_ERROR_OTHER",
          "value": 2
        }
      ],
      "comment": "/* HTML5 specific: request and response structs for\n   asynchronously loading dropped-file content.\n*/"
    },
    "sg_vertex_format": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_VERTEXFORMAT_INVALID"
        },
        {
          "name": "SG_VERTEXFORMAT_FLOAT",
          "value": 1
        },
        {
          "name": "SG_VERTEXFORMAT_FLOAT2",
          "value": 2
        },
        {
          "name": "SG_VERTEXFORMAT_FLOAT3",
          "value": 3
        },
        {
          "name": "SG_VERTEXFORMAT_FLOAT4",
          "value": 4
        },
        {
          "name": "SG_VERTEXFORMAT_BYTE4",
          "value": 5
        },
        {
          "name": "SG_VERTEXFORMAT_BYTE4N",
          "value": 6
        },
        {
          "name": "SG_VERTEXFORMAT_UBYTE4",
          "value": 7
        },
        {
          "name": "SG_VERTEXFORMAT_UBYTE4N",
          "value": 8
        },
        {
          "name": "SG_VERTEXFORMAT_SHORT2",
          "value": 9
        },
        {
          "name": "SG_VERTEXFORMAT_SHORT2N",
          "value": 10
        },
        {
          "name": "SG_VERTEXFORMAT_USHORT2N",
          "value": 11
        },
        {
          "name": "SG_VERTEXFORMAT_SHORT4",
          "value": 12
        },
        {
          "name": "SG_VERTEXFORMAT_SHORT4N",
          "value": 13
        },
        {
          "name": "SG_VERTEXFORMAT_USHORT4N",
          "value": 14
        },
        {
          "name": "SG_VERTEXFORMAT_UINT10_N2",
          "value": 15
        },
        {
          "name": "_SG_VERTEXFORMAT_NUM",
          "value": 16
        },
        {
          "name": "_SG_VERTEXFORMAT_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_vertex_format\n\n    The data type of a vertex component. This is used to describe\n    the layout of vertex data when creating a pipeline object.\n*/"
    },
    "sg_index_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_INDEXTYPE_DEFAULT"
        },
        {
          "name": "SG_INDEXTYPE_NONE",
          "value": 1
        },
        {
          "name": "SG_INDEXTYPE_UINT16",
          "value": 2
        },
        {
          "name": "SG_INDEXTYPE_UINT32",
          "value": 3
        },
        {
          "name": "_SG_INDEXTYPE_NUM",
          "value": 4
        },
        {
          "name": "_SG_INDEXTYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_index_type\n\n    Indicates whether indexed rendering (fetching vertex-indices from an\n    index buffer) is used, and if yes, the index data type (16- or 32-bits).\n    This is used in the sg_pipeline_desc.index_type member when creating a\n    pipeline object.\n\n    The default index type is SG_INDEXTYPE_NONE.\n*/"
    },
    "sapp_mousebutton": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_MOUSEBUTTON_LEFT"
        },
        {
          "name": "SAPP_MOUSEBUTTON_RIGHT",
          "value": 1
        },
        {
          "name": "SAPP_MOUSEBUTTON_MIDDLE",
          "value": 2
        },
        {
          "name": "SAPP_MOUSEBUTTON_INVALID",
          "value": 256
        }
      ],
      "comment": "/*\n    sapp_mousebutton\n\n    The currently pressed mouse button in the events MOUSE_DOWN\n    and MOUSE_UP, stored in the struct field sapp_event.mouse_button.\n*/"
    },
    "sg_wrap": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_WRAP_DEFAULT"
        },
        {
          "name": "SG_WRAP_REPEAT",
          "value": 1
        },
        {
          "name": "SG_WRAP_CLAMP_TO_EDGE",
          "value": 2
        },
        {
          "name": "SG_WRAP_CLAMP_TO_BORDER",
          "value": 3
        },
        {
          "name": "SG_WRAP_MIRRORED_REPEAT",
          "value": 4
        },
        {
          "name": "_SG_WRAP_NUM",
          "value": 5
        },
        {
          "name": "_SG_WRAP_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_wrap\n\n    The texture coordinates wrapping mode when sampling a texture\n    image. This is used in the sg_image_desc.wrap_u, .wrap_v\n    and .wrap_w members when creating an image.\n\n    The default wrap mode is SG_WRAP_REPEAT.\n\n    NOTE: SG_WRAP_CLAMP_TO_BORDER is not supported on all backends\n    and platforms. To check for support, call sg_query_features()\n    and check the \u0022clamp_to_border\u0022 boolean in the returned\n    sg_features struct.\n\n    Platforms which don\u0027t support SG_WRAP_CLAMP_TO_BORDER will silently fall back\n    to SG_WRAP_CLAMP_TO_EDGE without a validation error.\n\n    Platforms which support clamp-to-border are:\n\n        - all desktop GL platforms\n        - Metal on macOS\n        - D3D11\n\n    Platforms which do not support clamp-to-border:\n\n        - GLES2/3 and WebGL/WebGL2\n        - Metal on iOS\n*/"
    },
    "sg_blend_op": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_BLENDOP_DEFAULT"
        },
        {
          "name": "SG_BLENDOP_ADD",
          "value": 1
        },
        {
          "name": "SG_BLENDOP_SUBTRACT",
          "value": 2
        },
        {
          "name": "SG_BLENDOP_REVERSE_SUBTRACT",
          "value": 3
        },
        {
          "name": "_SG_BLENDOP_NUM",
          "value": 4
        },
        {
          "name": "_SG_BLENDOP_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_blend_op\n\n    Describes how the source and destination values are combined in the\n    fragment blending operation. It is used in the following members when\n    creating a pipeline object:\n\n    sg_pipeline_desc\n        .colors[i]\n            .blend\n                .op_rgb\n                .op_alpha\n\n    The default value is SG_BLENDOP_ADD.\n*/"
    },
    "sg_cube_face": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SG_CUBEFACE_POS_X"
        },
        {
          "name": "SG_CUBEFACE_NEG_X",
          "value": 1
        },
        {
          "name": "SG_CUBEFACE_POS_Y",
          "value": 2
        },
        {
          "name": "SG_CUBEFACE_NEG_Y",
          "value": 3
        },
        {
          "name": "SG_CUBEFACE_POS_Z",
          "value": 4
        },
        {
          "name": "SG_CUBEFACE_NEG_Z",
          "value": 5
        },
        {
          "name": "SG_CUBEFACE_NUM",
          "value": 6
        },
        {
          "name": "_SG_CUBEFACE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_cube_face\n\n    The cubemap faces. Use these as indices in the sg_image_desc.content\n    array.\n*/"
    },
    "sapp_keycode": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_KEYCODE_INVALID"
        },
        {
          "name": "SAPP_KEYCODE_SPACE",
          "value": 32
        },
        {
          "name": "SAPP_KEYCODE_APOSTROPHE",
          "value": 39
        },
        {
          "name": "SAPP_KEYCODE_COMMA",
          "value": 44
        },
        {
          "name": "SAPP_KEYCODE_MINUS",
          "value": 45
        },
        {
          "name": "SAPP_KEYCODE_PERIOD",
          "value": 46
        },
        {
          "name": "SAPP_KEYCODE_SLASH",
          "value": 47
        },
        {
          "name": "SAPP_KEYCODE_0",
          "value": 48
        },
        {
          "name": "SAPP_KEYCODE_1",
          "value": 49
        },
        {
          "name": "SAPP_KEYCODE_2",
          "value": 50
        },
        {
          "name": "SAPP_KEYCODE_3",
          "value": 51
        },
        {
          "name": "SAPP_KEYCODE_4",
          "value": 52
        },
        {
          "name": "SAPP_KEYCODE_5",
          "value": 53
        },
        {
          "name": "SAPP_KEYCODE_6",
          "value": 54
        },
        {
          "name": "SAPP_KEYCODE_7",
          "value": 55
        },
        {
          "name": "SAPP_KEYCODE_8",
          "value": 56
        },
        {
          "name": "SAPP_KEYCODE_9",
          "value": 57
        },
        {
          "name": "SAPP_KEYCODE_SEMICOLON",
          "value": 59
        },
        {
          "name": "SAPP_KEYCODE_EQUAL",
          "value": 61
        },
        {
          "name": "SAPP_KEYCODE_A",
          "value": 65
        },
        {
          "name": "SAPP_KEYCODE_B",
          "value": 66
        },
        {
          "name": "SAPP_KEYCODE_C",
          "value": 67
        },
        {
          "name": "SAPP_KEYCODE_D",
          "value": 68
        },
        {
          "name": "SAPP_KEYCODE_E",
          "value": 69
        },
        {
          "name": "SAPP_KEYCODE_F",
          "value": 70
        },
        {
          "name": "SAPP_KEYCODE_G",
          "value": 71
        },
        {
          "name": "SAPP_KEYCODE_H",
          "value": 72
        },
        {
          "name": "SAPP_KEYCODE_I",
          "value": 73
        },
        {
          "name": "SAPP_KEYCODE_J",
          "value": 74
        },
        {
          "name": "SAPP_KEYCODE_K",
          "value": 75
        },
        {
          "name": "SAPP_KEYCODE_L",
          "value": 76
        },
        {
          "name": "SAPP_KEYCODE_M",
          "value": 77
        },
        {
          "name": "SAPP_KEYCODE_N",
          "value": 78
        },
        {
          "name": "SAPP_KEYCODE_O",
          "value": 79
        },
        {
          "name": "SAPP_KEYCODE_P",
          "value": 80
        },
        {
          "name": "SAPP_KEYCODE_Q",
          "value": 81
        },
        {
          "name": "SAPP_KEYCODE_R",
          "value": 82
        },
        {
          "name": "SAPP_KEYCODE_S",
          "value": 83
        },
        {
          "name": "SAPP_KEYCODE_T",
          "value": 84
        },
        {
          "name": "SAPP_KEYCODE_U",
          "value": 85
        },
        {
          "name": "SAPP_KEYCODE_V",
          "value": 86
        },
        {
          "name": "SAPP_KEYCODE_W",
          "value": 87
        },
        {
          "name": "SAPP_KEYCODE_X",
          "value": 88
        },
        {
          "name": "SAPP_KEYCODE_Y",
          "value": 89
        },
        {
          "name": "SAPP_KEYCODE_Z",
          "value": 90
        },
        {
          "name": "SAPP_KEYCODE_LEFT_BRACKET",
          "value": 91
        },
        {
          "name": "SAPP_KEYCODE_BACKSLASH",
          "value": 92
        },
        {
          "name": "SAPP_KEYCODE_RIGHT_BRACKET",
          "value": 93
        },
        {
          "name": "SAPP_KEYCODE_GRAVE_ACCENT",
          "value": 96
        },
        {
          "name": "SAPP_KEYCODE_WORLD_1",
          "value": 161
        },
        {
          "name": "SAPP_KEYCODE_WORLD_2",
          "value": 162
        },
        {
          "name": "SAPP_KEYCODE_ESCAPE",
          "value": 256
        },
        {
          "name": "SAPP_KEYCODE_ENTER",
          "value": 257
        },
        {
          "name": "SAPP_KEYCODE_TAB",
          "value": 258
        },
        {
          "name": "SAPP_KEYCODE_BACKSPACE",
          "value": 259
        },
        {
          "name": "SAPP_KEYCODE_INSERT",
          "value": 260
        },
        {
          "name": "SAPP_KEYCODE_DELETE",
          "value": 261
        },
        {
          "name": "SAPP_KEYCODE_RIGHT",
          "value": 262
        },
        {
          "name": "SAPP_KEYCODE_LEFT",
          "value": 263
        },
        {
          "name": "SAPP_KEYCODE_DOWN",
          "value": 264
        },
        {
          "name": "SAPP_KEYCODE_UP",
          "value": 265
        },
        {
          "name": "SAPP_KEYCODE_PAGE_UP",
          "value": 266
        },
        {
          "name": "SAPP_KEYCODE_PAGE_DOWN",
          "value": 267
        },
        {
          "name": "SAPP_KEYCODE_HOME",
          "value": 268
        },
        {
          "name": "SAPP_KEYCODE_END",
          "value": 269
        },
        {
          "name": "SAPP_KEYCODE_CAPS_LOCK",
          "value": 280
        },
        {
          "name": "SAPP_KEYCODE_SCROLL_LOCK",
          "value": 281
        },
        {
          "name": "SAPP_KEYCODE_NUM_LOCK",
          "value": 282
        },
        {
          "name": "SAPP_KEYCODE_PRINT_SCREEN",
          "value": 283
        },
        {
          "name": "SAPP_KEYCODE_PAUSE",
          "value": 284
        },
        {
          "name": "SAPP_KEYCODE_F1",
          "value": 290
        },
        {
          "name": "SAPP_KEYCODE_F2",
          "value": 291
        },
        {
          "name": "SAPP_KEYCODE_F3",
          "value": 292
        },
        {
          "name": "SAPP_KEYCODE_F4",
          "value": 293
        },
        {
          "name": "SAPP_KEYCODE_F5",
          "value": 294
        },
        {
          "name": "SAPP_KEYCODE_F6",
          "value": 295
        },
        {
          "name": "SAPP_KEYCODE_F7",
          "value": 296
        },
        {
          "name": "SAPP_KEYCODE_F8",
          "value": 297
        },
        {
          "name": "SAPP_KEYCODE_F9",
          "value": 298
        },
        {
          "name": "SAPP_KEYCODE_F10",
          "value": 299
        },
        {
          "name": "SAPP_KEYCODE_F11",
          "value": 300
        },
        {
          "name": "SAPP_KEYCODE_F12",
          "value": 301
        },
        {
          "name": "SAPP_KEYCODE_F13",
          "value": 302
        },
        {
          "name": "SAPP_KEYCODE_F14",
          "value": 303
        },
        {
          "name": "SAPP_KEYCODE_F15",
          "value": 304
        },
        {
          "name": "SAPP_KEYCODE_F16",
          "value": 305
        },
        {
          "name": "SAPP_KEYCODE_F17",
          "value": 306
        },
        {
          "name": "SAPP_KEYCODE_F18",
          "value": 307
        },
        {
          "name": "SAPP_KEYCODE_F19",
          "value": 308
        },
        {
          "name": "SAPP_KEYCODE_F20",
          "value": 309
        },
        {
          "name": "SAPP_KEYCODE_F21",
          "value": 310
        },
        {
          "name": "SAPP_KEYCODE_F22",
          "value": 311
        },
        {
          "name": "SAPP_KEYCODE_F23",
          "value": 312
        },
        {
          "name": "SAPP_KEYCODE_F24",
          "value": 313
        },
        {
          "name": "SAPP_KEYCODE_F25",
          "value": 314
        },
        {
          "name": "SAPP_KEYCODE_KP_0",
          "value": 320
        },
        {
          "name": "SAPP_KEYCODE_KP_1",
          "value": 321
        },
        {
          "name": "SAPP_KEYCODE_KP_2",
          "value": 322
        },
        {
          "name": "SAPP_KEYCODE_KP_3",
          "value": 323
        },
        {
          "name": "SAPP_KEYCODE_KP_4",
          "value": 324
        },
        {
          "name": "SAPP_KEYCODE_KP_5",
          "value": 325
        },
        {
          "name": "SAPP_KEYCODE_KP_6",
          "value": 326
        },
        {
          "name": "SAPP_KEYCODE_KP_7",
          "value": 327
        },
        {
          "name": "SAPP_KEYCODE_KP_8",
          "value": 328
        },
        {
          "name": "SAPP_KEYCODE_KP_9",
          "value": 329
        },
        {
          "name": "SAPP_KEYCODE_KP_DECIMAL",
          "value": 330
        },
        {
          "name": "SAPP_KEYCODE_KP_DIVIDE",
          "value": 331
        },
        {
          "name": "SAPP_KEYCODE_KP_MULTIPLY",
          "value": 332
        },
        {
          "name": "SAPP_KEYCODE_KP_SUBTRACT",
          "value": 333
        },
        {
          "name": "SAPP_KEYCODE_KP_ADD",
          "value": 334
        },
        {
          "name": "SAPP_KEYCODE_KP_ENTER",
          "value": 335
        },
        {
          "name": "SAPP_KEYCODE_KP_EQUAL",
          "value": 336
        },
        {
          "name": "SAPP_KEYCODE_LEFT_SHIFT",
          "value": 340
        },
        {
          "name": "SAPP_KEYCODE_LEFT_CONTROL",
          "value": 341
        },
        {
          "name": "SAPP_KEYCODE_LEFT_ALT",
          "value": 342
        },
        {
          "name": "SAPP_KEYCODE_LEFT_SUPER",
          "value": 343
        },
        {
          "name": "SAPP_KEYCODE_RIGHT_SHIFT",
          "value": 344
        },
        {
          "name": "SAPP_KEYCODE_RIGHT_CONTROL",
          "value": 345
        },
        {
          "name": "SAPP_KEYCODE_RIGHT_ALT",
          "value": 346
        },
        {
          "name": "SAPP_KEYCODE_RIGHT_SUPER",
          "value": 347
        },
        {
          "name": "SAPP_KEYCODE_MENU",
          "value": 348
        }
      ],
      "comment": "/*\n    sapp_keycode\n\n    The \u0027virtual keycode\u0027 of a KEY_DOWN or KEY_UP event in the\n    struct field sapp_event.key_code.\n\n    Note that the keycode values are identical with GLFW.\n*/"
    },
    "sapp_event_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_EVENTTYPE_INVALID"
        },
        {
          "name": "SAPP_EVENTTYPE_KEY_DOWN",
          "value": 1
        },
        {
          "name": "SAPP_EVENTTYPE_KEY_UP",
          "value": 2
        },
        {
          "name": "SAPP_EVENTTYPE_CHAR",
          "value": 3
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_DOWN",
          "value": 4
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_UP",
          "value": 5
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_SCROLL",
          "value": 6
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_MOVE",
          "value": 7
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_ENTER",
          "value": 8
        },
        {
          "name": "SAPP_EVENTTYPE_MOUSE_LEAVE",
          "value": 9
        },
        {
          "name": "SAPP_EVENTTYPE_TOUCHES_BEGAN",
          "value": 10
        },
        {
          "name": "SAPP_EVENTTYPE_TOUCHES_MOVED",
          "value": 11
        },
        {
          "name": "SAPP_EVENTTYPE_TOUCHES_ENDED",
          "value": 12
        },
        {
          "name": "SAPP_EVENTTYPE_TOUCHES_CANCELLED",
          "value": 13
        },
        {
          "name": "SAPP_EVENTTYPE_RESIZED",
          "value": 14
        },
        {
          "name": "SAPP_EVENTTYPE_ICONIFIED",
          "value": 15
        },
        {
          "name": "SAPP_EVENTTYPE_RESTORED",
          "value": 16
        },
        {
          "name": "SAPP_EVENTTYPE_FOCUSED",
          "value": 17
        },
        {
          "name": "SAPP_EVENTTYPE_UNFOCUSED",
          "value": 18
        },
        {
          "name": "SAPP_EVENTTYPE_SUSPENDED",
          "value": 19
        },
        {
          "name": "SAPP_EVENTTYPE_RESUMED",
          "value": 20
        },
        {
          "name": "SAPP_EVENTTYPE_QUIT_REQUESTED",
          "value": 21
        },
        {
          "name": "SAPP_EVENTTYPE_CLIPBOARD_PASTED",
          "value": 22
        },
        {
          "name": "SAPP_EVENTTYPE_FILES_DROPPED",
          "value": 23
        },
        {
          "name": "_SAPP_EVENTTYPE_NUM",
          "value": 24
        },
        {
          "name": "_SAPP_EVENTTYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sapp_event_type\n\n    The type of event that\u0027s passed to the event handler callback\n    in the sapp_event.type field. These are not just \u0022traditional\u0022\n    input events, but also notify the application about state changes\n    or other user-invoked actions.\n*/"
    },
    "sg_uniform_layout": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_UNIFORMLAYOUT_DEFAULT"
        },
        {
          "name": "SG_UNIFORMLAYOUT_NATIVE",
          "value": 1
        },
        {
          "name": "SG_UNIFORMLAYOUT_STD140",
          "value": 2
        },
        {
          "name": "_SG_UNIFORMLAYOUT_NUM",
          "value": 3
        },
        {
          "name": "_SG_UNIFORMLAYOUT_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_uniform_layout\n\n    A hint for the interior memory layout of uniform blocks. This is\n    only really relevant for the GL backend where the internal layout\n    of uniform blocks must be known to sokol-gfx. For all other backends the\n    internal memory layout of uniform blocks doesn\u0027t matter, sokol-gfx\n    will just pass uniform data as a single memory blob to the\n    3D backend.\n\n    SG_UNIFORMLAYOUT_NATIVE (default)\n        Native layout means that a \u0027backend-native\u0027 memory layout\n        is used. For the GL backend this means that uniforms\n        are packed tightly in memory (e.g. there are no padding\n        bytes).\n\n    SG_UNIFORMLAYOUT_STD140\n        The memory layout is a subset of std140. Arrays are only\n        allowed for the FLOAT4, INT4 and MAT4. Alignment is as\n        is as follows:\n\n            FLOAT, INT:         4 byte alignment\n            FLOAT2, INT2:       8 byte alignment\n            FLOAT3, INT3:       16 byte alignment(!)\n            FLOAT4, INT4:       16 byte alignment\n            MAT4:               16 byte alignment\n            FLOAT4[], INT4[]:   16 byte alignment\n\n        The overall size of the uniform block must be a multiple\n        of 16.\n\n    For more information search for \u0027UNIFORM DATA LAYOUT\u0027 in the documentation block\n    at the start of the header.\n*/"
    },
    "sg_buffer_type": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_BUFFERTYPE_DEFAULT"
        },
        {
          "name": "SG_BUFFERTYPE_VERTEXBUFFER",
          "value": 1
        },
        {
          "name": "SG_BUFFERTYPE_INDEXBUFFER",
          "value": 2
        },
        {
          "name": "_SG_BUFFERTYPE_NUM",
          "value": 3
        },
        {
          "name": "_SG_BUFFERTYPE_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_buffer_type\n\n    This indicates whether a buffer contains vertex- or index-data,\n    used in the sg_buffer_desc.type member when creating a buffer.\n\n    The default value is SG_BUFFERTYPE_VERTEXBUFFER.\n*/"
    },
    "sg_color_mask": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "_SG_COLORMASK_DEFAULT"
        },
        {
          "name": "SG_COLORMASK_NONE",
          "value": 16
        },
        {
          "name": "SG_COLORMASK_R",
          "value": 1
        },
        {
          "name": "SG_COLORMASK_G",
          "value": 2
        },
        {
          "name": "SG_COLORMASK_RG",
          "value": 3
        },
        {
          "name": "SG_COLORMASK_B",
          "value": 4
        },
        {
          "name": "SG_COLORMASK_RB",
          "value": 5
        },
        {
          "name": "SG_COLORMASK_GB",
          "value": 6
        },
        {
          "name": "SG_COLORMASK_RGB",
          "value": 7
        },
        {
          "name": "SG_COLORMASK_A",
          "value": 8
        },
        {
          "name": "SG_COLORMASK_RA",
          "value": 9
        },
        {
          "name": "SG_COLORMASK_GA",
          "value": 10
        },
        {
          "name": "SG_COLORMASK_RGA",
          "value": 11
        },
        {
          "name": "SG_COLORMASK_BA",
          "value": 12
        },
        {
          "name": "SG_COLORMASK_RBA",
          "value": 13
        },
        {
          "name": "SG_COLORMASK_GBA",
          "value": 14
        },
        {
          "name": "SG_COLORMASK_RGBA",
          "value": 15
        },
        {
          "name": "_SG_COLORMASK_FORCE_U32",
          "value": 2147483647
        }
      ],
      "comment": "/*\n    sg_color_mask\n\n    Selects the active color channels when writing a fragment color to the\n    framebuffer. This is used in the members\n    sg_pipeline_desc.colors[i].write_mask when creating a pipeline object.\n\n    The default colormask is SG_COLORMASK_RGBA (write all colors channels)\n\n    NOTE: since the color mask value 0 is reserved for the default value\n    (SG_COLORMASK_RGBA), use SG_COLORMASK_NONE if all color channels\n    should be disabled.\n*/"
    },
    "sapp_android_tooltype": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "SAPP_ANDROIDTOOLTYPE_UNKNOWN"
        },
        {
          "name": "SAPP_ANDROIDTOOLTYPE_FINGER",
          "value": 1
        },
        {
          "name": "SAPP_ANDROIDTOOLTYPE_STYLUS",
          "value": 2
        },
        {
          "name": "SAPP_ANDROIDTOOLTYPE_MOUSE",
          "value": 3
        }
      ],
      "comment": "/*\n    Android specific \u0027tool type\u0027 enum for touch events. This lets the\n    application check what type of input device was used for\n    touch events.\n\n    NOTE: the values must remain in sync with the corresponding\n    Android SDK type, so don\u0027t change those.\n\n    See https://developer.android.com/reference/android/view/MotionEvent#TOOL_TYPE_UNKNOWN\n*/"
    }
  },
  "typeAliases": {
    "sfetch_callback_t": {
      "underlyingType": {
        "name": "void (const sfetch_response_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* response callback function signature */"
    }
  },
  "opaqueTypes": {},
  "functionPointers": {
    "void (int, int, int, void *)": {
      "type": {
        "name": "void (int, int, int, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_buffer_desc *, sg_buffer, void *)": {
      "type": {
        "name": "void (const sg_buffer_desc *, sg_buffer, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_buffer_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_buffer_desc",
              "kind": "typeAlias",
              "sizeOf": 96,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_buffer_desc",
                "kind": "struct",
                "sizeOf": 96,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_bindings *, void *)": {
      "type": {
        "name": "void (const sg_bindings *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_bindings*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_bindings",
              "kind": "typeAlias",
              "sizeOf": 176,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_bindings",
                "kind": "struct",
                "sizeOf": 176,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_shader, const sg_shader_desc *, void *)": {
      "type": {
        "name": "void (sg_shader, const sg_shader_desc *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_shader_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_desc",
              "kind": "typeAlias",
              "sizeOf": 3048,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_shader_desc",
                "kind": "struct",
                "sizeOf": 3048,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_image, void *)": {
      "type": {
        "name": "void (sg_image, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_buffer, const sg_buffer_desc *, void *)": {
      "type": {
        "name": "void (sg_buffer, const sg_buffer_desc *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_buffer_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_buffer_desc",
              "kind": "typeAlias",
              "sizeOf": 96,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_buffer_desc",
                "kind": "struct",
                "sizeOf": 96,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (void *)": {
      "type": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_shader, void *)": {
      "type": {
        "name": "void (sg_shader, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_pass, void *)": {
      "type": {
        "name": "void (sg_pass, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_pass_action *, int, int, void *)": {
      "type": {
        "name": "void (const sg_pass_action *, int, int, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pass_action*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_action",
              "kind": "typeAlias",
              "sizeOf": 104,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_action",
                "kind": "struct",
                "sizeOf": 104,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_shader_desc *, sg_shader, void *)": {
      "type": {
        "name": "void (const sg_shader_desc *, sg_shader, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_shader_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_shader_desc",
              "kind": "typeAlias",
              "sizeOf": 3048,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_shader_desc",
                "kind": "struct",
                "sizeOf": 3048,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_shader",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "const void *(void)": {
      "type": {
        "name": "const void *(void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": []
    },
    "void (const sg_pass_desc *, sg_pass, void *)": {
      "type": {
        "name": "void (const sg_pass_desc *, sg_pass, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pass_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_desc",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_desc",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sapp_html5_fetch_response *)": {
      "type": {
        "name": "void (const sapp_html5_fetch_response *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sapp_html5_fetch_response*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_html5_fetch_response",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_html5_fetch_response",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (sg_pass, const sg_pass_action *, void *)": {
      "type": {
        "name": "void (sg_pass, const sg_pass_action *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_pass_action*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_action",
              "kind": "typeAlias",
              "sizeOf": 104,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_action",
                "kind": "struct",
                "sizeOf": 104,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (int, int, int, int, _Bool, void *)": {
      "type": {
        "name": "void (int, int, int, int, _Bool, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_image_desc *, sg_image, void *)": {
      "type": {
        "name": "void (const sg_image_desc *, sg_image, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_image_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_desc",
              "kind": "typeAlias",
              "sizeOf": 1688,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_desc",
                "kind": "struct",
                "sizeOf": 1688,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const char *, void *)": {
      "type": {
        "name": "void (const char *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (void)": {
      "type": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "void (sg_image, const sg_image_data *, void *)": {
      "type": {
        "name": "void (sg_image, const sg_image_data *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_image_data*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_data",
              "kind": "typeAlias",
              "sizeOf": 1536,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_data",
                "kind": "struct",
                "sizeOf": 1536,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_pipeline, const sg_pipeline_desc *, void *)": {
      "type": {
        "name": "void (sg_pipeline, const sg_pipeline_desc *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_pipeline_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pipeline_desc",
              "kind": "typeAlias",
              "sizeOf": 568,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pipeline_desc",
                "kind": "struct",
                "sizeOf": 568,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sg_pipeline_desc *, sg_pipeline, void *)": {
      "type": {
        "name": "void (const sg_pipeline_desc *, sg_pipeline, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pipeline_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pipeline_desc",
              "kind": "typeAlias",
              "sizeOf": 568,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pipeline_desc",
                "kind": "struct",
                "sizeOf": 568,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sapp_event *, void *)": {
      "type": {
        "name": "void (const sapp_event *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sapp_event*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_event",
              "kind": "typeAlias",
              "sizeOf": 272,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_event",
                "kind": "struct",
                "sizeOf": 272,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_pipeline, void *)": {
      "type": {
        "name": "void (sg_pipeline, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pipeline",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pipeline",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_buffer, const sg_range *, int, void *)": {
      "type": {
        "name": "void (sg_buffer, const sg_range *, int, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "const void *(void *)": {
      "type": {
        "name": "const void *(void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (float *, int, int)": {
      "type": {
        "name": "void (float *, int, int)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "float*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ]
    },
    "void (const char *)": {
      "type": {
        "name": "void (const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "void (sg_buffer, const sg_range *, void *)": {
      "type": {
        "name": "void (sg_buffer, const sg_range *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_image, const sg_image_desc *, void *)": {
      "type": {
        "name": "void (sg_image, const sg_image_desc *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_image",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_image",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_image_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_image_desc",
              "kind": "typeAlias",
              "sizeOf": 1688,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_image_desc",
                "kind": "struct",
                "sizeOf": 1688,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sfetch_response_t *)": {
      "type": {
        "name": "void (const sfetch_response_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sfetch_response_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sfetch_response_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sfetch_response_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, void *)": {
      "type": {
        "name": "void (void *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_pass, const sg_pass_desc *, void *)": {
      "type": {
        "name": "void (sg_pass, const sg_pass_desc *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_pass",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_pass",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_pass_desc*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_pass_desc",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_pass_desc",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (const sapp_event *)": {
      "type": {
        "name": "void (const sapp_event *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sapp_event*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sapp_event",
              "kind": "typeAlias",
              "sizeOf": 272,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sapp_event",
                "kind": "struct",
                "sizeOf": 272,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (float *, int, int, void *)": {
      "type": {
        "name": "void (float *, int, int, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "float*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_shader_stage, int, const sg_range *, void *)": {
      "type": {
        "name": "void (sg_shader_stage, int, const sg_range *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_shader_stage",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_shader_stage",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "",
          "type": {
            "name": "sg_range*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "sg_range",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "sg_range",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (sg_buffer, void *)": {
      "type": {
        "name": "void (sg_buffer, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "sg_buffer",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "sg_buffer",
              "kind": "struct",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void *(size_t, void *)": {
      "type": {
        "name": "void *(size_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    }
  },
  "enumConstants": {
    "SAPP_MODIFIER_CTRL": {
      "name": "SAPP_MODIFIER_CTRL",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "2",
      "comment": "// left or right control key"
    },
    "SAPP_MAX_MOUSEBUTTONS": {
      "name": "SAPP_MAX_MOUSEBUTTONS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "3"
    },
    "SG_MAX_COLOR_ATTACHMENTS": {
      "name": "SG_MAX_COLOR_ATTACHMENTS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "4"
    },
    "SAPP_MODIFIER_ALT": {
      "name": "SAPP_MODIFIER_ALT",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "4",
      "comment": "// left or right alt key"
    },
    "SG_MAX_UB_MEMBERS": {
      "name": "SG_MAX_UB_MEMBERS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "16"
    },
    "SAPP_MODIFIER_RMB": {
      "name": "SAPP_MODIFIER_RMB",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "512",
      "comment": "// right mouse button"
    },
    "SAPP_MODIFIER_SUPER": {
      "name": "SAPP_MODIFIER_SUPER",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "8",
      "comment": "// left or right \u0027super\u0027 key"
    },
    "SG_INVALID_ID": {
      "name": "SG_INVALID_ID",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "0"
    },
    "SG_MAX_TEXTUREARRAY_LAYERS": {
      "name": "SG_MAX_TEXTUREARRAY_LAYERS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "128"
    },
    "SAPP_MAX_ICONIMAGES": {
      "name": "SAPP_MAX_ICONIMAGES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "8"
    },
    "SG_MAX_SHADERSTAGE_IMAGES": {
      "name": "SG_MAX_SHADERSTAGE_IMAGES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "12"
    },
    "SG_NUM_SHADER_STAGES": {
      "name": "SG_NUM_SHADER_STAGES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "2"
    },
    "SAPP_MAX_TOUCHPOINTS": {
      "name": "SAPP_MAX_TOUCHPOINTS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "8"
    },
    "SAPP_MODIFIER_MMB": {
      "name": "SAPP_MODIFIER_MMB",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "1024",
      "comment": "// middle mouse button"
    },
    "SG_MAX_SHADERSTAGE_BUFFERS": {
      "name": "SG_MAX_SHADERSTAGE_BUFFERS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "8"
    },
    "SAPP_MODIFIER_LMB": {
      "name": "SAPP_MODIFIER_LMB",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "256",
      "comment": "// left mouse button"
    },
    "SAPP_MODIFIER_SHIFT": {
      "name": "SAPP_MODIFIER_SHIFT",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "1",
      "comment": "// left or right shift key"
    },
    "SG_MAX_VERTEX_ATTRIBUTES": {
      "name": "SG_MAX_VERTEX_ATTRIBUTES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "16",
      "comment": "/* NOTE: actual max vertex attrs can be less on GLES2, see sg_limits! */"
    },
    "SG_NUM_INFLIGHT_FRAMES": {
      "name": "SG_NUM_INFLIGHT_FRAMES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "2"
    },
    "SAPP_MAX_KEYCODES": {
      "name": "SAPP_MAX_KEYCODES",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "512"
    },
    "SG_MAX_SHADERSTAGE_UBS": {
      "name": "SG_MAX_SHADERSTAGE_UBS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "4"
    },
    "SG_MAX_MIPMAPS": {
      "name": "SG_MAX_MIPMAPS",
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "value": "16"
    }
  }
}